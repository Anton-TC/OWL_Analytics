import Auth from "../auth/auth.js";
import ListableResource from "../listable.js";
class WebIntegration {
  constructor({
    created,
    createdBy,
    id,
    lastUpdated,
    name,
    tenantId,
    validOrigins,
    ...rest
  }, auth) {
    this.auth = auth;
    this.created = created;
    this.createdBy = createdBy;
    this.id = id;
    this.lastUpdated = lastUpdated;
    this.name = name;
    this.tenantId = tenantId;
    this.validOrigins = validOrigins;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
  /**    Deletes a single web integration by ID.
    Delete web integration by ID
  
    */
  async delete() {
    await this.auth.rest(
      "/web-integrations/{id}".replace("{id}", this.id ?? ""),
      {
        method: "DELETE"
      }
    );
  }
  /**    Updates a single web integration by ID.
    Update web integration by ID
  
      @param data - Properties that the user wants to update for the web integration.
    */
  async patch(data) {
    await this.auth.rest(
      "/web-integrations/{id}".replace("{id}", this.id ?? ""),
      {
        method: "PATCH",
        body: JSON.stringify(data)
      }
    );
  }
}
class WebIntegrations {
  constructor(config) {
    this.config = config instanceof Auth ? config.config : config;
    this.auth = config instanceof Auth ? config : new Auth(config);
  }
  /**    Retrieves a single web integration by ID.
    Get web integration by ID
  
      @param id - The ID of the web integration to retrieve.
    */
  async get(id) {
    const response = await this.auth.rest(
      "/web-integrations/{id}".replace("{id}", id),
      {
        method: "GET"
      }
    );
    const responseJson = await response.json();
    return new WebIntegration(responseJson, this.auth);
  }
  /**    Retrieves web integrations matching the query.
    List web integrations
  
      @param endingBefore - The target web integration ID to start looking before for web integrations. Cannot be used in conjunction with startingAfter.
      @param limit - The number of web integration entries to retrieve.
      @param sort - The field to sort by. Prefix with +/- to indicate ascending/descending order.
      @param startingAfter - The target web integration ID to start looking after for web integrations. Cannot be used in conjunction with endingBefore.
      @param tenantId - The tenant ID to filter by.
    */
  async getWebIntegrations(queryParams = { limit: 10, sort: "+name" }) {
    const response = await this.auth.rest(
      `/web-integrations?${new URLSearchParams(Object.entries(queryParams).filter(([, v]) => v !== void 0).map(([k, v]) => [k, v.toString()])).toString()}`,
      {
        method: "GET"
      }
    );
    const responseJson = await response.json();
    return new ListableResource(responseJson, this.auth, WebIntegration, queryParams);
  }
  /**    Creates a web integration.
    Create web integration
  
      @param data - Properties that the user wants to set for the web integration.
    */
  async create(data) {
    const response = await this.auth.rest(
      "/web-integrations",
      {
        method: "POST",
        body: JSON.stringify(data)
      }
    );
    return response.json();
  }
}
export {
  WebIntegration,
  WebIntegrations
};
