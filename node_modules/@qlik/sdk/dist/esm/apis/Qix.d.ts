/**
This is spectacularly generated code by spectacular based on
QIX
*/
import Auth from '../auth/auth.js';
import { RpcSession, EventListener, EventTypes } from '../qlik.js';
export type NxAppPropertiesSheetLogoThumbnail = {
    /** In addition, this structure can contain dynamic properties. */
    qStaticContentUrlDef?: NxAppPropertiesSheetLogoThumbnailQStaticContentUrlDef;
    [key: string]: any;
};
export type NxAppPropertiesSheetLogoThumbnailQStaticContentUrlDef = {
    /** Relative path of the thumbnail. */
    qUrl?: string;
    [key: string]: any;
};
export type AppPropertiesList = {
    /** Defines the list of objects in an app.
  An app object is a generic object created at app level. */
    qAppObjectListDef?: AppPropertiesListQAppObjectListDef;
    /** Should be set to create an object that is linked to another object. Enter the identifier of the linking object (i.e the object you want to link to).
  If you do not want to link your object, set this parameter to an empty string. */
    qExtendsId?: string;
    qInfo?: NxInfo;
    /** Used to collect meta data.
  
  Properties
  Semantic type with an empty structure. */
    qMetaDef?: object;
    /** Name of the alternate state.
  Default is current selections _$_ . Default:$
  @defaultValue "$" */
    qStateName?: string;
    [key: string]: any;
};
export type AppPropertiesListQAppObjectListDef = {
    /** Contains dynamic JSON data specified by the client. */
    qData?: AppPropertiesListQAppObjectListDefQData;
    /** Object type. Default:appprops
  @defaultValue "appprops" */
    qType?: string;
    [key: string]: any;
};
export type AppPropertiesListQAppObjectListDefQData = {
    /** Path to chartAnimations in AppGenericProperties Default:/chartAnimations
  @defaultValue "/chartAnimations" */
    chartAnimations?: string;
    /** Path to disableCellNavMenu in AppGenericProperties Default:/disableCellNavMenu
  @defaultValue "/disableCellNavMenu" */
    disableCellNavMenu?: string;
    /** Path to rtl in AppGenericProperties Default:/rtl
  @defaultValue "/rtl" */
    rtl?: string;
    /** Path to sheetLogoPosition in AppGenericProperties Default:/sheetLogoPosition
  @defaultValue "/sheetLogoPosition" */
    sheetLogoPosition?: string;
    /** Path to sheetLogoThumbnail in AppGenericProperties Default:/sheetLogoThumbnail
  @defaultValue "/sheetLogoThumbnail" */
    sheetLogoThumbnail?: string;
    /** Path to sheetTitleBgColor in AppGenericProperties Default:/sheetTitleBgColor
  @defaultValue "/sheetTitleBgColor" */
    sheetTitleBgColor?: string;
    /** Path to sheetTitleColor in AppGenericProperties Default:/sheetTitleColor
  @defaultValue "/sheetTitleColor" */
    sheetTitleColor?: string;
    /** Path to sheetTitleGradientColor in AppGenericProperties Default:/sheetTitleGradientColor
  @defaultValue "/sheetTitleGradientColor" */
    sheetTitleGradientColor?: string;
    /** Path to theme in AppGenericProperties Default:/theme
  @defaultValue "/theme" */
    theme?: string;
    [key: string]: any;
};
export type GenericBookmarkPropertiesQMetaDef = {
    /** Short description for the app object */
    description?: string;
    /** Tags for the app object */
    tags?: Array<string>;
    /** Title for the app object */
    title?: string;
    [key: string]: any;
};
export type BookmarkListQBookmarkListDef = {
    /** Contains dynamic JSON data specified by the client. */
    qData?: BookmarkListQBookmarkListDefQData;
    /** Include the bookmark patches. Patches can be very large and may make the list result unmanageable. */
    qIncludePatches?: boolean;
    /** Object type. Default:bookmark
  @defaultValue "bookmark" */
    qType?: string;
    [key: string]: any;
};
export type BookmarkListQBookmarkListDefQData = {
    /** Path to creationDate in BookmarkProperties Default:/creationDate
  @defaultValue "/creationDate" */
    creationDate?: string;
    /** Path to description in BookmarkProperties Default:/qMetaDef/description
  @defaultValue "/qMetaDef/description" */
    description?: string;
    /** Path to selectionFields in BookmarkProperties Default:/selectionFields
  @defaultValue "/selectionFields" */
    selectionFields?: string;
    /** Path to sheetId in BookmarkProperties Default:/sheetId
  @defaultValue "/sheetId" */
    sheetId?: string;
    /** Path to title in BookmarkProperties Default:/qMetaDef/title
  @defaultValue "/qMetaDef/title" */
    title?: string;
    [key: string]: any;
};
export type GenericCurrentSelectionsProperties = {
    /** Should be set to create an object that is linked to another object. Enter the identifier of the linking object (i.e the object you want to link to).
  If you do not want to link your object, set this parameter to an empty string. */
    qExtendsId?: string;
    qInfo?: NxInfo;
    /** Used to collect meta data.
  
  Properties
  Semantic type with an empty structure. */
    qMetaDef?: object;
    qSelectionObjectDef?: GenericCurrentSelectionsPropertiesQSelectionObjectDef;
    /** Name of the alternate state.
  Default is current selections _$_ . Default:$
  @defaultValue "$" */
    qStateName?: string;
    /** CurrentSelections Object Default:CurrentSelection
  @defaultValue "CurrentSelection" */
    qType?: string;
    [key: string]: any;
};
export type GenericCurrentSelectionsPropertiesQSelectionObjectDef = {
    /** Name of the alternate state.
  Default is current selections _$_ . Default:$
  @defaultValue "$" */
    qStateName?: string;
    [key: string]: any;
};
export type GenericDimensionPropertiesQDim = {
    /** Settings coloring by master dimension. */
    coloring?: GenericDimensionPropertiesQDimColoring;
    /** Properties
  Abbreviated syntax:
  "qStringExpression":"=&lt;expression&gt;"
  Extended object syntax:
  "qStringExpression":{"qExpr":"=&lt;expression&gt;"}
  Where:
  &lt; **expression** &gt; is a string
  
  The "=" sign in the string expression is not mandatory. Even if the "=" sign is not given, the expression is evaluated. A string expression is not evaluated, if the expression is surrounded by simple quotes.
  The result of the evaluation of the expression can be of any type, as it is returned as a JSON (quoted) string. */
    descriptionExpression?: GenericDimensionPropertiesQDimDescriptionExpression;
    /** Array of dimension names. */
    qFieldDefs?: Array<string>;
    /** Array of dimension labels. */
    qFieldLabels?: Array<string>;
    /** One of: N, H, C. */
    qGrouping?: string;
    /** Name of the dimension as an expression. Only when qGrouping is N. */
    qLabelExpression?: string;
    /** Name of the dimension. Used unless label expression is set. */
    title?: string;
    [key: string]: any;
};
export type GenericDimensionPropertiesQDimColoring = {
    /** Color information structure. Holds actual color and index in palette. */
    baseColor?: GenericDimensionPropertiesQDimColoringBaseColor;
    [key: string]: any;
};
export type GenericDimensionPropertiesQDimColoringBaseColor = {
    /** Color as hex string */
    color?: string;
    /** Index in palette Default:6
  @defaultValue 6 */
    index?: number;
    [key: string]: any;
};
export type GenericDimensionPropertiesQDimDescriptionExpression = {
    qExpr?: string;
    [key: string]: any;
};
export type GenericDimensionPropertiesQMetaDef = {
    /** Short description for the app object */
    description?: string;
    /** Tags for the app object */
    tags?: Array<string>;
    /** Title for the app object */
    title?: string;
    [key: string]: any;
};
export type DimensionListQDimensionListDef = {
    /** Contains dynamic JSON data specified by the client. */
    qData?: DimensionListQDimensionListDefQData;
    /** Object type Default:dimension
  @defaultValue "dimension" */
    qType?: string;
    [key: string]: any;
};
export type DimensionListQDimensionListDefQData = {
    /** Path to grouping in DimensionProperties Default:/qDim/grouping
  @defaultValue "/qDim/grouping" */
    grouping?: string;
    /** Path to qDimInfos in DimensionProperties Default:/qDimInfos
  @defaultValue "/qDimInfos" */
    info?: string;
    /** Path to labelExpression in DimensionProperties Default:/qDim/labelExpression
  @defaultValue "/qDim/labelExpression" */
    labelExpression?: string;
    /** Path to tags in DimensionProperties Default:/qMetaDef/tags
  @defaultValue "/qMetaDef/tags" */
    tags?: string;
    /** Path to title in DimensionProperties Default:/qMetaDef/title
  @defaultValue "/qMetaDef/title" */
    title?: string;
    [key: string]: any;
};
export type FieldListQFieldListDef = {
    /** Shows the fields defined on the fly if set to true.
  Default is false. Default:false */
    qShowDefinitionOnly?: boolean;
    /** Shows the fields and derived fields if set to true.
  Default is true. Default:true
  @defaultValue true */
    qShowDerivedFields?: boolean;
    /** Shows the hidden fields if set to true.
  Default is false. Default:false */
    qShowHidden?: boolean;
    /** Shows the Direct Discovery measure fields if set to true.
  Default is false. Default:false */
    qShowImplicit?: boolean;
    /** Show the semantic fields if set to true.
  Default is true. Default:true
  @defaultValue true */
    qShowSemantic?: boolean;
    /** Shows the tables and fields present in the data model viewer if set to true.
  Default is true. Default:true
  @defaultValue true */
    qShowSrcTables?: boolean;
    /** Shows the system tables if set to true.
  Default is false. Default:false */
    qShowSystem?: boolean;
    [key: string]: any;
};
export type GenericMasterobjectProperties = {
    /** Version number. Will default to latest Qlik Sense version if not manually set. Default:0.95
  @defaultValue 0.95 */
    masterVersion?: number;
    /** Should be set to create an object that is linked to another object. Enter the identifier of the linking object (i.e the object you want to link to).
  If you do not want to link your object, set this parameter to an empty string. */
    qExtendsId?: string;
    qInfo?: NxInfo;
    qLayoutExclude?: object;
    /** The metadata object used by all app objects */
    qMetaDef?: GenericMasterobjectPropertiesQMetaDef;
    /** Name of the alternate state.
  Default is current selections _$_ . Default:$
  @defaultValue "$" */
    qStateName?: string;
    /** Show visualization details toggle Default:false */
    showDetails?: boolean;
    /** Visualization subtitle Default:true
  @defaultValue true */
    showTitles?: boolean;
    /** Visualization type. Must always be set. */
    visualization?: string;
    [key: string]: any;
};
export type GenericMasterobjectPropertiesQMetaDef = {
    /** Short description for the app object */
    description?: string;
    /** Tags for the app object */
    tags?: Array<string>;
    /** Title for the app object */
    title?: string;
    [key: string]: any;
};
export type MasterobjectList = {
    /** Defines the list of objects in an app.
  An app object is a generic object created at app level. */
    qAppObjectListDef?: MasterobjectListQAppObjectListDef;
    /** Should be set to create an object that is linked to another object. Enter the identifier of the linking object (i.e the object you want to link to).
  If you do not want to link your object, set this parameter to an empty string. */
    qExtendsId?: string;
    qInfo?: NxInfo;
    /** Used to collect meta data.
  
  Properties
  Semantic type with an empty structure. */
    qMetaDef?: object;
    /** Name of the alternate state.
  Default is current selections _$_ . Default:$
  @defaultValue "$" */
    qStateName?: string;
    [key: string]: any;
};
export type MasterobjectListQAppObjectListDef = {
    /** Contains dynamic JSON data specified by the client. */
    qData?: MasterobjectListQAppObjectListDefQData;
    /** Object type Default:masterobject
  @defaultValue "masterobject" */
    qType?: string;
    [key: string]: any;
};
export type MasterobjectListQAppObjectListDefQData = {
    /** Path to labelExpression in MasterObjectProperties Default:/labelExpression
  @defaultValue "/labelExpression" */
    labelExpression?: string;
    /** Path to title in MasterObjectProperties Default:/qMetaDef/title
  @defaultValue "/qMetaDef/title" */
    name?: string;
    /** Path to tags in MasterObjectProperties Default:/qMetaDef/tags
  @defaultValue "/qMetaDef/tags" */
    tags?: string;
    /** Path to visualization in MasterObjectProperties Default:/visualization
  @defaultValue "/visualization" */
    visualization?: string;
    [key: string]: any;
};
export type GenericMeasurePropertiesQMeasure = {
    /** Settings coloring by master measure. */
    coloring?: GenericMeasurePropertiesQMeasureColoring;
    /** Properties
  Abbreviated syntax:
  "qStringExpression":"=&lt;expression&gt;"
  Extended object syntax:
  "qStringExpression":{"qExpr":"=&lt;expression&gt;"}
  Where:
  &lt; **expression** &gt; is a string
  
  The "=" sign in the string expression is not mandatory. Even if the "=" sign is not given, the expression is evaluated. A string expression is not evaluated, if the expression is surrounded by simple quotes.
  The result of the evaluation of the expression can be of any type, as it is returned as a JSON (quoted) string. */
    descriptionExpression?: GenericMeasurePropertiesQMeasureDescriptionExpression;
    /** Denotes whether the measure has custom formatting applied Default:false */
    isCustomFormatted?: boolean;
    /** Denotes whether the number formatting comes from a template Default:false */
    numFormatFromTemplate?: boolean;
    /** Index to the active expression in a measure. */
    qActiveExpression?: number;
    /** Definition of the measure. */
    qDef?: string;
    /** Array of expressions. */
    qExpressions?: Array<string>;
    /** One of: N, H, C. */
    qGrouping?: string;
    /** Name of the Measure */
    qLabel?: string;
    /** Optional expression used for dynamic label. */
    qLabelExpression?: string;
    /** Sets the formatting of a field.
  The properties of _qFieldAttributes_ and the formatting mechanism are described below.
  
  Formatting mechanism
  The formatting mechanism depends on the type set in _qType,_ as shown below:
  In case of inconsistencies between the type and the format pattern, the format pattern takes precedence over the type.
  
  Type is DATE, TIME, TIMESTAMP or INTERVAL
  The following applies:
  If a format pattern is defined in _qFmt_ , the formatting is as defined in _qFmt_ .
  If _qFmt_ is empty, the formatting is defined by the number interpretation variables included at the top of the script ( _TimeFormat_ , _DateFormat_ , _TimeStampFormat_ ).
  The properties _qDec_ , _qThou_ , _qnDec_ , _qUseThou_ are not used.
  
  Type is INTEGER
  The following applies:
  If a format pattern is defined in _qFmt_ , the engine looks at the values set in _qDec_ and _qThou_ . If these properties are not defined, the formatting mechanism uses the number interpretation variables included at the top of the script ( _DecimalSep_ and _ThousandSep_ ).
  If no format pattern is defined in _qFmt_ , no formatting is applied. The properties _qDec_ , _qThou_ , _qnDec_ , _qUseThou_ and the number interpretation variables defined in the script are not used .
  
  Type is REAL
  The following applies:
  If a format pattern is defined in _qFmt_ , the engine looks at the values set in _qDec_ and _qThou_ . If these properties are not defined, the engine uses the number interpretation variables included at the top of the script ( _DecimalSep_ and _ThousandSep_ ).
  If no format pattern is defined in _qFmt_ , and if the value is almost an integer value (for example, 14,000012), the value is formatted as an integer. The properties _qDec_ , _qThou_ , _qnDec_ , _qUseThou_ are not used.
  If no format pattern is defined in _qFmt_ , and if _qnDec_ is defined and not 0, the property _qDec_ is used. If _qDec_ is not defined, the variable _DecimalSep_ defined at the top of the script is used.
  If no format pattern is defined in _qFmt_ , and if _qnDec_ is 0, the number of decimals is 14 and the property _qDec_ is used. If _qDec_ is not defined, the variable _DecimalSep_ defined at the top of the script is used.
  
  Type is FIX
  The following applies:
  If a format pattern is defined in _qFmt_ , the engine looks at the values set in _qDec_ and _qThou_ . If these properties are not defined, the engine uses the number interpretation variables included at the top of the script ( _DecimalSep_ and _ThousandSep_ ).
  If no format pattern is defined in _qFmt_ , the properties _qDec_ and _qnDec_ are used. If _qDec_ is not defined, the variable _DecimalSep_ defined at the top of the script is used.
  
  Type is MONEY
  The following applies:
  If a format pattern is defined in _qFmt_ , the engine looks at the values set in _qDec_ and _qThou_ . If these properties are not defined, the engine uses the number interpretation variables included at the top of any script ( _MoneyDecimalSep_ and _MoneyThousandSep_ ).
  If no format pattern is defined in _qFmt_ , the engine uses the number interpretation variables included at the top of the script ( _MoneyDecimalSep_ and _MoneyThousandSep_ ).
  
  Type is ASCII
  No formatting, _qFmt_ is ignored. */
    qNumFormat?: GenericMeasurePropertiesQMeasureQNumFormat;
    [key: string]: any;
};
export type GenericMeasurePropertiesQMeasureColoring = {
    /** Color information structure. Holds actual color and index in palette. */
    baseColor?: GenericMeasurePropertiesQMeasureColoringBaseColor;
    /** Color map used in by dimension color modes. */
    gradient?: GenericMeasurePropertiesQMeasureColoringGradient;
    [key: string]: any;
};
export type GenericMeasurePropertiesQMeasureColoringBaseColor = {
    /** Color as hex string */
    color?: string;
    /** Index in palette Default:6
  @defaultValue 6 */
    index?: number;
    [key: string]: any;
};
export type GenericMeasurePropertiesQMeasureColoringGradient = {
    /** Specifies how to blend in color intersections. Should be of length one less than the number of colors. */
    breakTypes?: Array<boolean>;
    /** Colors to map against measure values */
    colors?: Array<GenericMeasurePropertiesQMeasureColoringGradientColorsItem>;
    /** percent|absolute Default:percent
  @defaultValue "percent" */
    limitType?: string;
    /** Specifies where to place the color breakpoints. Should be of length one less than the number of colors. */
    limits?: Array<number>;
    [key: string]: any;
};
export type GenericMeasurePropertiesQMeasureColoringGradientColorsItem = {
    /** Color as hex string */
    color?: string;
    /** Index in palette Default:6
  @defaultValue 6 */
    index?: number;
    [key: string]: any;
};
export type GenericMeasurePropertiesQMeasureDescriptionExpression = {
    qExpr?: string;
    [key: string]: any;
};
export type GenericMeasurePropertiesQMeasureQNumFormat = {
    /** Defines the decimal separator.
  Example: **.** */
    qDec?: string;
    /** Defines the format pattern that applies to _qText_ .
  Is used in connection to the type of the field (parameter **qType** ).
  For more information, see _Formatting mechanism_.
  Example: _YYYY-MM-DD_ for a date. */
    qFmt?: string;
    /** Defines the thousand separator (if any).
  Is used if **qUseThou** is set to 1.
  Example: **,** */
    qThou?: string;
    /** One of: U, A, I, R, F, M, D, T, TS, IV. */
    qType?: string;
    /** Defines whether or not a thousands separator must be used.
  Default is 0. Default:0 */
    qUseThou?: number;
    /** Number of decimals.
  Default is 10. Default:10
  @defaultValue 10 */
    qnDec?: number;
    [key: string]: any;
};
export type GenericMeasurePropertiesQMetaDef = {
    /** Short description for the app object */
    description?: string;
    /** Tags for the app object */
    tags?: Array<string>;
    /** Title for the app object */
    title?: string;
    [key: string]: any;
};
export type MeasureListQMeasureListDef = {
    /** Contains dynamic JSON data specified by the client. */
    qData?: MeasureListQMeasureListDefQData;
    /** Object type Default:measure
  @defaultValue "measure" */
    qType?: string;
    [key: string]: any;
};
export type MeasureListQMeasureListDefQData = {
    /** Path to labelExpression in MeasureProperties Default:/qMeasure/qLabelExpression
  @defaultValue "/qMeasure/qLabelExpression" */
    labelExpression?: string;
    /** Path to tags in MeasureProperties Default:/qMetaDef/tags
  @defaultValue "/qMetaDef/tags" */
    tags?: string;
    /** Path to title in MeasureProperties Default:/qMetaDef/title
  @defaultValue "/qMetaDef/title" */
    title?: string;
    [key: string]: any;
};
export type GenericSheetProperties = {
    /** Sheet cells. */
    cells?: Array<GenericSheetPropertiesCellsItem>;
    /** Number of grid columns the sheet consists of. Using anything else than the default setting may cause the Qlik Sense client to malfunction. Default:24
  @defaultValue 24 */
    columns?: number;
    /** Sets the number of grid cells: small|medium|large Default:small
  @defaultValue "small" */
    gridResolution?: string;
    /** Height in percentage. Used in tandem with layoutOptions.sheetMode RESPONSIVE and extended sheets. Can be larger than 100 */
    height?: number;
    layoutOptions?: GenericSheetPropertiesLayoutOptions;
    /** Height in pixels. Used in tandem with layoutOptions.sheetMode */
    pxHeight?: number;
    /** Width in pixels. Used in tandem with layoutOptions.sheetMode CUSTOM */
    pxWidth?: number;
    qChildListDef?: GenericSheetPropertiesQChildListDef;
    /** Should be set to create an object that is linked to another object. Enter the identifier of the linking object (i.e the object you want to link to).
  If you do not want to link your object, set this parameter to an empty string. */
    qExtendsId?: string;
    qInfo?: NxInfo;
    /** The metadata object used by all app objects */
    qMetaDef?: GenericSheetPropertiesQMetaDef;
    /** Name of the alternate state.
  Default is current selections _$_ . Default:$
  @defaultValue "$" */
    qStateName?: string;
    /** Sheet rank. The sheet with the lowest rank will be displayed first, so the rank is inverted. Default:1
  @defaultValue 1 */
    rank?: number;
    /** Number of grid rows the sheet consists of. Using anything else than the default setting may cause the Qlik Sense client to malfunction. Default:12
  @defaultValue 12 */
    rows?: number;
    thumbnail?: GenericSheetPropertiesThumbnail;
    [key: string]: any;
};
export type GenericSheetPropertiesCellsItem = {
    /** Cell position and size in % of view */
    bounds?: GenericSheetPropertiesCellsItemBounds;
    /** Column position. */
    col?: number;
    /** Number of columns an object should span. */
    colspan?: number;
    /** Id of object. */
    name?: string;
    /** Row position. */
    row?: number;
    /** Number of rows an object should span. */
    rowspan?: number;
    /** Type of object. */
    type?: string;
    [key: string]: any;
};
export type GenericSheetPropertiesCellsItemBounds = {
    /** height in %, valid numbers are 0<height<=100 */
    height?: number;
    /** width in %, valid numbers are 0<width<=100 */
    width?: number;
    /** x position in %, valid numbers are 0<=x<100 */
    x?: number;
    /** y position in %, valid numbers are 0<=y<100 */
    y?: number;
    [key: string]: any;
};
export type GenericSheetPropertiesLayoutOptions = {
    /** Flag to show extend sheet button in the grid Default:false */
    extendable?: boolean;
    /** Sets the mobile display of the sheet in sense client: LIST|GRID Default:LIST
  @defaultValue "LIST" */
    mobileLayout?: string;
    /** Sets scaling used by the sheet: RESPONSIVE|CUSTOM */
    sheetMode?: string;
    [key: string]: any;
};
export type GenericSheetPropertiesQChildListDef = {
    qData?: GenericSheetPropertiesQChildListDefQData;
    [key: string]: any;
};
export type GenericSheetPropertiesQChildListDefQData = {
    /** Default:/title
  @defaultValue "/title" */
    title?: string;
    [key: string]: any;
};
export type GenericSheetPropertiesQMetaDef = {
    /** Short description for the app object */
    description?: string;
    /** Tags for the app object */
    tags?: Array<string>;
    /** Title for the app object */
    title?: string;
    [key: string]: any;
};
export type GenericSheetPropertiesThumbnail = {
    /** In addition, this structure can contain dynamic properties. */
    qStaticContentUrlDef?: GenericSheetPropertiesThumbnailQStaticContentUrlDef;
    [key: string]: any;
};
export type GenericSheetPropertiesThumbnailQStaticContentUrlDef = {
    /** Relative path of the thumbnail. */
    qUrl?: string;
    [key: string]: any;
};
export type SheetList = {
    /** Defines the list of objects in an app.
  An app object is a generic object created at app level. */
    qAppObjectListDef?: SheetListQAppObjectListDef;
    /** Should be set to create an object that is linked to another object. Enter the identifier of the linking object (i.e the object you want to link to).
  If you do not want to link your object, set this parameter to an empty string. */
    qExtendsId?: string;
    qInfo?: NxInfo;
    /** Used to collect meta data.
  
  Properties
  Semantic type with an empty structure. */
    qMetaDef?: object;
    /** Name of the alternate state.
  Default is current selections _$_ . Default:$
  @defaultValue "$" */
    qStateName?: string;
    [key: string]: any;
};
export type SheetListQAppObjectListDef = {
    /** Contains dynamic JSON data specified by the client. */
    qData?: SheetListQAppObjectListDefQData;
    /** Object type. Default:sheet
  @defaultValue "sheet" */
    qType?: string;
    [key: string]: any;
};
export type SheetListQAppObjectListDefQData = {
    /** Path to cells in SheetProperties Default:/cells
  @defaultValue "/cells" */
    cells?: string;
    /** Path to columns in SheetProperties Default:/columns
  @defaultValue "/columns" */
    columns?: string;
    /** Path to description in SheetProperties Default:/qMetaDef/description
  @defaultValue "/qMetaDef/description" */
    description?: string;
    /** Path to descriptionExpression in SheetProperties Default:/qMetaDef/descriptionExpression
  @defaultValue "/qMetaDef/descriptionExpression" */
    descriptionExpression?: string;
    /** Path to labelExpression in SheetProperties Default:/labelExpression
  @defaultValue "/labelExpression" */
    labelExpression?: string;
    /** Path to rank in SheetProperties Default:/rank
  @defaultValue "/rank" */
    rank?: string;
    /** Path to rows in SheetProperties Default:/rows
  @defaultValue "/rows" */
    rows?: string;
    /** Path to showCondition in SheetProperties Default:/showCondition
  @defaultValue "/showCondition" */
    showCondition?: string;
    /** Path to thumbnail in SheetProperties Default:/qMetaDef/thumbnail
  @defaultValue "/qMetaDef/thumbnail" */
    thumbnail?: string;
    /** Path to title in SheetProperties Default:/qMetaDef/title
  @defaultValue "/qMetaDef/title" */
    title?: string;
    [key: string]: any;
};
export type GenericVariablePropertiesQNumberPresentation = {
    /** Defines the decimal separator.
  Example: **.** */
    qDec?: string;
    /** Defines the format pattern that applies to _qText_ .
  Is used in connection to the type of the field (parameter **qType** ).
  For more information, see _Formatting mechanism_.
  Example: _YYYY-MM-DD_ for a date. */
    qFmt?: string;
    /** Defines the thousand separator (if any).
  Is used if **qUseThou** is set to 1.
  Example: **,** */
    qThou?: string;
    /** One of: U, A, I, R, F, M, D, T, TS, IV. */
    qType?: string;
    /** Defines whether or not a thousands separator must be used.
  Default is 0. Default:0 */
    qUseThou?: number;
    /** Number of decimals.
  Default is 10. Default:10
  @defaultValue 10 */
    qnDec?: number;
    [key: string]: any;
};
export type VariableListQVariableListDef = {
    /** Contains dynamic JSON data specified by the client. */
    qData?: VariableListQVariableListDefQData;
    /** Shows the system variables if set to true. Default:true
  @defaultValue true */
    qShowConfig?: boolean;
    /** Shows the reserved variables if set to true. Default:true
  @defaultValue true */
    qShowReserved?: boolean;
    /** Shows the session variables if set to true. */
    qShowSession?: boolean;
    /** Object type. Default:variable
  @defaultValue "variable" */
    qType?: string;
    [key: string]: any;
};
export type VariableListQVariableListDefQData = {
    /** Path to tags in VariableProperties Default:/tags
  @defaultValue "/tags" */
    tags?: string;
    [key: string]: any;
};
export type AlfaNumString = {
    /** Is set to true if the value is a numeric. */
    qIsNum?: boolean;
    /** Calculated value. */
    qString?: string;
    [key: string]: any;
};
export type AlternateStateData = {
    /** List of the selections. */
    qFieldItems?: Array<BookmarkFieldItem>;
    /** Name of the alternate state.
  Default is current selections: $ */
    qStateName?: string;
    [key: string]: any;
};
export type AppEntry = {
    qFileSize?: number;
    /** If true the app has section access configured. */
    qHasSectionAccess?: boolean;
    /** Identifier of the app. */
    qID?: string;
    /** Last reload time of the app. */
    qLastReloadTime?: string;
    /** Meta data. */
    qMeta?: NxMeta;
    /** Path of the app. */
    qPath?: string;
    /** Is set to true if the app is read-only. */
    qReadOnly?: boolean;
    /** App thumbnail. */
    qThumbnail?: StaticContentUrl;
    /** Title of the app. */
    qTitle?: string;
    [key: string]: any;
};
export type AppObjectList = {
    /** Information about the list of dimensions. */
    qItems?: Array<NxContainerEntry>;
    [key: string]: any;
};
export type AppObjectListDef = {
    /** Data that you want to include in the app list definition.
  You need to enter the paths to the information you want to retrieve. */
    qData?: JsonObject;
    /** Type of the app list. */
    qType?: string;
    [key: string]: any;
};
export type AppScript = {
    /** True if user is temporarily locked from modifying the script. Meta contains the ID of the last modifier. Only applicable to QCS. */
    qIsLocked?: boolean;
    /** Information about publishing and permissions.
  This parameter is optional. */
    qMeta?: NxMeta;
    /** Script text. */
    qScript?: string;
    [key: string]: any;
};
export type AppScriptMeta = {
    /** True if user is temporarily locked from modifying the script. Meta contains the ID of the last modifier. Only applicable to QCS. */
    qIsLocked?: boolean;
    /** Information about publishing and permissions.
  This parameter is optional. */
    qMeta?: NxMeta;
    [key: string]: any;
};
export type ArrayOfNxValuePoint = Array<NxPivotValuePoint>;
export type AssociationScore = {
    /** Association information about the field FieldName1 defined in qFieldPairName . */
    qField1Scores?: FieldScores;
    /** Association information about the field FieldName2 defined in qFieldPairName . */
    qField2Scores?: FieldScores;
    /** Pair of fields.
  < FieldName1> / < FieldName2>
  Where:
  < FieldName1 > is a field in the table 1 (defined in qTable1 )
  < FieldName2 > is a field in the table 2 (defined in qTable2 )
  If the field is a synthetic key, the name of the field is preceded by [Synthetic key]: . */
    qFieldPairName?: string;
    /** Flag used to interpret calculated scores.
  One of the following values or sum of values that apply:
  
  • 0: The cardinal ratio cannot be zero but the symbol score and the row score can be zero.
  
  • -1: The fields do not have the same type.
  
  • -2: The number of rows of the field FieldName1 is zero.
  
  • -4: The number of distinct values of the field FieldName1 is zero.
  
  • -8: The number of rows of the field FieldName2 is zero.
  
  • -16: The number of distinct values of the field FieldName2 is zero.
  
  Example:
  The number of rows of the field FieldName1 is zero, and the number of distinct values of the field FieldName2 is zero, then qScoreSummary is -18. */
    qScoreSummary?: number;
    [key: string]: any;
};
export type BNFDef = {
    /** If set to true, the definition is related to an aggregation function.
  This parameter is optional. The default value is false. */
    qAggrFunc?: boolean;
    /** Array of token references that all together build up the definition of the current token.
  Generally, if the array is not empty, the definition is a BNF rule (qIsBnfRule is set to true). However, some BNF  rules do have an empty array (qIsBnfRule is set to true, but qBnf is empty). */
    qBnf?: Array<number>;
    /** If set to true, the definition specifies a literal token.
  This parameter is optional. The default value is false. */
    qBnfLiteral?: boolean;
    /** If set to true, the definition specifies a control statement.
  This parameter is optional. The default value is false. */
    qControlStatement?: boolean;
    /** Indicates whether a script statement, a chart or a script function is deprecated (not recommended for use).
  If set to true, the script statement or the function is not recommended for use in Qlik Sense.
  This parameter is optional. The default value is false. */
    qDepr?: boolean;
    /** Group of the function.
  
  One of:
  
  • ALL or FUNC_GROUP_ALL
  
  • U or FUNC_GROUP_UNKNOWN
  
  • NONE or FUNC_GROUP_NONE
  
  • AGGR or FUNC_GROUP_AGGR
  
  • NUM or FUNC_GROUP_NUMERIC
  
  • RNG or FUNC_GROUP_RANGE
  
  • EXP or FUNC_GROUP_EXPONENTIAL_AND_LOGARITHMIC
  
  • TRIG or FUNC_GROUP_TRIGONOMETRIC_AND_HYPERBOLIC
  
  • FIN or FUNC_GROUP_FINANCIAL
  
  • MATH or FUNC_GROUP_MATH_CONSTANT_AND_PARAM_FREE
  
  • COUNT or FUNC_GROUP_COUNTER
  
  • STR or FUNC_GROUP_STRING
  
  • MAPP or FUNC_GROUP_MAPPING
  
  • RCRD or FUNC_GROUP_INTER_RECORD
  
  • CND or FUNC_GROUP_CONDITIONAL
  
  • LOG or FUNC_GROUP_LOGICAL
  
  • NULL or FUNC_GROUP_NULL
  
  • SYS or FUNC_GROUP_SYSTEM
  
  • FILE or FUNC_GROUP_FILE
  
  • TBL or FUNC_GROUP_TABLE
  
  • DATE or FUNC_GROUP_DATE_AND_TIME
  
  • NUMI or FUNC_GROUP_NUMBER_INTERPRET
  
  • FRMT or FUNC_GROUP_FORMATTING
  
  • CLR or FUNC_GROUP_COLOR
  
  • RNK or FUNC_GROUP_RANKING
  
  • GEO or FUNC_GROUP_GEO
  
  • EXT or FUNC_GROUP_EXTERNAL
  
  • PROB or FUNC_GROUP_PROBABILITY
  
  • ARRAY or FUNC_GROUP_ARRAY
  
  • LEG or FUNC_GROUP_LEGACY
  
  • DB or FUNC_GROUP_DB_NATIVE */
    qFG?: 'FUNC_GROUP_ALL' | 'FUNC_GROUP_UNKNOWN' | 'FUNC_GROUP_NONE' | 'FUNC_GROUP_AGGR' | 'FUNC_GROUP_NUMERIC' | 'FUNC_GROUP_RANGE' | 'FUNC_GROUP_EXPONENTIAL_AND_LOGARITHMIC' | 'FUNC_GROUP_TRIGONOMETRIC_AND_HYPERBOLIC' | 'FUNC_GROUP_FINANCIAL' | 'FUNC_GROUP_MATH_CONSTANT_AND_PARAM_FREE' | 'FUNC_GROUP_COUNTER' | 'FUNC_GROUP_STRING' | 'FUNC_GROUP_MAPPING' | 'FUNC_GROUP_INTER_RECORD' | 'FUNC_GROUP_CONDITIONAL' | 'FUNC_GROUP_LOGICAL' | 'FUNC_GROUP_NULL' | 'FUNC_GROUP_SYSTEM' | 'FUNC_GROUP_FILE' | 'FUNC_GROUP_TABLE' | 'FUNC_GROUP_DATE_AND_TIME' | 'FUNC_GROUP_NUMBER_INTERPRET' | 'FUNC_GROUP_FORMATTING' | 'FUNC_GROUP_COLOR' | 'FUNC_GROUP_RANKING' | 'FUNC_GROUP_GEO' | 'FUNC_GROUP_EXTERNAL' | 'FUNC_GROUP_PROBABILITY' | 'FUNC_GROUP_ARRAY' | 'FUNC_GROUP_LEGACY' | 'FUNC_GROUP_DB_NATIVE' | string;
    /** List of groups the function belongs to. */
    qFGList?: Array<string>;
    /** If set to true, the definition is related to a field.
  This parameter is optional. The default value is false. */
    qFieldFlag?: boolean;
    /** Reference identifier to a function described in the documentation. The identifier is stored in the definition of the token containing the function name.
  Is not used in Qlik Sense. */
    qHelpId?: number;
    /** If set to true, a list of related rule tokens is assigned to qBnf .
  This parameter is optional. The default value is false. */
    qIsBnfRule?: boolean;
    /** Type of the data.
  
  One of:
  
  • N or NOT_META
  
  • D or META_DOC_NAME
  
  • R or META_RET_TYPE
  
  • V or META_DEFAULT_VALUE */
    qMT?: 'NOT_META' | 'META_DOC_NAME' | 'META_RET_TYPE' | 'META_DEFAULT_VALUE' | string;
    /** Token name.
  One of:
  
  • A rule name
  
  • An identifier
  
  • A literal value */
    qName?: string;
    /** Number of the current token definition. */
    qNbr?: number;
    /** Number of the parent rule definition. */
    qPNbr?: number;
    /** If set to true, the definition is related to a Qlik Sense function. It cannot be an aggregation function.
  This parameter is optional. The default value is false. */
    qQvFunc?: boolean;
    /** If set to true, the definition specifies a script statement.
  This parameter is optional. The default value is false. */
    qScriptStatement?: boolean;
    /** Literal string of the token.
  Examples: 'Round' and '('. */
    qStr?: string;
    [key: string]: any;
};
export type BNFDefMetaType = {
    [key: string]: any;
};
export type BNFType = {
    [key: string]: any;
};
export type Blob = {
    [key: string]: any;
};
export type Bookmark = {
    qAlternateStateData?: Array<AlternateStateData>;
    qApplyAdditive?: boolean;
    /** @defaultValue true */
    qApplyInputFieldValues?: boolean;
    qApplyLayoutState?: boolean;
    qFieldItems?: Array<BookmarkFieldItem>;
    qForAnnotations?: boolean;
    qGroups?: Array<GroupBookmarkData>;
    qId?: string;
    qIncludeAllVariables?: boolean;
    qIncludeScrollPosition?: boolean;
    /** @defaultValue true */
    qIncludeSelectionState?: boolean;
    qInfoText?: string;
    qInputFieldItems?: Array<InputFieldItem>;
    qName?: string;
    qObjects?: Array<LayoutBookmarkData>;
    qObjectsLayout?: Array<ExtendedLayoutBookmarkData>;
    qOwner?: string;
    qRecallCount?: number;
    qSheetId?: string;
    qShow?: CondDef;
    qShowPopupInfo?: boolean;
    qUtcModifyTime?: number;
    qUtcRecallTime?: number;
    qVariableItems?: Array<BookmarkVariableItem>;
    [key: string]: any;
};
export type BookmarkApplyAndVerifyResult = {
    /** Apply successfully or not * */
    qApplySuccess?: boolean;
    /** Field values verfication result * */
    qWarnings?: Array<BookmarkFieldVerifyWarning>;
    [key: string]: any;
};
export type BookmarkFieldItem = {
    /** If set to true, selections within a list object are made in AND mode; If you have a list object that lists all customers, by selecting Customer 1 and Customer 2 while in and-mode, all records that are associated with Customer 1 and Customer 2 are selected.
  The default value is false; selections within a list object are made in OR mode. If you have a list object that lists all customers, by selecting Customer 1 and Customer 2 while in or-mode, all records that are associated with either Customer 1 or Customer 2 are selected.
  This parameter is not returned if set to false. */
    qAndMode?: boolean;
    /** Name and type of the field. */
    qDef?: FieldDefEx;
    /** List of excluded values.
  Either the list of selected values or the list of excluded values is displayed. */
    qExcludedValues?: Array<FieldValue>;
    /** Indicates if the field is locked.
  Default is false. */
    qLocked?: boolean;
    /** If set to true, the field has always one selection (not 0 and not more than 1). If another value is selected, the previous one is unselected.
  The default value is false. This parameter is not returned if set to false. */
    qOneAndOnlyOne?: boolean;
    /** Information on the selections criteria. */
    qSelectInfo?: SelectInfo;
    qValues?: Array<FieldValue>;
    [key: string]: any;
};
export type BookmarkFieldPage = {
    /** The end value of the range. */
    qEndIndex?: number;
    /** The start value of the range. */
    qStartIndex?: number;
    [key: string]: any;
};
export type BookmarkFieldVerifyResultState = {
    [key: string]: any;
};
export type BookmarkFieldVerifyWarning = {
    /** Field Name * */
    qField?: string;
    qMissingValues?: Array<string>;
    /** Alternate State * */
    qState?: string;
    /** Field/values verfication result *
  Defines result of ApplyAndVerify.
  One of:
  
  • NOT_VERIFIED
  
  • FIELD_VALUE_MATCH_ALL
  
  • FIELD_MISSING
  
  • FIELD_VALUE_MISSING
  
  • STATE_MISSING
  @defaultValue "NOT_VERIFIED" */
    qVerifyResult?: 'NOT_VERIFIED' | 'FIELD_VALUE_MATCH_ALL' | 'FIELD_MISSING' | 'FIELD_VALUE_MISSING' | 'STATE_MISSING' | string;
    [key: string]: any;
};
export type BookmarkList = {
    /** Information about the list of bookmarks. */
    qItems?: Array<NxContainerEntry>;
    /** Defines the list of bookmarks. */
    qBookmarkListDef?: BookmarkListQBookmarkListDef;
    /** Should be set to create an object that is linked to another object. Enter the identifier of the linking object (i.e the object you want to link to).
  If you do not want to link your object, set this parameter to an empty string. */
    qExtendsId?: string;
    qInfo?: NxInfo;
    /** Used to collect meta data.
  
  Properties
  Semantic type with an empty structure. */
    qMetaDef?: object;
    /** Name of the alternate state.
  Default is current selections _$_ . Default:$
  @defaultValue "$" */
    qStateName?: string;
    [key: string]: any;
};
export type BookmarkListDef = {
    /** Data */
    qData?: JsonObject;
    /** Include the bookmark patches. Patches can be very large and may make the list result unmanageable. */
    qIncludePatches?: boolean;
    /** Type of the list.
  @defaultValue "bookmark" */
    qType?: string;
    [key: string]: any;
};
export type BookmarkVariableItem = {
    /** The Reporting mode definition of the variable. */
    qDefinition?: string;
    /** Name of the variable. */
    qName?: string;
    /** Value of the variable. */
    qValue?: FieldValue;
    [key: string]: any;
};
export type CalendarStrings = {
    /** List of short day names. */
    qDayNames?: Array<string>;
    /** List of long day names. */
    qLongDayNames?: Array<string>;
    /** List of long month names. */
    qLongMonthNames?: Array<string>;
    /** List of short month names. */
    qMonthNames?: Array<string>;
    [key: string]: any;
};
export type CharEncodingType = {
    [key: string]: any;
};
export type CharRange = {
    /** Number of occurrences found. */
    qCharCount?: number;
    /** Position of the first search occurrence. */
    qCharPos?: number;
    [key: string]: any;
};
export type CheckExpressionReturn = {
    qBadFieldNames?: Array<NxRange>;
    qDangerousFieldNames?: Array<NxRange>;
    qErrorMsg?: string;
    [key: string]: any;
};
export type CheckNumberOrExpressionReturn = {
    qBadFieldNames?: Array<NxRange>;
    qErrorMsg?: string;
    [key: string]: any;
};
export type ChildList = {
    /** Information about the items in the app object. */
    qItems?: Array<NxContainerEntry>;
    [key: string]: any;
};
export type ChildListDef = {
    /** Data that you want to include in the child list definition.
  You need to enter the paths to the information you want to retrieve. */
    qData?: JsonObject;
    [key: string]: any;
};
export type CodePage = {
    /** Description of the code page. */
    qDescription?: string;
    /** Name of the code page. */
    qName?: string;
    /** Number of the code page. */
    qNumber?: number;
    [key: string]: any;
};
export type CondDef = {
    /** @defaultValue true */
    qAlways?: boolean;
    qExpression?: ValueExpr;
    [key: string]: any;
};
export type Connection = {
    /** One of:
  
  • ODBC CONNECT TO [<provider name>]
  
  • OLEDB CONNECT TO [<provider name>]
  
  • CUSTOM CONNECT TO [<provider name>]
  
  • "<local absolute or relative path, UNC path>"
  
  • "<URL>"
  
  Connection string.
  This parameter is mandatory and must be set when creating or modifying a connection. */
    qConnectionString?: string;
    /** Identifier of the connection.
  Is generated by the engine and is unique. */
    qId?: string;
    /** Select which user credentials to use to connect to the source.
  
  • LOG_ON_SERVICE_USER: Disables
  
  • LOG_ON_CURRENT_USER: Enables
  
  One of:
  
  • LOG_ON_SERVICE_USER
  
  • LOG_ON_CURRENT_USER */
    qLogOn?: 'LOG_ON_SERVICE_USER' | 'LOG_ON_CURRENT_USER' | string;
    /** Information about the connection. */
    qMeta?: NxMeta;
    /** Is generated by the engine.
  Creation date of the connection or last modification date of the connection. */
    qModifiedDate?: string;
    /** Name of the connection.
  This parameter is mandatory and must be set when creating or modifying a connection. */
    qName?: string;
    /** Password of the user who creates the connection.
  This parameter is optional; it is only used for OLEDB, ODBC and CUSTOM connections.
  A call to GetConnection Method does not return the password. */
    qPassword?: string;
    /** One of:
  
  • ODBC
  
  • OLEDB
  
  • <Name of the custom connection file>
  
  • folder
  
  • internet
  
  Type of the connection.
  This parameter is mandatory and must be set when creating or modifying a connection.
  For ODBC, OLEDB and custom connections, the engine checks that the connection type matches the connection string.
  The type is not case sensitive. */
    qType?: string;
    /** Name of the user who creates the connection.
  This parameter is optional; it is only used for OLEDB, ODBC and CUSTOM connections.
  A call to GetConnection Method does not return the user name. */
    qUserName?: string;
    [key: string]: any;
};
export type ContentLibraryList = {
    /** Information about the content library. */
    qItems?: Array<ContentLibraryListItem>;
    [key: string]: any;
};
export type ContentLibraryListItem = {
    /** Is set to true if the library is specific to the app (not a global content library). */
    qAppSpecific?: boolean;
    /** Information about publishing and permissions. */
    qMeta?: NxMeta;
    /** Name of the library. */
    qName?: string;
    [key: string]: any;
};
export type CreateTemporaryBookmarkReturn = {
    qId?: string;
    qReturn?: boolean;
    [key: string]: any;
};
export type CustomConnector = {
    /** Name of the custom connector as displayed in the Qlik interface. */
    qDisplayName?: string;
    /** Mode of the machine (64 or 32 bits).
  
  One of:
  
  • CONNECT_DEFAULT
  
  • CONNECT_64
  
  • CONNECT_32 */
    qMachineMode?: 'CONNECT_DEFAULT' | 'CONNECT_64' | 'CONNECT_32' | string;
    /** Name of the parent folder that contains the custom connector file. */
    qParent?: string;
    /** Name of the custom connector file. */
    qProvider?: string;
    qSupportFileStreaming?: boolean;
    [key: string]: any;
};
export type DataField = {
    /** Is set to true if the field is a primary key. */
    qIsKey?: boolean;
    /** Name of the field. */
    qName?: string;
    /** Is shown for fixed records.
  qOriginalFieldName and qName are identical if no field names are used in the file.
  qOriginalFieldName differs from qName if embedded file names are used in the file. */
    qOriginalFieldName?: string;
    [key: string]: any;
};
export type DataRecord = {
    /** List of values inside the table.
  The first values (in result/qPreview/0/qValues ) correspond to the field names in the table.
  The following values (from result/qPreview/1/qValues ) are the values of the fields in the table. */
    qValues?: Array<string>;
    [key: string]: any;
};
export type DataTable = {
    /** Name of the table. */
    qName?: string;
    /** Type of the table.
  For example: Table or View. */
    qType?: string;
    [key: string]: any;
};
export type DataTableEx = {
    /** List of the fields in the table. */
    qFields?: Array<DataField>;
    /** List of format specification items, within brackets.
  Examples of specification items:
  
  • file type
  
  • embedded labels, no labels
  
  • table is <table name> */
    qFormatSpec?: string;
    /** Name of the table. */
    qName?: string;
    [key: string]: any;
};
export type Database = {
    /** Is set to true if the database is set by default. */
    qIsDefault?: boolean;
    /** Name of the database. */
    qName?: string;
    [key: string]: any;
};
export type DatabaseInfo = {
    /** If set to true, it means that the database is displayed first, before the owners and tables. */
    qDBFirst?: boolean;
    /** Name of the product accessed by the provider. */
    qDBMSName?: string;
    /** Character string used after the database name.
  Example with separator " . ":
  FROM LinkedTablesData.dbo.Months
  Where:
  
  • LinkedTablesData is the database name
  
  • dbo is the owner name
  
  • Months is the table name */
    qDBSeparator?: string;
    /** If set to true, it means that the data source contains some databases. */
    qDBUsage?: boolean;
    /** Name of the default database. */
    qDefaultDatabase?: string;
    /** List of the script keywords. */
    qKeywords?: Array<string>;
    /** Character string used after the owner name.
  Example with separator " . ":
  FROM LinkedTablesData.dbo.Months
  Where:
  
  • LinkedTablesData is the database name
  
  • dbo is the owner name
  
  • Months is the table name */
    qOwnerSeparator?: string;
    /** If set to true, it means that the data source contains some owners. */
    qOwnerUsage?: boolean;
    /** Prefix used with field, database or owner names that contain special characters or keywords. */
    qQuotePreffix?: string;
    /** Suffix used with field, database or owner names that contain special characters or keywords. */
    qQuoteSuffix?: string;
    /** List of the special characters. */
    qSpecialChars?: string;
    [key: string]: any;
};
export type DatabaseOwner = {
    /** Name of the owner. */
    qName?: string;
    [key: string]: any;
};
export type DelimiterInfo = {
    /** Is set to true if multiple spaces are used to separate the values. */
    qIsMultiple?: boolean;
    /** Name of the delimiter.
  Example:
  "Tab_DELIMITER" */
    qName?: string;
    /** Delimiter character number used by the engine to determine how to separate the values. */
    qNumber?: number;
    /** Representation of the delimiter value that is used in the script.
  Example:
  "'\t'" */
    qScriptCode?: string;
    [key: string]: any;
};
export type DerivedFieldsInTableData = {
    /** Is set to true is the derived field is in use. */
    qActive?: boolean;
    /** Name of the derived definition. */
    qDefinitionName?: string;
    /** List of tags. */
    qTags?: Array<string>;
    [key: string]: any;
};
export type DimensionList = {
    /** Information about the list of dimensions. */
    qItems?: Array<NxContainerEntry>;
    /** Defines the lists of dimensions. */
    qDimensionListDef?: DimensionListQDimensionListDef;
    /** Should be set to create an object that is linked to another object. Enter the identifier of the linking object (i.e the object you want to link to).
  If you do not want to link your object, set this parameter to an empty string. */
    qExtendsId?: string;
    qInfo?: NxInfo;
    /** Used to collect meta data.
  
  Properties
  Semantic type with an empty structure. */
    qMetaDef?: object;
    /** Name of the alternate state.
  Default is current selections _$_ . Default:$
  @defaultValue "$" */
    qStateName?: string;
    [key: string]: any;
};
export type DimensionListDef = {
    /** Data */
    qData?: JsonObject;
    /** Type of the list. */
    qType?: string;
    [key: string]: any;
};
export type DoReloadExParams = {
    /** Set to true to debug reload.
  The default value is false. */
    qDebug?: boolean;
    /** 0: for default mode.
  1: for ABEND; the reload of the script ends if an error occurs.
  2: for ignore; the reload of the script continues even if an error is detected in the script. */
    qMode?: number;
    /** Set to true for partial reload.
  The default value is false. */
    qPartial?: boolean;
    /** Optional reload ID.
  ID will be automatically generated if not set. */
    qReloadId?: string;
    [key: string]: any;
};
export type DoReloadExResult = {
    /** true if memory limits were exhausted during reload. */
    qEndedWithMemoryConstraint?: boolean;
    /** Path to the script log file. */
    qScriptLogFile?: string;
    /** The reload is successful if True. */
    qSuccess?: boolean;
    [key: string]: any;
};
/**
  @param qGenericId - Object ID.
  @param qGenericType - The type of the object.
  @param qHandle - The handle used to connect to object.
  @param qType - The native type of the object.
  @param auth - Auth object used to make requests
 */
export declare class Doc {
    attributes?: any;
    global: Global;
    session: RpcSession;
    auth: Auth;
    qGenericId?: string;
    qGenericType?: string;
    qHandle?: number;
    qType?: string;
    [key: string]: any;
    constructor({ qGenericId, qGenericType, qHandle, qType, ...rest }: {
        qGenericId?: string;
        qGenericType?: string;
        qHandle?: number;
        qType?: string;
    }, session?: RpcSession, auth?: Auth);
    /**    Returns a handle to a field.
  
      @param qFieldName - Name of the field.
      @param qStateName - Name of the alternate state.
  Default state is current selections.
    */
    getField(qFieldName: string, qStateName?: string): Promise<Field>;
    /**    Returns the description of a field.
  
      @param qFieldName - Name of the field.
    */
    getFieldDescription(qFieldName: string): Promise<FieldDescription>;
    /**    Returns a handle to a variable.
      @deprecated
      @param qName - Name of the variable.
    */
    getVariable(qName: string): Promise<GenericVariable>;
    /**    Returns a list of table states.
  
  The following states apply:
  
  • 0 The table is not loosely coupled.
  
  • 1 The table is loosely coupled.
  
  • 2 The table is loosely coupled and cannot be changed to another state using the Qlik Engine API.
  
  The last three values in the vector are for internal use.
  In case of circular references, the engine automatically sets the table state to loosely coupled to avoid creating loops.
  
    */
    getLooselyCoupledVector(): Promise<Array<number>>;
    /**    Sets a list of table states, one for each table.
  
  The following states apply:
  
  • 0 The table is not loosely coupled.
  
  • 1 The table is loosely coupled.
  
  • 2 The table is loosely coupled and cannot be changed to another state using the Qlik Engine API.
  
  The last three values in the vector are for internal use.
  
      @param qv - The list of table states to set. A state will not be changed if already set to 2.
    */
    setLooselyCoupledVector(qv: Array<number>): Promise<boolean>;
    /**    Evaluates an expression and returns the result as a string.
  
   Example:
  The client sends:
  ```
  {
      "handle": 1,
      "method": "Evaluate",
      "params": {
          "qExpression": "Sum(Holes)"
      },
      "id": 6,
      "jsonrpc": "2.0"
  }
  ```
  The engine returns:
  ```
  {
      "jsonrpc": "2.0",
      "id": 6,
      "result": {
          "qReturn": "361716"
      }
  }
  ```
  
      @param qExpression - Expression to evaluate.
    */
    evaluate(qExpression: string): Promise<string>;
    /**    Evaluates an expression and returns the result as a dual.
  
   Example:
  The client sends:
  ```
  {
      "handle": 1,
      "method": "EvaluateEx",
      "params": {
          "qExpression": "Sum(Holes)"
      },
      "id": 7,
      "jsonrpc": "2.0"
  }
  ```
  The engine returns:
  ```
  {
      "jsonrpc": "2.0",
      "id": 7,
      "result": {
          "qReturn": "361716"
      }
  }
  ```
  
      @param qExpression - Expression to evaluate.
    */
    evaluateEx(qExpression: string): Promise<FieldValue>;
    /**    Clear selections in fields for current state. Locked fields are not cleared by default.
  
      @param qLockedAlso - When true, clears the selection for locked fields.
      @param qStateName - Alternate state name. When set, applies to alternate state instead of current
    */
    clearAll(qLockedAlso?: boolean, qStateName?: string): Promise<object>;
    /**    Locks all selections in fields for current state.
  
      @param qStateName - Alternate state name. When set, applies to alternate state instead of current.
    */
    lockAll(qStateName?: string): Promise<object>;
    /**    Unlocks all selections in fields for current state.
  
      @param qStateName - Alternate state name. When set, applies to alternate state instead of current.
    */
    unlockAll(qStateName?: string): Promise<object>;
    /**    Loads the last logical operation (if any).
  
    */
    back(): Promise<object>;
    /**    Loads the next logical operation (if any).
  
    */
    forward(): Promise<object>;
    /**    Creates a variable.
      @deprecated
      @param qName - Name of the variable. Variable names are case sensitive.
    */
    createVariable(qName: string): Promise<boolean>;
    /**    Removes a variable.
      @deprecated
      @param qName - Name of the variable. Variable names are case sensitive.
    */
    removeVariable(qName: string): Promise<boolean>;
    /**    Returns locale information.
  
    */
    getLocaleInfo(): Promise<LocaleInfo>;
    /**    Returns:
  
  • The list of tables in an app and the fields inside each table.
  
  • The list of derived fields.
  
  • The list of key fields.
  
      @param qWindowSize - Size of the window that is used to display the results.
      @param qNullSize -
      @param qCellHeight - Height of a cell in a table in pixels.
      @param qSyntheticMode - One of:
  
  • true for internal table viewer:
  Shows a more detailed view on how the Qlik engine defines the relations between fields and the quality of the keys.
  
  • false for source table viewer:
  Shows the natural relation between fields without reference to synthetic keys and resultant linking synthetic tables. Instead synthetic keys are represented by multiple connectors between tables.
      @param qIncludeSysVars - If set to true, the system variables are included.
      @param qIncludeProfiling - If set to true, profiling information is included.
    */
    getTablesAndKeys(qWindowSize: Size, qNullSize: Size, qCellHeight: number, qSyntheticMode: boolean, qIncludeSysVars: boolean, qIncludeProfiling?: boolean): Promise<GetTablesAndKeysReturn>;
    /**    Returns information about the position of the tables in the data model viewer.
  The position of the broom points and the position of the connection points cannot be retrieved in Qlik Sense.
  
   Representation of tables, broom points and connection points:
  
  The green circles represent the broom points.
  The red circle represents a connection point.
  
    */
    getViewDlgSaveInfo(): Promise<TableViewDlgSaveInfo>;
    /**    Sets the positions of the tables in the data model viewer.
  The position of the broom points and the position of the connection points cannot be set in Qlik Sense.
  
   Representation of tables, broom points and connection points:
  
  The green circles represent the broom points.
  The red circle represents a connection point.
  
      @param qInfo - Information about the table.
    */
    setViewDlgSaveInfo({ qCtlInfo: { qInternalView: { qZoomFactor, ...restQCtlInfoQInternalView }, qSourceView: { qZoomFactor: qZoomFactor2, ...restQCtlInfoQSourceView }, ...restQCtlInfo }, ...rest }?: TableViewDlgSaveInfo): Promise<object>;
    /**    Creates a script that contains one section. This section contains SET statements that give localized information from the regional settings of the computer.
  The computer regional settings are retrieved when the engine starts.
  
      @param qLocalizedMainSection - Name of the script section.
  The default value is Main .
    */
    getEmptyScript(qLocalizedMainSection?: string): Promise<string>;
    /**    Reloads the script that is set in an app.
  
   Logs:
  When this method is called, audit activity logs are produced to track the user activity.
  In the case of errors, both audit activity logs and system services logs are produced.
  The log files are named as follows:
  | Audit activity log                                                                                                                        | System service log                                                                                                            |
  |-------------------------------------------------------------------------------------------------------------------------------------------|-------------------------------------------------------------------------------------------------------------------------------|
  | _\_AuditActivity\_Engine.txt_ in Qlik Sense Enterprise  _\_AuditActivity\_Engine.log_ in Qlik Sense Desktop | _\_Service\_Engine.txt_ in Qlik Sense Enterprise  _\_Service\_Engine.log_ in Qlik Sense Desktop |
  
   Where to find the log files:
  The location of the log files depends on whether you have installed Qlik Sense Enterprise or Qlik Sense Desktop.
  | Qlik Sense Enterprise                 | Qlik Sense Desktop                       |
  |---------------------------------------|------------------------------------------|
  | _%ProgramData%/Qlik/Sense/Log/Engine_ | _%UserProfile%/Documents/Qlik/Sense/Log_ |
  
      @param qMode - Error handling mode
  One of:
  
  • 0: for default mode.
  
  • 1: for ABEND; the reload of the script ends if an error occurs.
  
  • 2: for ignore; the reload of the script continues even if an error is detected in the script.
      @param qPartial - Set to true for partial reload.
  The default value is false.
      @param qDebug - Set to true if debug breakpoints are to be honored. The execution of the script will be in debug mode.
  The default value is false.
    */
    doReload(qMode?: number, qPartial?: boolean, qDebug?: boolean): Promise<boolean>;
    /**    Lists the breakpoints in the script of an app.
  
    */
    getScriptBreakpoints(): Promise<Array<EditorBreakpoint>>;
    /**    Set some breakpoints in the script of an app.
  
      @param qBreakpoints - Information about the breakpoints.
    */
    setScriptBreakpoints(qBreakpoints: Array<EditorBreakpoint>): Promise<object>;
    /**    Gets values in script.
  
    */
    getScript(): Promise<string>;
    /**    Fetches updated variables after a statement execution.
  
  If qRefSeqNo and qSetSeqNo are set to 0, it means that the variables were not updated.
  
    */
    getTextMacros(): Promise<Array<TextMacro>>;
    /**    Limits the number of rows of data to load from a data source.
  This method works when reloading in debug mode.
  
      @param qLimit - Fetch limit.
  Number of rows to load.
    */
    setFetchLimit(qLimit: number): Promise<object>;
    /**    Saves an app. All objects and data in the data model are saved.
  
      @param qFileName - Name of the file to save.
    */
    doSave(qFileName?: string): Promise<object>;
    /**    Retrieves the data of a specific table.
  
      @param qOffset - Position from the top, starting from 0.
  If the offset is set to 0, the rows starting from the position/index 0 are shown.
      @param qRows - Number of rows to show.
      @param qSyntheticMode - If this parameter is set to true, the internal data/table representation is shown. Synthetic fields are present (if any).
      @param qTableName - Name of the table.
    */
    getTableData(qOffset: number, qRows: number, qSyntheticMode: boolean, qTableName: string): Promise<Array<TableRow>>;
    /**    Evaluates an app.
  Returns dynamic properties (if any) in addition to the engine (fixed) properties.
  A data set is returned.
  
    */
    getAppLayout(): Promise<NxAppLayout>;
    /**    Sets properties to an app.
  The qLastReloadTime, qMigrationHash and qSavedInProductVersion properties does not need to be set but if they are, they should match the current values in the app layout.
  
      @param qProp - Information about the properties of an app.
    */
    setAppProperties({ chartAnimations, qStateName, theme, ...rest }?: NxAppProperties): Promise<object>;
    /**    Gets the properties of an app.
  
    */
    getAppProperties(): Promise<NxAppProperties>;
    /**    Gets the lineage information of the app. The lineage information includes the LOAD and STORE statements from the data load script associated with this app.
  An array of lineage information.
  
    */
    getLineage(): Promise<Array<LineageInfo>>;
    /**    Creates a transient object. For example, you can use a transient object to create an app overview or a story overview.
  It is possible to create a transient object that is linked to another object.
  A linked object is an object that points to a linking object. The linking object is defined in the properties of the linked object (in qExtendsId ).
  The linked object has the same properties as the linking object.
  The linking object cannot be a transient object.
  
      @param qProp - Information about the object.
    */
    createSessionObject({ qBookmarkListDef: { qType, ...restQBookmarkListDef }, qHyperCubeDef: { qMaxStackedCells, qMode, qNoOfLeftDims, qPseudoDimPos, ...restQHyperCubeDef }, qListObjectDef: { qFrequencyMode, ...restQListObjectDef }, qNxLibraryDimensionDef: { coloring: { baseColor: { index, ...restQNxLibraryDimensionDefColoringBaseColor }, ...restQNxLibraryDimensionDefColoring }, ...restQNxLibraryDimensionDef }, qNxLibraryMeasureDef: { qNumFormat: { qType: qType2, qnDec, ...restQNxLibraryMeasureDefQNumFormat }, coloring: { baseColor: { index: index2, ...restQNxLibraryMeasureDefColoringBaseColor }, gradient: { limitType, ...restQNxLibraryMeasureDefColoringGradient }, ...restQNxLibraryMeasureDefColoring }, ...restQNxLibraryMeasureDef }, qVariableListDef: { qData: { tags, ...restQVariableListDefQData }, qShowConfig, qShowReserved, qType: qType3, ...restQVariableListDef }, ...rest }?: GenericObjectProperties): Promise<GenericObject>;
    /**    Removes a transient object.
  
  The operation is successful if qSuccess is set to true.
  
      @param qId - Identifier of the transient object to remove.
    */
    destroySessionObject(qId: string): Promise<boolean>;
    /**    Creates a generic object at app level. For more information on generic objects, see Generic object.
  It is possible to create a generic object that is linked to another object.
  A linked object is an object that points to a linking object. The linking object is defined in the properties of the linked object (in qExtendsId ).
  The linked object has the same properties as the linking object.
  The linking object cannot be a transient object.
  
      @param qProp - Information about the object.
    */
    createObject({ qBookmarkListDef: { qType, ...restQBookmarkListDef }, qHyperCubeDef: { qMaxStackedCells, qMode, qNoOfLeftDims, qPseudoDimPos, ...restQHyperCubeDef }, qListObjectDef: { qFrequencyMode, ...restQListObjectDef }, qNxLibraryDimensionDef: { coloring: { baseColor: { index, ...restQNxLibraryDimensionDefColoringBaseColor }, ...restQNxLibraryDimensionDefColoring }, ...restQNxLibraryDimensionDef }, qNxLibraryMeasureDef: { qNumFormat: { qType: qType2, qnDec, ...restQNxLibraryMeasureDefQNumFormat }, coloring: { baseColor: { index: index2, ...restQNxLibraryMeasureDefColoringBaseColor }, gradient: { limitType, ...restQNxLibraryMeasureDefColoringGradient }, ...restQNxLibraryMeasureDefColoring }, ...restQNxLibraryMeasureDef }, qVariableListDef: { qData: { tags, ...restQVariableListDefQData }, qShowConfig, qShowReserved, qType: qType3, ...restQVariableListDef }, ...rest }?: GenericObjectProperties): Promise<GenericObject>;
    /**    Removes an app object.
  The children of the object (if any) are removed as well.
  
  The operation is successful if qSuccess is set to true.
  
      @param qId - Identifier of the object to remove.
    */
    destroyObject(qId: string): Promise<boolean>;
    /**    Returns the type of the app object and the corresponding handle.
  
      @param qId - Identifier of the object to retrieve.
    */
    getObject(qId: string): Promise<GenericObject>;
    /**    Returns all objects compatible with options.
  
      @param qOptions - Object type filter and requested properties.
    */
    getObjects(qOptions: NxGetObjectOptions): Promise<Array<NxContainerEntry>>;
    /**    Returns all bookmarks compatible with options.
  
      @param qOptions - Bookmark type filter and requested properties.
    */
    getBookmarks({ qData: { creationDate, description, selectionFields, sheetId, title, ...restQData }, qTypes, ...rest }?: NxGetBookmarkOptions): Promise<Array<NxContainerEntry>>;
    /**    Clones root level objects, such as sheets and stories. The CloneObject method works for both app objects and child objects.
  When you clone an object that contains children, the children are cloned as well.
  If you for example want to clone a visualization, you must provide the qID of the root object, in this case the sheet since CloneObject clones root level objects.
  It is not possible to clone a session object.
  
  The identifier is set by the engine.
  
      @param qId - Identifier of the object to clone. The identifier must be a root object.
    */
    cloneObject(qId: string): Promise<string>;
    /**    Creates a draft of an object.
  This method can be used to create a draft of a sheet or a story that is published. This is a way to continue working on a sheet or a story that is published.
  Replace the published object by the content of the draft by invoking the CommitDraft method.
  
  The identifier is set by the engine.
      @deprecated
      @param qId - Identifier of the object to create a draft from.
    */
    createDraft(qId: string): Promise<string>;
    /**    Commits the draft of an object that was previously created by invoking the CreateDraft method.
  Committing a draft replaces the corresponding published object.
      @deprecated
      @param qId - Identifier of the draft to commit.
    */
    commitDraft(qId: string): Promise<object>;
    /**    Removes the draft of an object.
  The children of the draft object (if any) are removed as well.
  This method can be used to cancel the work on the draft of an object. For example, if you had created a draft of a sheet that is published, you might not want anymore to replace the published sheet.
  
  The operation is successful if qSuccess is set to true.
      @deprecated
      @param qId - Identifier of the draft object to remove.
      @param qSourceId - Identifier of the source object (the object from which a draft was created).
    */
    destroyDraft(qId: string, qSourceId: string): Promise<boolean>;
    /**    Undoes the previous operation.
  
  The operation is successful if qSuccess is set to true.
  
    */
    undo(): Promise<boolean>;
    /**    Redoes the previous operation.
  
  The operation is successful if qSuccess is set to true.
  
    */
    redo(): Promise<boolean>;
    /**    Clears entirely the undo and redo buffer.
  
    */
    clearUndoBuffer(): Promise<object>;
    /**    Creates a master dimension.
  A master dimension is stored in the library of an app and can be used in many objects. Several generic objects can contain the same dimension.
  
      @param qProp - Information about the properties.
    */
    createDimension({ qDim: { coloring: { baseColor: { index, ...restQDimColoringBaseColor }, ...restQDimColoring }, ...restQDim }, ...rest }?: GenericDimensionProperties): Promise<GenericDimension>;
    /**    Removes a dimension.
  
  The operation is successful if qSuccess is set to true.
  
      @param qId - Identifier of the dimension to remove.
    */
    destroyDimension(qId: string): Promise<boolean>;
    /**    Returns the handle of a dimension.
  
      @param qId - Identifier of the dimension.
    */
    getDimension(qId: string): Promise<GenericDimension>;
    /**    Clones a dimension.
  
  The identifier is set by the engine.
  
      @param qId - Identifier of the object to clone.
    */
    cloneDimension(qId: string): Promise<string>;
    /**    Creates a master measure.
  A master measure is stored in the library of an app and can be used in many objects. Several generic objects can contain the same measure.
  
      @param qProp - Information about the properties.
    */
    createMeasure({ qMeasure: { qNumFormat: { qType, qnDec, ...restQMeasureQNumFormat }, coloring: { baseColor: { index, ...restQMeasureColoringBaseColor }, gradient: { limitType, ...restQMeasureColoringGradient }, ...restQMeasureColoring }, ...restQMeasure }, ...rest }?: GenericMeasureProperties): Promise<GenericMeasure>;
    /**    Removes a generic measure.
  
  The operation is successful if qSuccess is set to true.
  
      @param qId - Identifier of the measure to remove.
    */
    destroyMeasure(qId: string): Promise<boolean>;
    /**    Returns the handle of a measure.
  
      @param qId - Identifier of the measure.
    */
    getMeasure(qId: string): Promise<GenericMeasure>;
    /**    Clones a measure.
  
  The identifier is set by the engine.
  
      @param qId - Identifier of the object to clone.
    */
    cloneMeasure(qId: string): Promise<string>;
    /**    Creates a transient variable.
  To set some properties to the variable, use the SetProperties method.
  
   Definition:
  A variable in Qlik Sense is a named entity, containing a data value. This value can be static or be the result of a calculation. A variable acquires its value at the same time that the variable is created or after when updating the properties of the variable. Variables can be used in bookmarks and can contain numeric or alphanumeric data. Any change made to the variable is applied everywhere the variable is used.
  When a variable is used in an expression, it is substituted by its value or the variable's definition.
  
   Example:
  The variable x contains the text string Sum(Sales) .
  In a chart, you define the expression $(x)/12 . The effect is exactly the same as having the chart expression Sum(Sales)/12 .
  However, if you change the value of the variable x to Sum(Budget) , the data in the chart are immediately recalculated with the expression interpreted as Sum(Budget)/12 .
  
      @param qProp - Name of the variable. Variable names are case sensitive.
    */
    createSessionVariable({ qNumberPresentation: { qType, qnDec, ...restQNumberPresentation }, ...rest }?: GenericVariableProperties): Promise<GenericVariable>;
    /**    Removes a transient variable.
  
  The operation is successful if qSuccess is set to true.
  
      @param qId - Identifier of the variable.
    */
    destroySessionVariable(qId: string): Promise<boolean>;
    /**    Creates a variable.
  To create a variable via a script, you need to use the SetScript method. For more information, see Create a variable.
  To set some properties to the variable, use the SetProperties method.  In a published app, only transient variables can be created. See CreateSessionVariable method.
  
   Definition:
  A variable in Qlik Sense is a named entity, containing a data value. This value can be static or be the result of a calculation. A variable acquires its value at the same time that the variable is created or after when updating the properties of the variable. Variables can be used in bookmarks and can contain numeric or alphanumeric data. Any change made to the variable is applied everywhere the variable is used.
  When a variable is used in an expression, it is substituted by its value or the variable's definition.
  
   Example:
  The variable x contains the text string Sum(Sales) .
  In a chart, you define the expression $(x)/12 . The effect is exactly the same as having the chart expression Sum(Sales)/12 .
  However, if you change the value of the variable x to Sum(Budget) , the data in the chart are immediately recalculated with the expression interpreted as Sum(Budget)/12 .
  
      @param qProp - Name of the variable. Variable names are case sensitive and must be unique.
    */
    createVariableEx({ qNumberPresentation: { qType, qnDec, ...restQNumberPresentation }, ...rest }?: GenericVariableProperties): Promise<GenericVariable>;
    /**    Removes a variable.
  Script-defined variables cannot be removed using the DestroyVariableById method or the DestroyVariableByName method. For more information, see Remove a variable.
  
  The operation is successful if qSuccess is set to true.
  
      @param qId - Identifier of the variable.
    */
    destroyVariableById(qId: string): Promise<boolean>;
    /**    Removes a variable.
  Script-defined variables cannot be removed using the DestroyVariableById method or the DestroyVariableByName method. For more information, see Remove a variable.
  
  The operation is successful if qSuccess is set to true.
  
      @param qName - Name of the variable.
    */
    destroyVariableByName(qName: string): Promise<boolean>;
    /**    Gets the handle of a variable.
  
      @param qId - Identifier of the variable.
    */
    getVariableById(qId: string): Promise<GenericVariable>;
    /**    Gets the handle of a variable.
  
      @param qName - Name of the variable.
    */
    getVariableByName(qName: string): Promise<GenericVariable>;
    /**    Checks if a given expression is valid.
  The expression is correct if the parameters qErrorMsg , qBadFieldNames and qDangerousFieldNames are empty.
  
      @param qExpr - Expression to check.
      @param qLabels - List of labels.
    */
    checkExpression(qExpr: string, qLabels?: Array<string>): Promise<CheckExpressionReturn>;
    /**    Checks if:
  
  • A given expression is valid.
  
  • A number is correct according to the locale.
  
      @param qExpr - Expression to check.
    */
    checkNumberOrExpression(qExpr: string): Promise<CheckNumberOrExpressionReturn>;
    /**    Adds an alternate state in the app.
  You can create multiple states within a Qlik Sense app and apply these states to specific objects within the app. Objects in a given state are not affected by user selections in the other states.
  
      @param qStateName - Name of the alternate state.
    */
    addAlternateState(qStateName: string): Promise<object>;
    /**    Removes an alternate state in the app.
  
      @param qStateName - Name of the alternate state.
    */
    removeAlternateState(qStateName: string): Promise<object>;
    /**    Adds an session alternate state in the app.
  You can create multiple states within a Qlik Sense app and apply these states to specific objects within the app. Objects in a given state are not affected by user selections in the other states.
  A session alternate state is not persisted and is not included in the StateNames array in the AppLayout.
  You can use the optional second parameter to choose any other state to get the initial selection on the new state from
  
      @param qStateName - Name of the alternate state.
      @param qSourceStateName - Name of existing state to copy the initial selections from
    */
    addSessionAlternateState(qStateName: string, qSourceStateName?: string): Promise<object>;
    /**    Removes an session alternate state in the app.
  The operation is successful if qSuccess is set to true.
  
      @param qStateName - Name of the alternate state.
    */
    removeSessionAlternateState(qStateName: string): Promise<boolean>;
    /**    Creates a bookmark.
  
      @param qProp - Properties for the object.
    */
    createBookmark({ creationDate, ...rest }?: GenericBookmarkProperties): Promise<GenericBookmark>;
    /**    Removes a bookmark.
  The operation is successful if qSuccess is set to true.
  
      @param qId - Identifier of the bookmark.
    */
    destroyBookmark(qId: string): Promise<boolean>;
    /**    Returns the handle of a bookmark.
  
      @param qId - Identifier of the bookmark.
    */
    getBookmark(qId: string): Promise<GenericBookmark>;
    /**    Applies a bookmark.
  The operation is successful if qSuccess is set to true.
  
      @param qId - Identifier of the bookmark.
    */
    applyBookmark(qId: string): Promise<boolean>;
    /**    Applies a bookmark and verifies result dataset against originally selected values.
  The operation is successful if qApplySuccess is set to true. qWarnings lists state and field with unmatching values
      @experimental
      @param qId - Identifier of the bookmark.
    */
    applyAndVerifyBookmark(qId: string): Promise<BookmarkApplyAndVerifyResult>;
    /**    Clones a bookmark.
  The identifier is set by the engine.
  
      @param qId - Identifier of the object to clone.
    */
    cloneBookmark(qId: string): Promise<string>;
    /**    Adds a field on the fly.
  The expression of a field on the fly is persisted but not its values.
  The operation is successful if qSuccess is set to true.
  
      @param qName - Name of the field.
      @param qExpr - Expression value.
  It is not possible to use all aggregation functions. For example, you cannot add a field on the fly with an expression that uses the Sum or Count aggregation functions.
    */
    addFieldFromExpression(qName: string, qExpr: string): Promise<boolean>;
    /**    Find the field-on-the-fly by passing its readable name.
  
      @param qReadableName - Readable name of the field-on-the-fly.
    */
    getFieldOnTheFlyByName(qReadableName: string): Promise<string>;
    /**    Returns the identifier and the type of any generic object in the app.
  
    */
    getAllInfos(): Promise<Array<NxInfo>>;
    /**    Resumes the app as the user left it.
  
    */
    resume(): Promise<object>;
    /**    Aborts any selection mode in an app. For more information about selection mode, see BeginSelections method.
  
      @param qAccept - Set this parameter to true to accept the selections before exiting the selection mode.
    */
    abortModal(qAccept: boolean): Promise<object>;
    /**    Retrieves any fields that match all of the specified tags or just one of them in the data model of an app.
  Tags set by Qlik Sense are prefixed by the $ sign.
  
      @param qTags - List of tags.
  The GetMatchingFields method looks for fields that match one or all of the tags in this list, depending on the value of qMatchingFieldMode .
      @param qMatchingFieldMode - Matching field mode.
  The default value is MATCHINGFIELDMODE_MATCH_ALL.
  
  One of:
  
  • MATCHINGFIELDMODE_MATCH_ALL
  
  • MATCHINGFIELDMODE_MATCH_ONE
    */
    getMatchingFields(qTags: Array<string>, qMatchingFieldMode?: string): Promise<Array<NxMatchingFieldInfo>>;
    /**    Retrieves any fields that belong to the same archipelago as the specified field and that match at least one of the specified tags.
  Tags set by Qlik Sense are prefixed by the $ sign.
  
      @param qFieldName - Name of the field.
  This method looks for fields that belong to the same archipelago as this specified field.
      @param qTags - List of tags.
  This method looks for fields that match at least one of the tags in this list.
    */
    findMatchingFields(qFieldName: string, qTags: Array<string>): Promise<Array<NxMatchingFieldInfo>>;
    /**    Scrambles a field so the data is not recognizable. Some properties are retained to help debugging. For example, special characters are not changed, and small numbers are scrambled to another small number.
  Update access is required to use the function in Qlik Sense Enterprise.
  
      @param qFieldName - Name of the field to scramble.
    */
    scramble(qFieldName: string): Promise<object>;
    /**    Saves all objects that were modified in the app.
  Data from the data model are not saved. This operation is possible only in Qlik Sense Enterprise.
  
    */
    saveObjects(): Promise<object>;
    /**    Computes a set of association scores for each pair of fields between two given tables that have been loaded in an app.
  When a table contains some synthetic keys, all fields in the synthetic key tables are analyzed against fields in other tables. To denote that a field is a synthetic key, the field name is prefixed by [Synthetic Key]: .
  
      @param qTable1 - Name of the first table.
      @param qTable2 - Name of the second table.
    */
    getAssociationScores(qTable1: string, qTable2: string): Promise<Array<AssociationScore>>;
    /**    Lists the media files.
      @deprecated
  
    */
    getMediaList(): Promise<GetMediaListReturn>;
    /**    Lists the content libraries.
  To differentiate a global content library from an app specific content library, you can check the property qAppSpecific . If this property is set to true, it means that the content library is app specific.
  There is always one specific content library per app.
  
   Qlik Sense:
  Returns the global content libraries and the app specific content library.
  When using Qlik Sense, you can have more than one global content library. The global content libraries are common to all apps in the Qlik Sense repository.
  By default, there is one global content library named Default .
  
   Qlik Sense Desktop:
  Returns the global content library and the app specific content library from the disk.
  
    */
    getContentLibraries(): Promise<ContentLibraryList>;
    /**    Returns the content of a library.
  
   Global content library:
  In Qlik Sense Desktop, the content files are retrieved from:
  %userprofile%\Documents\Qlik\Sense\Content\Default
  In Qlik Sense Enterprise, the content files are retrieved from the Qlik Sense repository.
  
   App specific content library:
  The embedded files are returned.
  
      @param qName - Name of the content library.
  It corresponds to the property qContentLibraryListItem/qName returned by the GetContentLibraries method.
    */
    getLibraryContent(qName: string): Promise<StaticContentList>;
    /**    Reloads the script that is set in an app and returns the path to the script log file.
  A log file is created per reload.
  
   Logs:
  When this method is called, audit activity logs are produced to track the user activity.
  In the case of errors, both audit activity logs and system services logs are produced.
  The log files are named as follows:
  | Audit activity log                                                                                                                      | System service log                                                                                                          |
  |-----------------------------------------------------------------------------------------------------------------------------------------|-----------------------------------------------------------------------------------------------------------------------------|
  | __AuditActivity_Engine.txt_ in Qlik Sense Enterprise  __AuditActivity_Engine.log_ in Qlik Sense Desktop | __Service_Engine.txt_ in Qlik Sense Enterprise  __Service_Engine.log_ in Qlik Sense Desktop |
  
   Where to find the log files:
  The location of the log files depends on whether you have installed Qlik Sense Enterprise or Qlik Sense Desktop.
  | Qlik Sense Enterprise                 | Qlik Sense Desktop                       |
  |---------------------------------------|------------------------------------------|
  | _%ProgramData%/Qlik/Sense/Log/Engine_ | _%UserProfile%/Documents/Qlik/Sense/Log_ |
  
   DoReloadExParams:
  | Name     | Description                                                                                                                                                                                                                                    | Type    |
  |----------|------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|---------|
  | qMode    | Error handling mode  One of:  *   0: for default mode.*   1: for ABEND; the reload of the script ends if an error occurs.*   2: for ignore; the reload of the script continues even if an error is detected in the script. | Integer |
  | qPartial | Set to true for partial reload.  The default value is false.                                                                                                                                                                               | Boolean |
  | qDebug   | Set to true if debug breakpoints are to be honored. The execution of the script will be in debug mode.  The default value is false.                                                                                                        | Boolean |
  
   DoReloadExResult:
  | Name           | Description                                               | Type    |
  |----------------|-----------------------------------------------------------|---------|
  | qSuccess       | The operation is successful if _qSuccess_ is set to True. | Boolean |
  | qScriptLogFile | Path to the script log file.                              | String  |
  
  If the data load has successfully finished, no matter how the indexing behaves, true is returned. This happens even if there is a timeout, a memory limit is reached or any other error occurs during the indexing.
  
      @param qParams -
    */
    doReloadEx(qParams?: DoReloadExParams): Promise<DoReloadExResult>;
    /**    Returns the number of entries on the back stack.
  
    */
    backCount(): Promise<number>;
    /**    Returns the number of entries on the Forward stack.
  
    */
    forwardCount(): Promise<number>;
    /**    Applies a bookmark to reduce (slice) the data on. Returns a url and file size to the reduced application. Section Access is always applied.
  This API is only available on Sense Enterprise on Windows
  
      @param qOptions - BookmarkId used to reduced the app on and an expire time.
    */
    exportReducedData({ qExpires, ...rest }?: NxDownloadOptions): Promise<NxDownloadInfo>;
    /**    Returns a set analysis expression from active selections or from a saved bookmark. Fields on the fly and Calculated dimensions will not be included in the generated expressions, instead a message indicating 'missing fields' will provided within the expression.
  |                       | BookmarkId empty                     | BookmarkId set                                     |
  |-----------------------|--------------------------------------|----------------------------------------------------|
  |StateName empty (or $) | Default selections state is returned.| Default state ($) in bookmark with id is returned. |
  |StateName set          | State selections is returned.        | State in bookmark with id is returned.             |
  
      @param qStateName - Optional. The name of the state to get set analysis expression for. If left empty, the default state will be retrieved.
      @param qBookmarkId - Optional. The Id of the bookmark to get the set analysis expression for. If left empty, the current selection will be retrieved.
    */
    getSetAnalysis(qStateName?: string, qBookmarkId?: string): Promise<string>;
    /**    Sets values in script.
  
      @param qScript - Script content.
    */
    setScript(qScript: string): Promise<object>;
    /**    Checks the syntax of a script.
  
   Example:
  "result": { "qErrors": [ { "qErrLen": 3, "qTabIx": 0, "qLineInTab": 0, "qColInLine": 0, "qTextPos": 0 }, { "qErrLen": 5, "qTabIx": 0, "qLineInTab": 0, "qColInLine": 1, "qTextPos": 4, "qSecondaryFailure": true } ] }
  The first area is the primary error area, the second area is the secondary error area. The second area is optional and is shown only if qSecondaryFailure is set to true. The second area ends when the next statement in the script begins.
  The list of syntax errors in the script.
  If there are no errors, the engine returns:
  If there are errors, the engine returns the following properties in the response:
  | Name              | Description                                                      | Type    |
  |-------------------|------------------------------------------------------------------|---------|
  | qErrLen           | Length of the word where the error is located.                   | Integer |
  | qTabIx            | Number of the faulty section.                                    | Integer |
  | qLineInTab        | Line number in the section where the error is located.           | Integer |
  | qColInLine        | Position of the erroneous text from the beginning of the line.   | Integer |
  | qTextPos          | Position of the erroneous text from the beginning of the script. | Integer |
  | qSecondaryFailure | The default value is false.                                      | Boolean |
  
    */
    checkScriptSyntax(): Promise<Array<ScriptSyntaxError>>;
    /**    Retrieves the variables that are tagged as favorite.
  
    */
    getFavoriteVariables(): Promise<Array<string>>;
    /**    Set some variables as favorite.
  
      @param qNames - Variables to set as favorite.
    */
    setFavoriteVariables(qNames: Array<string>): Promise<object>;
    /**    Gets the content of a file.
  
      @param qPath - ["lib://CONNECTION_NAME\\\<the name of the file you want to use>.txt"]
  OR
  ["lib://Connection_Name\\\<Folder under your connection>\\\<the name of the file you want to use>.txt"]
  [ ] should be used when the first variable contains a lib reference.
    */
    getIncludeFileContent(qPath: string): Promise<string>;
    /**    Creates a connection.
  A connection indicates from which data source the data should be taken.
  
      @param qConnection - Information about the connection.
    */
    createConnection(qConnection: Connection): Promise<string>;
    /**    Updates a connection.
  The identifier of a connection cannot be updated. qType cannot be modified with the ModifyConnection method.
  
      @param qConnectionId - Identifier of the connection.
      @param qConnection - Information about the connection.
  Properties that can be updated.
      @param qOverrideCredentials - Set this parameter to true to override the user name and password.
    */
    modifyConnection(qConnectionId: string, qConnection: Connection, qOverrideCredentials?: boolean): Promise<object>;
    /**    Deletes a connection.
  In Qlik Sense Enterprise, there is an additional file connection named AttachedFiles . The AttachedFiles connection can only be removed by the administrator of the system.
  
      @param qConnectionId - Identifier of the connection to remove.
    */
    deleteConnection(qConnectionId: string): Promise<object>;
    /**    Retrieves a connection and returns:
  
  • The creation time of the connection.
  
  • The identifier of the connection.
  
  • The type of the connection.
  
  • The name of the connection.
  
  • The connection string.
  
      @param qConnectionId - Identifier of the connection.
    */
    getConnection(qConnectionId: string): Promise<Connection>;
    /**    Lists the connections in an app.
  In Qlik Sense Enterprise, there is an additional file connection named AttachedFiles . This connection is stored in the Qlik Sense repository.
  
    */
    getConnections(): Promise<Array<Connection>>;
    /**    Gives information about an ODBC, OLEDB or CUSTOM connection. See Outputs for more details.
  
      @param qConnectionId - Name of the connection.
    */
    getDatabaseInfo(qConnectionId: string): Promise<DatabaseInfo>;
    /**    Lists the databases inside a ODBC, OLEDB or CUSTOM data source.
  
      @param qConnectionId - Identifier of the connection.
    */
    getDatabases(qConnectionId: string): Promise<Array<Database>>;
    /**    Lists the owners of a database for a ODBC, OLEDB or CUSTOM connection.
  
      @param qConnectionId - Identifier of the connection.
      @param qDatabase - Name of the database.
    */
    getDatabaseOwners(qConnectionId: string, qDatabase?: string): Promise<Array<DatabaseOwner>>;
    /**    Lists the tables inside a database for a ODBC, OLEDB or CUSTOM connection.
  
      @param qConnectionId - Identifier of the connection.
      @param qDatabase - Name of the database.
  If qDatabase is not set then qOwner must be set.
      @param qOwner - Owner of the database.
  If qOwner is not set then qDatabase must be set.
    */
    getDatabaseTables(qConnectionId: string, qDatabase?: string, qOwner?: string): Promise<Array<DataTable>>;
    /**    Lists the fields inside a table of a database for a ODBC, OLEDB or CUSTOM connection.
  
      @param qConnectionId - Identifier of the connection.
      @param qTable - Name of the table.
      @param qDatabase - Name of the database.
  If qDatabase is not set then qOwner must be set.
      @param qOwner - Owner of the database.
  If qOwner is not set then qDatabase must be set.
    */
    getDatabaseTableFields(qConnectionId: string, qTable: string, qDatabase?: string, qOwner?: string): Promise<Array<DataField>>;
    /**    Retrieves the values of the specified table of a database for a ODBC, OLEDB or CUSTOM connection.
  
      @param qConnectionId - Identifier of the connection.
      @param qTable - Name of the table.
      @param qDatabase - Name of the database.
  If qDatabase is not set then qOwner must be set.
      @param qOwner - Owner of the database.
  If qOwner is not set then qDatabase must be set.
      @param qConditions -
    */
    getDatabaseTablePreview(qConnectionId: string, qTable: string, qDatabase?: string, qOwner?: string, qConditions?: FilterInfo): Promise<GetDatabaseTablePreviewReturn>;
    /**    Lists the items for a folder connection.
  
      @param qConnectionId - Identifier of the connection.
      @param qRelativePath - Relative path of the connection.
    */
    getFolderItemsForConnection(qConnectionId: string, qRelativePath?: string): Promise<Array<FolderItem>>;
    /**    Guesses the data format for a given file.
  Recognized file formats are:
  
  • CSV for Delimited
  
  • FIX for Fixed Record
  
  • DIF for Data Interchange Format
  
  • EXCEL_BIFF for Microsoft Excel (XLS)
  
  • EXCEL_OOXML for Microsoft Excel (XLSX)
  
  • HTML for HTML
  
  • QVD for QVD file
  
  • XML for XML
  
  • QVX for QVX file
  
  • JSON for JSON format
  
  • KML for KML file
  
  • PARQUET for PARQUET file
  
   FileType:
  Recognized file formats are:
  
  • CSV for Delimited
  
  • FIX for Fixed Record
  
  • DIF for Data Interchange Format
  
  • EXCEL_BIFF for Microsoft Excel (XLS)
  
  • EXCEL_OOXML for Microsoft Excel (XLSX)
  
  • HTML for HTML
  
  • QVD for QVD file
  
  • XML for XML
  
  • QVX for QVX file
  
  • JSON for JSON format
  
  • KML for KML file
  
  • PARQUET for PARQUET file
  
      @param qConnectionId - Identifier of the connection file.
      @param qRelativePath - Path of the connection file.
    */
    guessFileType(qConnectionId: string, qRelativePath?: string): Promise<FileDataFormat>;
    /**    Lists the tables for a folder connection.
  
   FileType:
  Recognized file formats are:
  
  • CSV for Delimited
  
  • FIX for Fixed Record
  
  • DIF for Data Interchange Format
  
  • EXCEL_BIFF for Microsoft Excel (XLS)
  
  • EXCEL_OOXML for Microsoft Excel (XLSX)
  
  • HTML for HTML
  
  • QVD for QVD file
  
  • XML for XML
  
  • QVX for QVX file
  
  • JSON for JSON format
  
  • KML for KML file
  
  • PARQUET for PARQUET file
  
      @param qConnectionId - Identifier of the connection.
      @param qDataFormat - Type of the file.
      @param qRelativePath - Path of the connection file.
    */
    getFileTables(qConnectionId: string, qDataFormat: FileDataFormat, qRelativePath?: string): Promise<Array<DataTable>>;
    /**    Lists the fields of a table for a folder connection.
  
   FileType:
  Recognized file formats are:
  
  • CSV for Delimited
  
  • FIX for Fixed Record
  
  • DIF for Data Interchange Format
  
  • EXCEL_BIFF for Microsoft Excel (XLS)
  
  • EXCEL_OOXML for Microsoft Excel (XLSX)
  
  • HTML for HTML
  
  • QVD for QVD file
  
  • XML for XML
  
  • QVX for QVX file
  
  • JSON for JSON format
  
  • KML for KML file
  
  • PARQUET for PARQUET file
  
      @param qConnectionId - Identifier of the connection.
      @param qDataFormat - Type of the file.
      @param qTable - Name of the table.
  This parameter must be set for XLS , XLSX , HTML  _ and _XML files.
      @param qRelativePath - Path of the connection file.
    */
    getFileTableFields(qConnectionId: string, qDataFormat: FileDataFormat, qTable: string, qRelativePath?: string): Promise<GetFileTableFieldsReturn>;
    /**    Lists the values in a table for a folder connection.
  
   FileType:
  Recognized file formats are:
  
  • CSV for Delimited
  
  • FIX for Fixed Record
  
  • DIF for Data Interchange Format
  
  • EXCEL_BIFF for Microsoft Excel (XLS)
  
  • EXCEL_OOXML for Microsoft Excel (XLSX)
  
  • HTML for HTML
  
  • QVD for QVD file
  
  • XML for XML
  
  • QVX for QVX file
  
  • JSON for JSON format
  
  • KML for KML file
  
  • PARQUET for PARQUET file
  
      @param qConnectionId - Identifier of the connection.
      @param qDataFormat - Type of the file.
      @param qTable - Name of the table.
  This parameter must be set for XLS , XLSX , HTML  _ and _XML files.
      @param qRelativePath - Path of the connection file.
    */
    getFileTablePreview(qConnectionId: string, qDataFormat: FileDataFormat, qTable: string, qRelativePath?: string): Promise<GetFileTablePreviewReturn>;
    /**    Lists the tables and fields of a JSON or XML file for a folder connection.
  
      @param qConnectionId - Identifier of the connection.
      @param qDataFormat - Type of the file.
      @param qRelativePath - Path of the connection file.
    */
    getFileTablesEx(qConnectionId: string, qDataFormat: FileDataFormat, qRelativePath?: string): Promise<Array<DataTableEx>>;
    /**    Sends a generic command to a custom connector.
  For more information on the commands that can be sent to a custom connector, see the QVX SDK help.
  
      @param qProvider - Connector file name.
  Command to be executed by the connector.
      @param qCommand - One of:
  
  • JsonRequest
  
  • GetCustomCaption
  
  • IsConnected
  
  • DisableQlikViewSelectButton
  
  • HaveStarField
      @param qMethod - Method name to be used within the command.
  The available methods depend on the chosen connector.
      @param qParameters - Parameters of the command.
  No parameters are required.
      @param qAppendConnection - Name of the connection.
    */
    sendGenericCommandToCustomConnector(qProvider: string, qCommand: string, qMethod: string, qParameters: Array<string>, qAppendConnection: string): Promise<string>;
    /**    Returns search terms suggestions.
  
      @param qTerms - Terms to search for.
      @param qOptions - Information about the search combinations.
    */
    searchSuggest(qTerms: Array<string>, { qCharEncoding, qContext, ...rest }?: SearchCombinationOptions): Promise<SearchSuggestionResult>;
    /**    Returns the search matches for one or more search terms.
  The search results depend on the search context.
  SearchCombinationOptions
  
   SearchMatchCombinations:
  | Name                     | Description                   | Type                              |
  |--------------------------|-------------------------------|-----------------------------------|
  | qSearchMatchCombinations | Array of search combinations. | Array of _SearchMatchCombination_ |
      @deprecated
      @param qTerms - List of terms to search for.
      @param qOptions - Information about the search fields and the search context.
      @param qPage - Array of pages to retrieve.
    */
    searchAssociations(qTerms: Array<string>, { qCharEncoding, qContext, ...rest }?: SearchCombinationOptions, { qMaxNbrFieldMatches, ...rest2 }?: SearchPage): Promise<SearchAssociationResult>;
    /**    Selects all search hits for a specified group.
  The results depend on the search context.
  SearchCombinationOptions.
  
      @param qTerms - List of terms to search for.
      @param qMatchIx - Index (value of qId ) of the search result to select.
      @param qSoftLock - This parameter is deprecated and should not be set.
      @param qOptions - Information about the search fields and the search context.
    */
    selectAssociations(qTerms: Array<string>, qMatchIx: number, qSoftLock?: boolean, { qCharEncoding, qContext, ...rest }?: SearchCombinationOptions): Promise<object>;
    /**    Returns the search matches for one or more search terms.
  Search results are organized in search groups. The type of search group indicates where the search matches come from (from data for example).
  Each search group contains search results that correspond to a combination of search terms.
  For example, if the search terms are organic , pasta , and America , the possible combination of search groups are:
  
  • organic
  
  • pasta
  
  • America
  
  • organic, pasta, America
  
  • organic, pasta
  
  • organic, America
  
  • pasta, America
  
  For every search group, there are one or more search group items. Each subgroup item contains results that correspond to an item type (for example a field).
  For every search group item, there are one or several search matches. The position of the match in each search result is given.
  
      @param qTerms - Terms to search for.
      @param qOptions - Information about the search combinations.
      @param qPage - Array of pages to retrieve.
    */
    searchResults(qTerms: Array<string>, { qCharEncoding, qContext, ...rest }?: SearchCombinationOptions, { qMaxNbrFieldMatches, ...rest2 }?: SearchPage): Promise<SearchResult>;
    /**    Returns the generic objects corresponding to one or more search terms. The search is performed within the title, subtitle, footnote and type. In addition, associated dimension values are also searched in. For example, if the country “Japan” is selected and the object contains the dimension City, the object will appear in the results for “Osaka” but not for “Johannesburg”. The generic objects with the following types will never appear in the results: slideitem , sheet , story , slide , masterobject , snapshot , LoadModel , appprops and searchhistory .
  
      @param qTerms - Terms to search for.
      @param qOptions - Information about attributes.
      @param qPage - Array of pages to retrieve.
    */
    searchObjects(qTerms: Array<string>, { qCharEncoding, ...rest }?: SearchObjectOptions, { qMaxNbrFieldMatches, ...rest2 }?: SearchPage): Promise<SearchResult>;
    /**    Get sample values from either a column in a table or from a field.
  Supports wildcard matches in tables or field names:
  - '*' for zero or more characters.
  - '?' for one character.
  
      @param qFieldsOrColumnsWithWildcards - Pairs of table (optionally) and field names. Support wildcard matches.
      @param qMaxNumberOfValues - Max number of sample values returned. Depending on the column or field size the number of returned samples can be less than MaxNumberOfValues. If MaxNumberOfValues is negative all sample values are returned.
      @param qRandSeed - Optional. Sets the random number seed. Should only be set for test purposes.
    */
    getFieldAndColumnSamples(qFieldsOrColumnsWithWildcards: Array<FieldOrColumn>, qMaxNumberOfValues: number, qRandSeed?: number): Promise<Array<SampleResult>>;
    /**    Gets script and script meta-data.
  
    */
    getScriptEx(): Promise<AppScript>;
    /**
  
      @param qListDef -
    */
    getVariables({ qData: { tags, ...restQData }, qShowConfig, qShowReserved, qType, ...rest }?: VariableListDef): Promise<Array<NxVariableListItem>>;
    /**    Expands the expression.
  
      @param qExpression - The expression string to expand.
    */
    expandExpression(qExpression: string): Promise<string>;
    /**    Removes a transient variable.
  
  qSuccess is set to true if the operation is successful.
  
      @param qId - Identifier of the variable.
    */
    destroySessionVariableById(qId: string): Promise<boolean>;
    /**    Removes a transient variable.
  
  qSuccess is set to true if the operation is successful.
  
      @param qName - Name of the variable.
    */
    destroySessionVariableByName(qName: string): Promise<boolean>;
    /**    Creates a bookmark with softpatches.
      @experimental
      @param qObjectIdsToPatch - Add softpatches for this objects if available. If empty all softpatches are added to the bookmark.
      @param qProp - Properties for the object.
    */
    createBookmarkEx(qObjectIdsToPatch?: Array<string>, { creationDate, ...rest }?: GenericBookmarkProperties): Promise<GenericBookmark>;
    /**    Save a copy of an app with a different name.
  Can be used to save a session app as an ordinary app.
  
      @param qNewAppName - <Name of the saved app>
    */
    saveAs(qNewAppName: string): Promise<string>;
    /**    Store current selection state temporarily.
  The temporary selection state will be stored for 30min by default if TTL parameter is not present or positive.
  StoreTempSelectionState method is only supported in SaaS Editions of Qlik Sense.
  
      @param qTTLOfTempState - Time to live in seconds for stored selection state
    */
    storeTempSelectionState(qTTLOfTempState?: number): Promise<StoreTempSelectionStateReturn>;
    /**    Restore a temporary selection state identified by Id.
  RestoreTempSelectionState method is only supported in SaaS Editions of Qlik Sense.
  
      @param qId - Identifier of the temporary selection state
    */
    restoreTempSelectionState(qId: string): Promise<boolean>;
    /**    Change the owner of a session app.
  Can be used by a privileged user when creating a session app to be consumed by another user.
  Only useful in environments where it is possible to reconnect to a session app, currently only in cloud deployments.
      @experimental
      @param qNewOwnerId - Identifier of the new app owner.
    */
    changeSessionAppOwner(qNewOwnerId: string): Promise<boolean>;
    /**    Add a session app to a space.
  Can be used by a privileged user when creating a session app to be consumed by other users.
  Only useful in environments where it is possible to reconnect to a session app, currently only in cloud deployments.
      @experimental
      @param qSpaceId - Identifier of the new space.
    */
    changeSessionAppSpace(qSpaceId: string): Promise<boolean>;
    /**    Returns profile data for a given table.
      @experimental
      @param qTableName - Name of the table
    */
    getTableProfileData(qTableName: string): Promise<TableProfilingData>;
    /**    Returns the handle of a measure with a label.
  If multiple measures has the same label the first is returned.
  
      @param qLabel - is the label of the measure to be returned.
    */
    getMeasureWithLabel(qLabel: string): Promise<GenericMeasure>;
    /**
      @experimental
      @param qOptions -
      @param qTerms -
      @param qPage -
    */
    searchValues(qOptions: SearchValueOptions, qTerms: Array<string>, { qMaxNbrFieldMatches, ...rest2 }?: SearchValuePage): Promise<SearchValueResult>;
    /**    Retrives any fields from an expression.
  
      @param qExpr - Expression to get fields from.
    */
    getFieldsFromExpression(qExpr: string): Promise<Array<string>>;
    /**    Returns a list of resource ids (QRI) for fields that belongs to the datamodel.
  Key fields (that belongs to multiple tables), returns one resource identifier per table.
  GetFieldsResourceIds method is only supported in SaaS Editions of Qlik Sense.
  
      @param qFieldNames - List of fields names that resource ids should be returned from.
    */
    getFieldsResourceIds(qFieldNames: Array<string>): Promise<Array<NxFieldResourceId>>;
    /**    Gets the current Backus-Naur Form (BNF) grammar of the Qlik chart expressions supported within a given App.
      @experimental
  
    */
    getExpressionBNF(): Promise<GetExpressionBNFReturn>;
    /**    Gets a string hash calculated from the current Backus-Naur Form (BNF) grammar  of the Qlik chart expressions supported within a given App.
      @experimental
  
    */
    getExpressionBNFHash(): Promise<string>;
    /**    Prohibit binary load of this app.
  An app with prohibit binary load set cannot be loaded binary. For the setting to have effect a save is required.
  
      @param qProhibit - True or false.
    */
    setProhibitBinaryLoad(qProhibit: boolean): Promise<object>;
    /**    Transform current app into an instance of the targeted mode
  
      @param qDstParameters - Attributes that should be set in the new app.
    */
    transformApp(qDstParameters: TransformAppParameters): Promise<TransformAppResult>;
    /**    Create temporary bookmark
  CreateTemporaryBookmark method is only supported in SaaS Editions of Qlik Sense.
      @experimental
      @param qOptions - Options for the temporary bookmark
      @param qObjectIdsToPatch - Add softpatches for this objects if available. If empty all softpatches are added to the bookmark. This is ignored if IncludePatches is false.
    */
    createTemporaryBookmark(qOptions: NxTempBookmarkOptions, qObjectIdsToPatch?: Array<string>): Promise<CreateTemporaryBookmarkReturn>;
    /**    Apply temporary bookmark identified by Id.
  ApplyTemporaryBookmark method is only supported in SaaS Editions of Qlik Sense.
      @experimental
      @param qId - Identifier of the temporary selection state
    */
    applyTemporaryBookmark(qId: string): Promise<boolean>;
    /**    Gets script meta-data.
      @experimental
  
    */
    getScriptMeta(): Promise<AppScriptMeta>;
    /**    Replace a bookmark. Optional inparams to change the original bookmarks properties, original are kept if left out.
      @experimental
      @param qId - Identifier of the bookmark.
      @param qIgnorePatches - Set to true to exclude patches from the bookmark. Default is false.
      @param qObjectIdsToPatch - Add softpatches for this objects if available. If empty all softpatches are added to the bookmark. Ignored if IgnorePatches is set to true.
    */
    replaceBookmark(qId: string, qIgnorePatches?: boolean, qObjectIdsToPatch?: Array<string>): Promise<ObjectInterface>;
    /**    Commits the current script version so that any future changes will be part of a new version.
      @experimental
      @param qCommitMessage - Name of the version.
   Only applicable to QCS.
    */
    commitScript(qCommitMessage?: string): Promise<object>;
    /**
  
      @param qProp -
    */
    createAppPropertiesObject({ chartAnimations, qStateName, theme, ...rest }?: NxAppProperties): Promise<GenericObject>;
    /**
  
      @param qProp -
    */
    createBookmarkObject({ creationDate, ...rest }?: GenericBookmarkProperties): Promise<GenericObject>;
    /**
  
      @param qProp -
    */
    createDimensionObject({ qDim: { coloring: { baseColor: { index, ...restQDimColoringBaseColor }, ...restQDimColoring }, ...restQDim }, ...rest }?: GenericDimensionProperties): Promise<GenericObject>;
    /**
  
      @param qProp -
    */
    createMasterobject({ masterVersion, qStateName, showTitles, ...rest }?: GenericMasterobjectProperties): Promise<GenericObject>;
    /**
  
      @param qProp -
    */
    createMeasureObject({ qMeasure: { qNumFormat: { qType, qnDec, ...restQMeasureQNumFormat }, coloring: { baseColor: { index, ...restQMeasureColoringBaseColor }, gradient: { limitType, ...restQMeasureColoringGradient }, ...restQMeasureColoring }, ...restQMeasure }, ...rest }?: GenericMeasureProperties): Promise<GenericObject>;
    /**
  
      @param qProp -
    */
    createSheet({ columns, gridResolution, layoutOptions: { mobileLayout, ...restLayoutOptions }, qChildListDef: { qData: { title, ...restQChildListDefQData }, ...restQChildListDef }, qStateName, rank, rows, ...rest }?: GenericSheetProperties): Promise<GenericObject>;
    /**
  
      @param qProp -
    */
    createVariableObject({ qNumberPresentation: { qType, qnDec, ...restQNumberPresentation }, ...rest }?: GenericVariableProperties): Promise<GenericObject>;
    /**
      @param qProp - AppPropertiesList
      */
    getAppPropertiesObject({ qAppObjectListDef: { qData: { chartAnimations, disableCellNavMenu, rtl, sheetLogoPosition, sheetLogoThumbnail, sheetTitleBgColor, sheetTitleColor, sheetTitleGradientColor, theme, ...restQAppObjectListDefQData }, qType, ...restQAppObjectListDef }, qStateName, ...rest }?: AppPropertiesList): Promise<GenericObject>;
    /**
      @param qProp - AppPropertiesList
      */
    getAppPropertiesObjectLayout({ qAppObjectListDef: { qData: { chartAnimations, disableCellNavMenu, rtl, sheetLogoPosition, sheetLogoThumbnail, sheetTitleBgColor, sheetTitleColor, sheetTitleGradientColor, theme, ...restQAppObjectListDefQData }, qType, ...restQAppObjectListDef }, qStateName, ...rest }?: AppPropertiesList): Promise<Array<NxContainerEntry>>;
    /**
      @param qProp - BookmarkList
      */
    getBookmarksListObject({ qBookmarkListDef: { qData: { creationDate, description, selectionFields, sheetId, title, ...restQBookmarkListDefQData }, qType, ...restQBookmarkListDef }, qStateName, ...rest }?: BookmarkList): Promise<GenericObject>;
    /**
      @param qProp - BookmarkList
      */
    getBookmarksList({ qBookmarkListDef: { qData: { creationDate, description, selectionFields, sheetId, title, ...restQBookmarkListDefQData }, qType, ...restQBookmarkListDef }, qStateName, ...rest }?: BookmarkList): Promise<Array<NxContainerEntry>>;
    /**
      @param qProp - GenericCurrentSelectionsProperties
      */
    getCurrentSelectionsObject({ qSelectionObjectDef: { qStateName, ...restQSelectionObjectDef }, qStateName: qStateName2, qType, ...rest }?: GenericCurrentSelectionsProperties): Promise<GenericObject>;
    /**
      @param qProp - GenericCurrentSelectionsProperties
      */
    getCurrentSelections({ qSelectionObjectDef: { qStateName, ...restQSelectionObjectDef }, qStateName: qStateName2, qType, ...rest }?: GenericCurrentSelectionsProperties): Promise<SelectionObject>;
    /**
      @param qProp - DimensionList
      */
    getDimensionsObject({ qDimensionListDef: { qData: { grouping, info, labelExpression, tags, title, ...restQDimensionListDefQData }, qType, ...restQDimensionListDef }, qStateName, ...rest }?: DimensionList): Promise<GenericObject>;
    /**
      @param qProp - DimensionList
      */
    getDimensions({ qDimensionListDef: { qData: { grouping, info, labelExpression, tags, title, ...restQDimensionListDefQData }, qType, ...restQDimensionListDef }, qStateName, ...rest }?: DimensionList): Promise<Array<NxContainerEntry>>;
    /**
      @param qProp - FieldList
      */
    getFieldsObject({ qFieldListDef: { qShowDerivedFields, qShowSemantic, qShowSrcTables, ...restQFieldListDef }, qStateName, qType, ...rest }?: FieldList): Promise<GenericObject>;
    /**
      @param qProp - FieldList
      */
    getFields({ qFieldListDef: { qShowDerivedFields, qShowSemantic, qShowSrcTables, ...restQFieldListDef }, qStateName, qType, ...rest }?: FieldList): Promise<Array<NxFieldDescription>>;
    /**
      @param qProp - MasterobjectList
      */
    getMasterobjectsObject({ qAppObjectListDef: { qData: { labelExpression, name, tags, visualization, ...restQAppObjectListDefQData }, qType, ...restQAppObjectListDef }, qStateName, ...rest }?: MasterobjectList): Promise<GenericObject>;
    /**
      @param qProp - MasterobjectList
      */
    getMasterobjects({ qAppObjectListDef: { qData: { labelExpression, name, tags, visualization, ...restQAppObjectListDefQData }, qType, ...restQAppObjectListDef }, qStateName, ...rest }?: MasterobjectList): Promise<Array<NxContainerEntry>>;
    /**
      @param qProp - MeasureList
      */
    getMeasuresObject({ qMeasureListDef: { qData: { labelExpression, tags, title, ...restQMeasureListDefQData }, qType, ...restQMeasureListDef }, qStateName, ...rest }?: MeasureList): Promise<GenericObject>;
    /**
      @param qProp - MeasureList
      */
    getMeasures({ qMeasureListDef: { qData: { labelExpression, tags, title, ...restQMeasureListDefQData }, qType, ...restQMeasureListDef }, qStateName, ...rest }?: MeasureList): Promise<Array<NxContainerEntry>>;
    /**
      @param qProp - SheetList
      */
    getSheetsObject({ qAppObjectListDef: { qData: { cells, columns, description, descriptionExpression, labelExpression, rank, rows, showCondition, thumbnail, title, ...restQAppObjectListDefQData }, qType, ...restQAppObjectListDef }, qStateName, ...rest }?: SheetList): Promise<GenericObject>;
    /**
      @param qProp - SheetList
      */
    getSheets({ qAppObjectListDef: { qData: { cells, columns, description, descriptionExpression, labelExpression, rank, rows, showCondition, thumbnail, title, ...restQAppObjectListDefQData }, qType, ...restQAppObjectListDef }, qStateName, ...rest }?: SheetList): Promise<Array<NxContainerEntry>>;
    /**
      @param qProp - VariableList
      */
    getVariablesListObject({ qStateName, qVariableListDef: { qData: { tags, ...restQVariableListDefQData }, qShowConfig, qShowReserved, qType, ...restQVariableListDef }, ...rest }?: VariableList): Promise<GenericObject>;
    /**
      @param qProp - VariableList
      */
    getVariablesList({ qStateName, qVariableListDef: { qData: { tags, ...restQVariableListDefQData }, qShowConfig, qShowReserved, qType, ...restQVariableListDef }, ...rest }?: VariableList): Promise<Array<NxContainerEntry>>;
    /**    Returns the type of the app object and the corresponding handle.
  
      @param qId - Identifier of the object to retrieve.
    */
    getMasterobject(qId: string): Promise<GenericObject>;
    /**    Returns the type of the app object and the corresponding handle.
  
      @param qId - Identifier of the object to retrieve.
    */
    getSheet(qId: string): Promise<GenericObject>;
    /** Establishes the websocket against the configured URL. Eventually resolved with
   * the QIX global interface when the connection has been established.
   *
   * @param appConfig.delta - Set to false to disable the use of the bandwidth-reducing delta protocol.
   * @example
   * ```js
   * await app.open();
   * const script = 'Load RecNo() as N autogenerate(100);';
   * await app.setScript(script);
   * await app.doReload();
   * ```
   */
    open(sessionConfig?: {
        delta?: boolean;
    }): Promise<RpcSession>;
    /** Closes the websocket and cleans up internal caches, also triggers the closed
   * event on all generated APIs. Eventually resolved when the websocket has been closed.
   *
   * @example
   * ```js
   * await app.close();
   * ```
   */
    close(): Promise<void>;
    on(event: EventTypes, listener: EventListener): void;
    once(event: EventTypes, listener: EventListener): void;
}
export type DocListEntry = {
    /** Not used. */
    qConnectedUsers?: number;
    /** Identifier of the app.
  
  • In Qlik Sense Desktop, the identifier is the path and name of the app.
  
  • In Qlik Sense Enterprise, the identifier is the app's GUID. */
    qDocId?: string;
    /** Name of the app. */
    qDocName?: string;
    /** Size of remote app.
  This property is used only with Qlik Sense Desktop.
  It is set to 0 for Qlik Sense Enterprise. */
    qFileSize?: number;
    /** Last modified time stamp of the app.
  This property is used only with Qlik Sense Desktop.
  It is set to 0 for Qlik Sense Enterprise. */
    qFileTime?: number;
    /** If true the app has section access configured. */
    qHasSectionAccess?: boolean;
    /** Is the app a Direct Query app? */
    qIsDirectQueryMode?: boolean;
    /** Last reload time of the app. */
    qLastReloadTime?: string;
    /** Meta data related to the app. */
    qMeta?: NxMeta;
    /** If set to true, the app is read-only. */
    qReadOnly?: boolean;
    /** Thumbnail of the app. */
    qThumbnail?: StaticContentUrl;
    /** Title of the app. */
    qTitle?: string;
    [key: string]: any;
};
export type DriveInfo = {
    /** Value of the drive.
  Examples:
  C:\\\, E:\\\ */
    qDrive?: string;
    /** Name of the drive. */
    qName?: string;
    /** Type of the drive.
  Fixed means physical drive. */
    qType?: string;
    /** Information about the drive type.
  
  One of:
  
  • REMOVABLE
  
  • FIXED
  
  • NETWORK
  
  • CD_ROM
  
  • RAM
  
  • UNKNOWN_TYPE */
    qTypeIdentifier?: 'REMOVABLE' | 'FIXED' | 'NETWORK' | 'CD_ROM' | 'RAM' | 'UNKNOWN_TYPE' | string;
    qUnnamedDrive?: boolean;
    [key: string]: any;
};
export type DriveType = {
    [key: string]: any;
};
export type EditorBreakpoint = {
    /** If set to true then the breakpoint is enabled (in use). */
    qEnabled?: boolean;
    /** Name of the breakpoint. */
    qbufferName?: string;
    /** Line number in the script where the breakpoint is set. */
    qlineIx?: number;
    [key: string]: any;
};
export type EmbeddedSnapshot = {
    [key: string]: any;
};
export type EmbeddedSnapshotDef = {
    [key: string]: any;
};
export type ErrorData = {
    /** Type of the error messages.
  
  One of:
  
  • EDC_ERROR
  
  • EDC_WARNING
  
  • EDC_CIRCULAR_REFERENCE */
    qErrorDataCode?: 'EDC_ERROR' | 'EDC_WARNING' | 'EDC_CIRCULAR_REFERENCE' | string;
    /** Detailed information about the error message. */
    qErrorString?: string;
    /** Script statement where the error occurs. */
    qLine?: string;
    /** Line termination characters. */
    qLineEnd?: string;
    qMessage?: ProgressMessage;
    [key: string]: any;
};
export type ErrorDataCode = {
    [key: string]: any;
};
export type ExpansionData = {
    qExcludeList?: boolean;
    qPos?: PositionMark;
    [key: string]: any;
};
export type ExportDataReturn = {
    qUrl?: string;
    qWarnings?: Array<number>;
    [key: string]: any;
};
export type ExtendedLayoutBookmarkData = {
    qActive?: boolean;
    qActiveContainerChildObjectId?: string;
    qDimensionGroupPos?: Array<GroupStateInfo>;
    qExpansionInfo?: Array<ExpansionData>;
    qExpressionGroupPos?: Array<GroupStateInfo>;
    qExtendedPivotState?: ExtendedPivotStateData;
    /**
  One of:
  
  • GRAPH_MODE_BAR
  
  • GRAPH_MODE_PIE
  
  • GRAPH_MODE_PIVOTTABLE
  
  • GRAPH_MODE_SCATTER
  
  • GRAPH_MODE_LINE
  
  • GRAPH_MODE_STRAIGHTTABLE
  
  • GRAPH_MODE_COMBO
  
  • GRAPH_MODE_RADAR
  
  • GRAPH_MODE_GAUGE
  
  • GRAPH_MODE_GRID
  
  • GRAPH_MODE_BLOCK
  
  • GRAPH_MODE_FUNNEL
  
  • GRAPH_MODE_MEKKO
  
  • GRAPH_MODE_LAST */
    qGraphMode?: 'GRAPH_MODE_BAR' | 'GRAPH_MODE_PIE' | 'GRAPH_MODE_PIVOTTABLE' | 'GRAPH_MODE_SCATTER' | 'GRAPH_MODE_LINE' | 'GRAPH_MODE_STRAIGHTTABLE' | 'GRAPH_MODE_COMBO' | 'GRAPH_MODE_RADAR' | 'GRAPH_MODE_GAUGE' | 'GRAPH_MODE_GRID' | 'GRAPH_MODE_BLOCK' | 'GRAPH_MODE_FUNNEL' | 'GRAPH_MODE_MEKKO' | 'GRAPH_MODE_LAST' | string;
    qId?: string;
    qLeftCollapsed?: boolean;
    qScrollPos?: ScrollPosition;
    qShowMode?: number;
    qSortData?: Array<InterFieldSortData>;
    qTopCollapsed?: boolean;
    qUseGraphMode?: boolean;
    [key: string]: any;
};
export type ExtendedPivotStateData = {
    qDimensionNames?: Array<string>;
    qEnableConditions?: Array<string>;
    qExpressionPosition?: number;
    qNumberOfLeftDimensions?: number;
    [key: string]: any;
};
export type ExtensionList = {
    qItems?: Array<string>;
    [key: string]: any;
};
export type ExtensionListDef = {
    [key: string]: any;
};
/**
  @param qGenericId - Object ID.
  @param qGenericType - The type of the object.
  @param qHandle - The handle used to connect to object.
  @param qType - The native type of the object.
  @param auth - Auth object used to make requests
 */
export declare class Field {
    session: RpcSession;
    auth: Auth;
    qGenericId?: string;
    qGenericType?: string;
    qHandle?: number;
    qType?: string;
    [key: string]: any;
    constructor({ qGenericId, qGenericType, qHandle, qType, ...rest }: {
        qGenericId?: string;
        qGenericType?: string;
        qHandle?: number;
        qType?: string;
    }, session: RpcSession, auth?: Auth);
    /**    Retrieves the number of distinct values in a field.
  
    */
    getCardinal(): Promise<number>;
    /**    Returns the AND mode status of a field.
  
    */
    getAndMode(): Promise<boolean>;
    /**    Selects some values in a field, by entering the values to select.
  
      @param qFieldValues - List of the values to select.
      @param qToggleMode - The default value is false.
      @param qSoftLock - Set to true to ignore locks; in that case, locked fields can be selected.
  The default value is false.
    */
    selectValues(qFieldValues: Array<FieldValue>, qToggleMode?: boolean, qSoftLock?: boolean): Promise<boolean>;
    /**    Selects field values matching a search string.
  
      @param qMatch - String to search for.
  Can contain wild cards or numeric search criteria.
      @param qSoftLock - Set to true to ignore locks; in that case, locked fields can be selected.
  The default value is false.
      @param qExcludedValuesMode - Include excluded values in search.
    */
    select(qMatch: string, qSoftLock?: boolean, qExcludedValuesMode?: number): Promise<boolean>;
    /**    Toggle selects field values matching a search string.
  
      @param qMatch - String to search for.
  Can contain wild cards or numeric search criteria.
      @param qSoftLock - Set to true to ignore locks; in that case, locked fields can be selected.
  The default value is false.
      @param qExcludedValuesMode - Include excluded values in search.
    */
    toggleSelect(qMatch: string, qSoftLock?: boolean, qExcludedValuesMode?: number): Promise<boolean>;
    /**    Maintains the selections in the current field while clearing the selections in the other fields.
  
      @param qSoftLock - Set to true to ignore locks; in that case, locked fields can be selected.
  The default value is false.
    */
    clearAllButThis(qSoftLock?: boolean): Promise<boolean>;
    /**    Selects all possible values in a specific field.
  
      @param qSoftLock - Set to true to ignore locks; in that case, locked fields can be selected.
  The default value is false.
    */
    selectPossible(qSoftLock?: boolean): Promise<boolean>;
    /**    Inverts the current selections.
  
      @param qSoftLock - Set to true to ignore locks; in that case, locked fields can be selected.
  The default value is false.
    */
    selectExcluded(qSoftLock?: boolean): Promise<boolean>;
    /**    Selects all values of a field. Excluded values are also selected.
  
      @param qSoftLock - Set to true to ignore locks; in that case, locked fields can be selected.
  The default value is false.
    */
    selectAll(qSoftLock?: boolean): Promise<boolean>;
    /**    Locks all selected values of a specific field.
  
    */
    lock(): Promise<boolean>;
    /**    Unlocks all selected values of a specific field if the target (or handle ) is a field.
  
    */
    unlock(): Promise<boolean>;
    /**    Gets the properties of a field.
  
  The property OneAndOnlyOne is set to true if one and only value has been selected in the field prior setting the property.
  
    */
    getNxProperties(): Promise<NxFieldProperties>;
    /**    Sets some properties to a field.
  
      @param qProperties - Information about the properties of the field.
    */
    setNxProperties(qProperties: NxFieldProperties): Promise<object>;
    /**    Sets a field in the AND mode.
  
      @param qAndMode - Specifies if the AND mode applies to the field.
  Set this parameter to true to enter the AND mode.
    */
    setAndMode(qAndMode: boolean): Promise<object>;
    /**    Selects all alternatives values in a specific field.
  In a field that contains at least one selected value, the values that are neither selected nor excluded are alternatives values.
  
      @param qSoftLock - Set to true to ignore locks; in that case, locked fields can be selected.
  The default value is false.
    */
    selectAlternative(qSoftLock?: boolean): Promise<boolean>;
    /**    Selects some values in a field, by entering the element numbers related to the values to select.
  
      @param qValues - Indexes (or element numbers) of the values to select.
      @param qToggleMode - Set to true to keep any selections present in the list object.
  If this parameter is set to false, selections made before accepting the list object search become alternative.
      @param qSoftLock - Set to true to ignore locks; in that case, locked fields can be selected.
  The default value is false.
    */
    lowLevelSelect(qValues: Array<number>, qToggleMode: boolean, qSoftLock?: boolean): Promise<boolean>;
    /**    Clears the selections in a specific field.
  
    */
    clear(): Promise<boolean>;
    on(event: EventTypes, listener: EventListener): void;
    once(event: EventTypes, listener: EventListener): void;
}
export type FieldAttrType = {
    [key: string]: any;
};
export type FieldAttributes = {
    /** Defines the decimal separator.
  Example: . */
    qDec?: string;
    /** Defines the format pattern that applies to qText .
  Is used in connection to the type of the field (parameter qType ).
  For more information, see Formatting mechanism.
  Example: YYYY-MM-DD for a date. */
    qFmt?: string;
    /** Defines the thousand separator (if any).
  Is used if qUseThou is set to 1.
  Example: , */
    qThou?: string;
    /** Type of the field.
  Default is U.
  
  One of:
  
  • U or UNKNOWN
  
  • A or ASCII
  
  • I or INTEGER
  
  • R or REAL
  
  • F or FIX
  
  • M or MONEY
  
  • D or DATE
  
  • T or TIME
  
  • TS or TIMESTAMP
  
  • IV or INTERVAL
  @defaultValue "UNKNOWN" */
    qType?: 'UNKNOWN' | 'ASCII' | 'INTEGER' | 'REAL' | 'FIX' | 'MONEY' | 'DATE' | 'TIME' | 'TIMESTAMP' | 'INTERVAL' | string;
    /** Defines whether or not a thousands separator must be used.
  Default is 0. */
    qUseThou?: number;
    /** Number of decimals.
  Default is 10.
  @defaultValue 10 */
    qnDec?: number;
    [key: string]: any;
};
export type FieldDefEx = {
    /** Name of the field. */
    qName?: string;
    /** Type of data entity.
  
  One of:
  
  • NOT_PRESENT
  
  • PRESENT
  
  • IS_CYCLIC_GROUP
  
  • IS_DRILL_GROUP
  
  • IS_VAR
  
  • IS_EXPR
  
  • IS_IMPLICIT
  
  • IS_DETAIL */
    qType?: 'NOT_PRESENT' | 'PRESENT' | 'IS_CYCLIC_GROUP' | 'IS_DRILL_GROUP' | 'IS_VAR' | 'IS_EXPR' | 'IS_IMPLICIT' | 'IS_DETAIL' | string;
    [key: string]: any;
};
export type FieldDescription = {
    /** If set to true, it means that the field has one and only one selection (not 0 and not more than 1).
  If this property is set to true, the field cannot be cleared anymore and no more selections can be performed in that field.
  The default value is false. */
    qAlwaysOneSelected?: boolean;
    /** If set to true a logical AND (instead of a logical OR) is used when making selections in a field.
  The default value is false. */
    qAndMode?: boolean;
    /** Static RAM memory used in bytes. */
    qByteSize?: number;
    /** Number of distinct field values. */
    qCardinal?: number;
    /** Field comment. */
    qComment?: string;
    /** If set to true, only distinct field values are shown.
  The default value is false. */
    qDistinctOnly?: boolean;
    qHasInfo_OBSOLETE?: boolean;
    /** Internal number of the field. */
    qInternalNumber?: number;
    /** If set to true, it means that the field is a field on the fly.
  The default value is false. */
    qIsDefinitionOnly?: boolean;
    /** If set to true, it means that the field is hidden.
  The default value is false. */
    qIsHidden?: boolean;
    /** If set to true, it means that the field is locked.
  The default value is false. */
    qIsLocked?: boolean;
    /** Is set to true if the value is a numeric.
  The default value is false. */
    qIsNumeric?: boolean;
    /** If set to true, it means that the field is a semantic.
  The default value is false. */
    qIsSemantic?: boolean;
    /** If set to true, it means that the field is a system field.
  The default value is false. */
    qIsSystem?: boolean;
    /** Name of the field. */
    qName?: string;
    qPossibleCount_OBSOLETE?: number;
    /** List of table names. */
    qSrcTables?: Array<string>;
    /** Gives information on a field. For example, it can return the type of the field.
  Examples: key, text, ASCII. */
    qTags?: Array<string>;
    /** Total number of field values. */
    qTotalCount?: number;
    [key: string]: any;
};
export type FieldInTableData = {
    /** Comment related to the field. */
    qComment?: string;
    /** List of the derived fields. */
    qDerivedFields?: Array<DerivedFieldsInTableData>;
    /** This property is set to true if the field contains some duplicate values. */
    qHasDuplicates?: boolean;
    /** This property is set to true if the field contains some Null values. */
    qHasNull?: boolean;
    qHasWild?: boolean;
    /** Number of records that have values (for example, not NULL) in the field as compared to the total number of records in the table. */
    qInformationDensity?: number;
    qIsFieldOnTheFly?: boolean;
    /** This property is set to true if the field contains a synthetic key. */
    qIsSynthetic?: boolean;
    /** Tells if the field is a key field.
  
  One of:
  
  • NOT_KEY
  
  • ANY_KEY
  
  • PRIMARY_KEY
  
  • PERFECT_KEY */
    qKeyType?: 'NOT_KEY' | 'ANY_KEY' | 'PRIMARY_KEY' | 'PERFECT_KEY' | string;
    /** Name of the field. */
    qName?: string;
    /** Is shown for fixed records.
  qOriginalFieldName and qName are identical if no field names are used in the file.
  qOriginalFieldName differs from qName if embedded file names are used in the file. */
    qOriginalFields?: Array<string>;
    qPresent?: boolean;
    qReadableName?: string;
    /** Number of distinct values in the field (in the current table) as compared to the total number of distinct values of this field (in all tables). */
    qSubsetRatio?: number;
    /** List of tags related to the field. */
    qTags?: Array<string>;
    /** Number of values that are non Null. */
    qnNonNulls?: number;
    qnPresentDistinctValues?: number;
    /** Number of rows in the field. */
    qnRows?: number;
    /** Number of distinct values in the field. */
    qnTotalDistinctValues?: number;
    [key: string]: any;
};
export type FieldInTableProfilingData = {
    /** Average of all numerical values. NaN otherwise. */
    qAverage?: number;
    /** Average string length of textual values. 0 otherwise. */
    qAvgStringLen?: number;
    /** Number of distinct numeric values */
    qDistinctNumericValues?: number;
    /** Number of distinct text values */
    qDistinctTextValues?: number;
    /** Number of distinct values */
    qDistinctValues?: number;
    /** Number of empty strings */
    qEmptyStrings?: number;
    /** List of tags related to the field. */
    qFieldTags?: Array<string>;
    /** For textual values the first sorted string. */
    qFirstSorted?: string;
    /** The .01, .05, .1, .25, .5, .75, .9, .95, .99 fractiles. Array of NaN otherwise. */
    qFractiles?: Array<number>;
    /** Frequency Distribution for numeric fields. */
    qFrequencyDistribution?: FrequencyDistributionData;
    /** Kurtosis of the numerical values. NaN otherwise. */
    qKurtosis?: number;
    /** For textual values the last sorted string. */
    qLastSorted?: string;
    /** Maximum value of numerical values. NaN otherwise. */
    qMax?: number;
    /** Maximum string length of textual values. 0 otherwise. */
    qMaxStringLen?: number;
    /** Median of all numerical values. NaN otherwise. */
    qMedian?: number;
    /** Minimum value of numerical values. NaN otherwise. */
    qMin?: number;
    /** Minimum string length of textual values. 0 otherwise. */
    qMinStringLen?: number;
    /** Three most frequent values and their frequencies */
    qMostFrequent?: Array<SymbolFrequency>;
    /** Name of the field. */
    qName?: string;
    /** Number of negative values */
    qNegValues?: number;
    /** Number of null values */
    qNullValues?: number;
    /** Sets the formatting of a field.
  The properties of qFieldAttributes and the formatting mechanism are described below.
  
   Formatting mechanism:
  The formatting mechanism depends on the type set in qType, as shown below:
  In case of inconsistencies between the type and the format pattern, the format pattern takes precedence over the type.
  
   Type is DATE, TIME, TIMESTAMP or INTERVAL:
  The following applies:
  
  • If a format pattern is defined in qFmt , the formatting is as defined in qFmt .
  
  • If qFmt is empty, the formatting is defined by the number interpretation variables included at the top of the script ( TimeFormat , DateFormat , TimeStampFormat ).
  
  • The properties qDec , qThou , qnDec , qUseThou are not used.
  
   Type is INTEGER:
  The following applies:
  
  • If a format pattern is defined in qFmt , the engine looks at the values set in qDec and qThou . If these properties are not defined, the formatting mechanism uses the number interpretation variables included at the top of the script ( DecimalSep and ThousandSep ).
  
  • If no format pattern is defined in qFmt , no formatting is applied. The properties qDec , qThou , qnDec , qUseThou and the number interpretation variables defined in the script are not used .
  
   Type is REAL:
  The following applies:
  
  • If a format pattern is defined in qFmt , the engine looks at the values set in qDec and qThou . If these properties are not defined, the engine uses the number interpretation variables included at the top of the script ( DecimalSep and ThousandSep ).
  
  • If no format pattern is defined in qFmt , and if the value is almost an integer value (for example, 14,000012), the value is formatted as an integer. The properties qDec , qThou , qnDec , qUseThou are not used.
  
  • If no format pattern is defined in qFmt , and if qnDec is defined and not 0, the property qDec is used. If qDec is not defined, the variable DecimalSep defined at the top of the script is used.
  
  • If no format pattern is defined in qFmt , and if qnDec is 0, the number of decimals is 14 and the property qDec is used. If qDec is not defined, the variable DecimalSep defined at the top of the script is used.
  
   Type is FIX:
  The following applies:
  
  • If a format pattern is defined in qFmt , the engine looks at the values set in qDec and qThou . If these properties are not defined, the engine uses the number interpretation variables included at the top of the script ( DecimalSep and ThousandSep ).
  
  • If no format pattern is defined in qFmt , the properties qDec and qnDec are used. If qDec is not defined, the variable DecimalSep defined at the top of the script is used.
  
   Type is MONEY:
  The following applies:
  
  • If a format pattern is defined in qFmt , the engine looks at the values set in qDec and qThou . If these properties are not defined, the engine uses the number interpretation variables included at the top of any script ( MoneyDecimalSep and MoneyThousandSep ).
  
  • If no format pattern is defined in qFmt , the engine uses the number interpretation variables included at the top of the script ( MoneyDecimalSep and MoneyThousandSep ).
  
   Type is ASCII:
  No formatting, qFmt is ignored. */
    qNumberFormat?: FieldAttributes;
    /** Number of numeric values */
    qNumericValues?: number;
    /** Number of positive values */
    qPosValues?: number;
    /** Skewness of the numerical values. NaN otherwise. */
    qSkewness?: number;
    /** Standard deviation of numerical values. NaN otherwise. */
    qStd?: number;
    /** Sum of all numerical values. NaN otherwise. */
    qSum?: number;
    /** Squared sum of all numerical values. NaN otherwise. */
    qSum2?: number;
    /** Sum of all characters in strings in the field */
    qSumStringLen?: number;
    /** Number of textual values */
    qTextValues?: number;
    /** Number of zero values for numerical values */
    qZeroValues?: number;
    [key: string]: any;
};
export type FieldList = {
    /** Array of items. */
    qItems?: Array<NxFieldDescription>;
    /** Should be set to create an object that is linked to another object. Enter the identifier of the linking object (i.e the object you want to link to).
  If you do not want to link your object, set this parameter to an empty string. */
    qExtendsId?: string;
    qFieldListDef?: FieldListQFieldListDef;
    qInfo?: NxInfo;
    /** Used to collect meta data.
  
  Properties
  Semantic type with an empty structure. */
    qMetaDef?: object;
    /** Name of the alternate state.
  Default is current selections _$_ . Default:$
  @defaultValue "$" */
    qStateName?: string;
    /** FieldList Object Default:FieldList
  @defaultValue "FieldList" */
    qType?: string;
    [key: string]: any;
};
export type FieldListDef = {
    /** Shows the fields defined on the fly if set to true.
  Default is false. */
    qShowDefinitionOnly?: boolean;
    /** Shows the fields and derived fields if set to true.
  Default is false. */
    qShowDerivedFields?: boolean;
    /** Shows the hidden fields if set to true.
  Default is false. */
    qShowHidden?: boolean;
    /** Shows the Direct Discovery measure fields if set to true.
  Default is false. */
    qShowImplicit?: boolean;
    /** Show the semantic fields if set to true.
  Default is false. */
    qShowSemantic?: boolean;
    /** Shows the tables and fields present in the data model viewer if set to true.
  Default is false. */
    qShowSrcTables?: boolean;
    /** Shows the system tables if set to true.
  Default is false. */
    qShowSystem?: boolean;
    [key: string]: any;
};
export type FieldOrColumn = {
    /** Name of the field or column to be matched. */
    qFieldName?: string;
    /** Name of the table to be matched on. This parameter is optional. If TableName is set, FieldName represent the Table column with that name. If TableName is not set, FieldName represents the the field with that name. */
    qTableName?: string;
    [key: string]: any;
};
export type FieldScores = {
    /** Cardinality of a column/field divided by the number of rows in the table.
  If the cardinal ratio is 1, it means that the column is a candidate/primary key. */
    qCardinalRatio?: number;
    /** Field name.
  One of the field names defined in qFieldPairName. */
    qFieldName?: string;
    qReadableName?: string;
    /** Number of matches between the two fields defined in qFieldPairName divided by the number of values in the field qFieldName .
  If 0, it means that there are no common values between the two fields defined in qFieldPairName . */
    qRowScore?: number;
    /** Number of distinct matches between the two fields defined in qFieldPairName divided by the number of distinct values in the field qFieldName .
  If 0, it means that there are no common values between the two fields defined in qFieldPairName . */
    qSymbolScore?: number;
    [key: string]: any;
};
export type FieldType = {
    [key: string]: any;
};
export type FieldValue = {
    /** Is set to true if the value is a numeric.
  This parameter is optional. Default is false. */
    qIsNumeric?: boolean;
    /** Numeric value of the field.
  This parameter is displayed if qIsNumeric is set to true.
  This parameter is optional. */
    qNumber?: number;
    /** Text related to the field value.
  This parameter is optional. */
    qText?: string;
    [key: string]: any;
};
export type FileDataFormat = {
    /** Character set used in the file. */
    qCodePage?: number;
    /** String that marks the beginning of the comment line.
  Example: “” or “//”:
  The engine ignores the commented lines during the data load.
  This property is only used for delimited files. */
    qComment?: string;
    /** Information about the delimiter.
  This property is used for delimited files. */
    qDelimiter?: DelimiterInfo;
    /** Positions of the field breaks in the table.
  This property is used for fixed record data files. */
    qFixedWidthDelimiters?: string;
    /** Size of the header.
  Example: If the header size is 2, the first two rows in the file are considered as header and not as data. The header can contain the field names. */
    qHeaderSize?: number;
    /** Is set to true, the end-of-file character is not taken into account during reload.
  This property is used for delimited files and fixed record data files. */
    qIgnoreEOF?: boolean;
    /** One of:
  
  • Embedded labels (field names are present in the file)
  
  • No labels
  
  • Explicit labels (for DIFfiles) */
    qLabel?: string;
    /** One of:
  
  • None (no quotes)
  
  • MSQ (Modern Style Quoting)
  
  • Standard (quotes " " or ' ' can be used, but only if they are the first and last non blank characters of a field value)
  
  This property is used for delimited files. */
    qQuote?: string;
    /** Record length.
  Each record (row of data) contains a number of columns with a fixed field size.
  This property is used for fixed record data files. */
    qRecordSize?: number;
    /** Number of spaces that one tab character represents in the table file.
  This property is used for fixed record data files. */
    qTabSize?: number;
    /** Type of the file.
  
  One of:
  
  • CSV or FILE_TYPE_CSV
  
  • FIX or FILE_TYPE_FIX
  
  • DIF or FILE_TYPE_DIF
  
  • EXCEL_BIFF or FILE_TYPE_EXCEL_BIFF
  
  • EXCEL_OOXML or FILE_TYPE_EXCEL_OOXML
  
  • HTML or FILE_TYPE_HTML
  
  • QVD or FILE_TYPE_QVD
  
  • XML or FILE_TYPE_XML
  
  • QVX or FILE_TYPE_QVX
  
  • JSON or FILE_TYPE_JSON
  
  • KML or FILE_TYPE_KML
  
  • PARQUET or FILE_TYPE_PARQUET */
    qType?: 'FILE_TYPE_CSV' | 'FILE_TYPE_FIX' | 'FILE_TYPE_DIF' | 'FILE_TYPE_EXCEL_BIFF' | 'FILE_TYPE_EXCEL_OOXML' | 'FILE_TYPE_HTML' | 'FILE_TYPE_QVD' | 'FILE_TYPE_XML' | 'FILE_TYPE_QVX' | 'FILE_TYPE_JSON' | 'FILE_TYPE_KML' | 'FILE_TYPE_PARQUET' | string;
    [key: string]: any;
};
export type FileType = {
    [key: string]: any;
};
export type FilterInfo = {
    /**
  One of:
  
  • NONE or FILTER_TYPE_NONE
  
  • RAW or FILTER_TYPE_RAW */
    qType?: 'FILTER_TYPE_NONE' | 'FILTER_TYPE_RAW' | string;
    qWherePredicate?: string;
    [key: string]: any;
};
export type FilterType = {
    [key: string]: any;
};
export type FolderItem = {
    /** Name of the folder item. */
    qName?: string;
    /** Type of the folder item.
  
  One of:
  
  • FOLDER or FOLDER_ITEM_FOLDER
  
  • FILE or FOLDER_ITEM_FILE
  
  • OTHER or FOLDER_ITEM_OTHER */
    qType?: 'FOLDER_ITEM_FOLDER' | 'FOLDER_ITEM_FILE' | 'FOLDER_ITEM_OTHER' | string;
    [key: string]: any;
};
export type FolderItemType = {
    [key: string]: any;
};
export type FrequencyDistributionData = {
    /** Bins edges. */
    qBinsEdges?: Array<number>;
    /** Bins frequencies. */
    qFrequencies?: Array<number>;
    /** Number of bins. */
    qNumberOfBins?: number;
    [key: string]: any;
};
export type Function = {
    /** Group of the script function.
  
  One of:
  
  • ALL or FUNC_GROUP_ALL
  
  • U or FUNC_GROUP_UNKNOWN
  
  • NONE or FUNC_GROUP_NONE
  
  • AGGR or FUNC_GROUP_AGGR
  
  • NUM or FUNC_GROUP_NUMERIC
  
  • RNG or FUNC_GROUP_RANGE
  
  • EXP or FUNC_GROUP_EXPONENTIAL_AND_LOGARITHMIC
  
  • TRIG or FUNC_GROUP_TRIGONOMETRIC_AND_HYPERBOLIC
  
  • FIN or FUNC_GROUP_FINANCIAL
  
  • MATH or FUNC_GROUP_MATH_CONSTANT_AND_PARAM_FREE
  
  • COUNT or FUNC_GROUP_COUNTER
  
  • STR or FUNC_GROUP_STRING
  
  • MAPP or FUNC_GROUP_MAPPING
  
  • RCRD or FUNC_GROUP_INTER_RECORD
  
  • CND or FUNC_GROUP_CONDITIONAL
  
  • LOG or FUNC_GROUP_LOGICAL
  
  • NULL or FUNC_GROUP_NULL
  
  • SYS or FUNC_GROUP_SYSTEM
  
  • FILE or FUNC_GROUP_FILE
  
  • TBL or FUNC_GROUP_TABLE
  
  • DATE or FUNC_GROUP_DATE_AND_TIME
  
  • NUMI or FUNC_GROUP_NUMBER_INTERPRET
  
  • FRMT or FUNC_GROUP_FORMATTING
  
  • CLR or FUNC_GROUP_COLOR
  
  • RNK or FUNC_GROUP_RANKING
  
  • GEO or FUNC_GROUP_GEO
  
  • EXT or FUNC_GROUP_EXTERNAL
  
  • PROB or FUNC_GROUP_PROBABILITY
  
  • ARRAY or FUNC_GROUP_ARRAY
  
  • LEG or FUNC_GROUP_LEGACY
  
  • DB or FUNC_GROUP_DB_NATIVE */
    qGroup?: 'FUNC_GROUP_ALL' | 'FUNC_GROUP_UNKNOWN' | 'FUNC_GROUP_NONE' | 'FUNC_GROUP_AGGR' | 'FUNC_GROUP_NUMERIC' | 'FUNC_GROUP_RANGE' | 'FUNC_GROUP_EXPONENTIAL_AND_LOGARITHMIC' | 'FUNC_GROUP_TRIGONOMETRIC_AND_HYPERBOLIC' | 'FUNC_GROUP_FINANCIAL' | 'FUNC_GROUP_MATH_CONSTANT_AND_PARAM_FREE' | 'FUNC_GROUP_COUNTER' | 'FUNC_GROUP_STRING' | 'FUNC_GROUP_MAPPING' | 'FUNC_GROUP_INTER_RECORD' | 'FUNC_GROUP_CONDITIONAL' | 'FUNC_GROUP_LOGICAL' | 'FUNC_GROUP_NULL' | 'FUNC_GROUP_SYSTEM' | 'FUNC_GROUP_FILE' | 'FUNC_GROUP_TABLE' | 'FUNC_GROUP_DATE_AND_TIME' | 'FUNC_GROUP_NUMBER_INTERPRET' | 'FUNC_GROUP_FORMATTING' | 'FUNC_GROUP_COLOR' | 'FUNC_GROUP_RANKING' | 'FUNC_GROUP_GEO' | 'FUNC_GROUP_EXTERNAL' | 'FUNC_GROUP_PROBABILITY' | 'FUNC_GROUP_ARRAY' | 'FUNC_GROUP_LEGACY' | 'FUNC_GROUP_DB_NATIVE' | string;
    /** Name of the script function. */
    qName?: string;
    /** Signature of the script function.
  Gives general information about the function. */
    qSignature?: string;
    [key: string]: any;
};
export type FunctionGroup = {
    [key: string]: any;
};
/**
  @param qGenericId - Object ID.
  @param qGenericType - The type of the object.
  @param qHandle - The handle used to connect to object.
  @param qType - The native type of the object.
  @param auth - Auth object used to make requests
 */
export declare class GenericBookmark {
    session: RpcSession;
    auth: Auth;
    qGenericId?: string;
    qGenericType?: string;
    qHandle?: number;
    qType?: string;
    [key: string]: any;
    constructor({ qGenericId, qGenericType, qHandle, qType, ...rest }: {
        qGenericId?: string;
        qGenericType?: string;
        qHandle?: number;
        qType?: string;
    }, session: RpcSession, auth?: Auth);
    /**    Retrieves the values of a field.
  
   Fieldvalue:
  | Name       | Description                                                                                  | Type    |
  |------------|----------------------------------------------------------------------------------------------|---------|
  | qText      | Text related to the field value.                                                             | String  |
  | qIsNumeric | Is set to true if the value is a numeric.  Default is false.                             | Boolean |
  | qNumber    | Numeric value of the field.  This parameter is displayed if _qIsNumeric_ is set to true. | Double  |
  
      @param qField - Name of the field.
      @param qGetExcludedValues - If set to true, only excluded values are returned.
      @param qDataPage - Range of returned values.
    */
    getFieldValues(qField: string, qGetExcludedValues: boolean, qDataPage: BookmarkFieldPage): Promise<Array<FieldValue>>;
    /**    Evaluates an object and displays its properties including the dynamic properties.
  If the member delta is set to true in the request object, only the delta is evaluated.
  
    */
    getLayout(): Promise<GenericBookmarkLayout>;
    /**    Applies a patch to the properties of an object. Allows an update to some of the properties. It should not be possible to patch "/qInfo/qId",
  and it will be forbidden in the near future.
  Applying a patch takes less time than resetting all the properties.
  
      @param qPatches - Array of patches.
    */
    applyPatches(qPatches: Array<NxPatch>): Promise<object>;
    /**    Sets some properties for a bookmark.
  
      @param qProp - Information about the bookmark.
    */
    setProperties({ creationDate, ...rest }?: GenericBookmarkProperties): Promise<object>;
    /**    Shows the properties of an object.
  If the member delta is set to true in the request object, only the delta is retrieved.
  The following is always returned in the output:
  
    */
    getProperties(): Promise<GenericBookmarkProperties>;
    /**    Returns:
  
  • The type of the object.
  
  • The identifier of the object.
  
    */
    getInfo(): Promise<NxInfo>;
    /**    Applies a bookmark.
  
  The operation is successful if qSuccess is set to true.
  
    */
    apply(): Promise<boolean>;
    /**    Applies a bookmark and verify result dataset against originally selected values.
  
  The operation is successful if qApplySuccess is set to true. qWarnings lists state and field with unmatching values
      @experimental
  
    */
    applyAndVerify(): Promise<BookmarkApplyAndVerifyResult>;
    /**    Publishes a bookmark.
  This operation is not applicable for Qlik Sense Desktop.
  
    */
    publish(): Promise<object>;
    /**    Unpublishes a bookmark.
  This operation is not applicable for Qlik Sense Desktop.
  
    */
    unPublish(): Promise<object>;
    /**    Adds the generic bookmark to the list of approved objects
  This operation is possible only in Qlik Sense Enterprise.
  
    */
    approve(): Promise<object>;
    /**    Removes the generic bookmark from the list of approved objects
  This operation is possible only in Qlik Sense Enterprise.
  
    */
    unApprove(): Promise<object>;
    on(event: EventTypes, listener: EventListener): void;
    once(event: EventTypes, listener: EventListener): void;
}
export type GenericBookmarkEntry = {
    /** Information about the bookmark. */
    qBookmark?: NxBookmark;
    /** Information about the Classic bookmark. */
    qClassicBookmark?: Bookmark;
    /** Information about the Classic bookmark metadata. */
    qClassicMetadata?: MetaData;
    /** Information about the properties of the bookmark. */
    qProperties?: GenericBookmarkProperties;
    [key: string]: any;
};
export type GenericBookmarkLayout = {
    /** Information about the bookmark. */
    qBookmark?: NxBookmark;
    /** Information about the field selections associated with the bookmark. */
    qFieldInfos?: Array<LayoutFieldInfo>;
    /** Information about the object. */
    qInfo?: NxInfo;
    /** Information on publishing and permissions. */
    qMeta?: GenericBookmarkPropertiesQMetaDef;
    /** Creation date of the bookmark. */
    creationDate?: string;
    /** If true all selected values will be stored distinct, i.e. searchstrings will not be kept. Default:false */
    qDistinctValues?: boolean;
    /** If true all variables will be stored in the bookmark. Default:false */
    qIncludeVariables?: boolean;
    /** Fields that have selections made to them. */
    selectionFields?: string;
    /** Sheet ID of the sheet that the bookmark applies to. */
    sheetId?: string;
    [key: string]: any;
};
export type GenericBookmarkProperties = {
    /** If true all selected values will be stored distinct, i.e. searchstrings will not be kept. */
    qDistinctValues?: boolean;
    /** If true all variables will be stored in the bookmark. */
    qIncludeVariables?: boolean;
    /** Information about the bookmark.
  This parameter is mandatory. */
    qInfo?: NxInfo;
    /** Definition of the dynamic properties. */
    qMetaDef?: GenericBookmarkPropertiesQMetaDef;
    /** Creation date of the bookmark.
  @defaultValue new Date().toISOString() */
    creationDate?: string;
    /** Fields that have selections made to them. */
    selectionFields?: string;
    /** Sheet ID of the sheet that the bookmark applies to. */
    sheetId?: string;
    [key: string]: any;
};
export type GenericConnectMachine = {
    [key: string]: any;
};
/**
  @param qGenericId - Object ID.
  @param qGenericType - The type of the object.
  @param qHandle - The handle used to connect to object.
  @param qType - The native type of the object.
  @param auth - Auth object used to make requests
 */
export declare class GenericDimension {
    session: RpcSession;
    auth: Auth;
    qGenericId?: string;
    qGenericType?: string;
    qHandle?: number;
    qType?: string;
    [key: string]: any;
    constructor({ qGenericId, qGenericType, qHandle, qType, ...rest }: {
        qGenericId?: string;
        qGenericType?: string;
        qHandle?: number;
        qType?: string;
    }, session: RpcSession, auth?: Auth);
    /**    Evaluates a dimension and displays its properties, including the dynamic properties.
  
    */
    getLayout(): Promise<GenericDimensionLayout>;
    /**    Applies a patch to the properties of an object. Allows an update to some of the properties. It should not be possible to patch "/qInfo/qId",
  and it will be forbidden in the near future.
  Applying a patch takes less time than resetting all the properties.
  
      @param qPatches - Array of patches.
    */
    applyPatches(qPatches: Array<NxPatch>): Promise<object>;
    /**    Sets some properties for a dimension.
  
      @param qProp - Information about the dimension.
    */
    setProperties({ qDim: { coloring: { baseColor: { index, ...restQDimColoringBaseColor }, ...restQDimColoring }, ...restQDim }, ...rest }?: GenericDimensionProperties): Promise<object>;
    /**    Shows the properties of an object.
  Returns the identifier and the definition of the dimension.
  If the member delta is set to true in the request object, only the delta is retrieved.
  
    */
    getProperties(): Promise<GenericDimensionProperties>;
    /**    Returns the type and identifier of the object.
  
    */
    getInfo(): Promise<NxInfo>;
    /**    Returns the definition of a dimension.
  
  The definition of the dimension is returned.
  
    */
    getDimension(): Promise<NxLibraryDimensionDef>;
    /**    Lists the linked objects to a generic object, a dimension or a measure.
  
    */
    getLinkedObjects(): Promise<Array<NxLinkedObjectInfo>>;
    /**    Publishes a dimension.
  This operation is not applicable for Qlik Sense Desktop.
  
    */
    publish(): Promise<object>;
    /**    Unpublishes a dimension.
  This operation is not applicable for Qlik Sense Desktop.
  
    */
    unPublish(): Promise<object>;
    /**    Adds the generic dimension to the list of approved objects
  This operation is possible only in Qlik Sense Enterprise.
  
    */
    approve(): Promise<object>;
    /**    Removes the generic dimension from the list of approved objects
  This operation is possible only in Qlik Sense Enterprise.
  
    */
    unApprove(): Promise<object>;
    on(event: EventTypes, listener: EventListener): void;
    once(event: EventTypes, listener: EventListener): void;
}
export type GenericDimensionInfo = {
    /** If set to true a logical AND (instead of a logical OR) is used when making selections in a field.
  The default value is false. */
    qAndMode?: boolean;
    /** Length of the longest value in the field. */
    qApprMaxGlyphCount?: number;
    /** Number of distinct field values */
    qCardinal?: number;
    /** If set to true, it means that the field is a semantic. */
    qIsSemantic?: boolean;
    /** Gives information on a field. For example, it can return the type of the field.
  Examples: key, text, ASCII */
    qTags?: Array<string>;
    [key: string]: any;
};
export type GenericDimensionLayout = {
    /** Name and label of the dimension, information about grouping. */
    qDim?: NxLibraryDimension;
    /** Cardinal and tags related to the dimension.
  Length of the longest value in the field. */
    qDimInfos?: Array<GenericDimensionInfo>;
    /** Identifier and type of the dimension. */
    qInfo?: NxInfo;
    /** Information about publishing and permissions. */
    qMeta?: GenericDimensionPropertiesQMetaDef;
    [key: string]: any;
};
export type GenericDimensionProperties = {
    /** Definition of the dimension.
  This parameter is mandatory. */
    qDim?: NxLibraryDimensionDef;
    /** Identifier and type of the dimension.
  This parameter is mandatory. */
    qInfo?: NxInfo;
    /** Definition of the dynamic properties. */
    qMetaDef?: GenericDimensionPropertiesQMetaDef;
    [key: string]: any;
};
/**
  @param qGenericId - Object ID.
  @param qGenericType - The type of the object.
  @param qHandle - The handle used to connect to object.
  @param qType - The native type of the object.
  @param auth - Auth object used to make requests
 */
export declare class GenericMeasure {
    session: RpcSession;
    auth: Auth;
    qGenericId?: string;
    qGenericType?: string;
    qHandle?: number;
    qType?: string;
    [key: string]: any;
    constructor({ qGenericId, qGenericType, qHandle, qType, ...rest }: {
        qGenericId?: string;
        qGenericType?: string;
        qHandle?: number;
        qType?: string;
    }, session: RpcSession, auth?: Auth);
    /**    Evaluates a measure and displays its properties, including the dynamic properties.
  
    */
    getLayout(): Promise<GenericMeasureLayout>;
    /**    Applies a patch to the properties of an object. Allows an update to some of the properties. It should not be possible to patch "/qInfo/qId",
  and it will be forbidden in the near future.
  Applying a patch takes less time than resetting all the properties.
  
      @param qPatches - Array of patches.
    */
    applyPatches(qPatches: Array<NxPatch>): Promise<object>;
    /**    Sets some properties for a measure.
  
      @param qProp - Information about the measure.
    */
    setProperties({ qMeasure: { qNumFormat: { qType, qnDec, ...restQMeasureQNumFormat }, coloring: { baseColor: { index, ...restQMeasureColoringBaseColor }, gradient: { limitType, ...restQMeasureColoringGradient }, ...restQMeasureColoring }, ...restQMeasure }, ...rest }?: GenericMeasureProperties): Promise<object>;
    /**    Shows the properties of an object.
  Returns the identifier and the definition of the measure.
  If the member delta is set to true in the request object, only the delta is retrieved.
  The following is always returned in the output:
  
    */
    getProperties(): Promise<GenericMeasureProperties>;
    /**    Returns the type and identifier of the object.
  
    */
    getInfo(): Promise<NxInfo>;
    /**    Returns the definition of a measure.
  
    */
    getMeasure(): Promise<NxLibraryMeasureDef>;
    /**    Lists the linked objects to a generic object, a dimension or a measure.
  
    */
    getLinkedObjects(): Promise<Array<NxLinkedObjectInfo>>;
    /**    Publishes a measure.
  This operation is not applicable for Qlik Sense Desktop.
  
    */
    publish(): Promise<object>;
    /**    Unpublishes a measure.
  This operation is not applicable for Qlik Sense Desktop.
  
    */
    unPublish(): Promise<object>;
    /**    Adds the generic measure to the list of approved objects
  This operation is possible only in Qlik Sense Enterprise.
  
    */
    approve(): Promise<object>;
    /**    Removes the generic measure from the list of approved objects
  This operation is possible only in Qlik Sense Enterprise.
  
    */
    unApprove(): Promise<object>;
    on(event: EventTypes, listener: EventListener): void;
    once(event: EventTypes, listener: EventListener): void;
}
export type GenericMeasureLayout = {
    /** Information about the object. */
    qInfo?: NxInfo;
    /** Information about the measure. */
    qMeasure?: NxLibraryMeasure;
    /** Information on publishing and permissions. */
    qMeta?: GenericMeasurePropertiesQMetaDef;
    [key: string]: any;
};
export type GenericMeasureProperties = {
    /** Information about the measure.
  This parameter is mandatory. */
    qInfo?: NxInfo;
    /** Definition of the measure.
  This parameter is mandatory. */
    qMeasure?: NxLibraryMeasureDef;
    /** Definition of the dynamic properties. */
    qMetaDef?: GenericMeasurePropertiesQMetaDef;
    [key: string]: any;
};
/**
  @param qGenericId - Object ID.
  @param qGenericType - The type of the object.
  @param qHandle - The handle used to connect to object.
  @param qType - The native type of the object.
  @param auth - Auth object used to make requests
 */
export declare class GenericObject {
    session: RpcSession;
    auth: Auth;
    qGenericId?: string;
    qGenericType?: string;
    qHandle?: number;
    qType?: string;
    [key: string]: any;
    constructor({ qGenericId, qGenericType, qHandle, qType, ...rest }: {
        qGenericId?: string;
        qGenericType?: string;
        qHandle?: number;
        qType?: string;
    }, session: RpcSession, auth?: Auth);
    /**    Evaluates an object and displays its properties including the dynamic properties.
  If the member delta is set to true in the request object, only the delta is evaluated. A GetLayout call on a generic object, returns up to one level down in the hierarchy.
  
   Example::
  A is a generic object and is the parent of the objects B and C. B is the parent of the objects D and E.
  
  A GetLayout call on A returns information on the objects A, B and C.
  A GetLayout call on B returns information on the objects B, D and E.
  A  GetLayout call on C returns information on the object C.
  
  In addition to the parameters displayed above, the GetLayout method can return other properties according to what is defined in the generic object.
  For example, if qHyperCubeDef is defined in the generic object, the GetLayout method returns the properties described in HyperCube.
  
    */
    getLayout(): Promise<GenericObjectLayout>;
    /**    Retrieves the values of a list object.
  A data set is returned.
  
      @param qPath - Path to the definition of the object to be selected.
  For example, /qListObjectDef .
      @param qPages - Array of pages you are interested in.
    */
    getListObjectData(qPath: string, qPages: Array<NxPage>): Promise<Array<NxDataPage>>;
    /**    Retrieves the calculated data for a chart, a table, or a scatter plot. It is possible to retrieve specific pages of data.
  This method works for a hypercube in DATA_MODE_STRAIGHT.
  A data set is returned.
  
      @param qPath - Path to the definition of the object to be selected.
  For example, /qHyperCubeDef .
      @param qPages - Array of pages to retrieve.
    */
    getHyperCubeData(qPath: string, qPages: Array<NxPage>): Promise<Array<NxDataPage>>;
    /**    Reduces the data of a bar chart, a line chart or a scatter plot chart and retrieves them.
  The reduction is dependent on the zoom factor (parameter qZoomFactor ) and on the reduction mode.
  This method can be used to create mini charts.
  
   Bar chart or line chart data reduction:
  For the data reduction to happen, the following conditions must be fulfilled:
  
  • The values cannot fit in the defined page (parameter qPages ).
  
  • The zoom factor is not 0 (parameter qZoomFactor ).
  
  • The reduction mode must be set to D1.
  
  The reduction algorithm keeps the shape of the visualizations and works whatever the number of dimensions in the chart. The global profile of the chart is reduced, and not only a specific dimension. A visualization that has been reduced contains fewer values but its shape is the same. Data of all types can be reduced. Therefore it is hard to relate the values before and after a reduction especially when reducing string values.
  
   Example:
  If you have a chart with 1 million data, and you have set the zoom factor to 5, the GetHyperCubeReducedData method reduces the chart and retrieves 200 000 data.
  
   Scatter plot chart data reduction:
  The reduction mode must be set to C.
  This reduction mechanism follows the 2D K-Means algorithm. Data are reduced into a number of clusters. Each data is assigned to a specific centroid.
  The number of centroids can be defined in the parameter qZoomFactor.
  
   Scatter plot chart resolution reduction:
  The reduction mode must be set to S.
  The resolution is reduced according to the zoom factor (parameter qZoomFactor ).
  
   Example:
  If you have a scatter plot chart and the zoom factor is set to 2, the scatter plot chart resolution is reduced by 4.
  
      @param qPath - Path to the definition of the object to be selected.
  For example, /qHyperCubeDef .
      @param qPages - Array of pages.
      @param qZoomFactor - Defines the zoom factor.
  If set to -1, the engine decides of the zoom factor.
  
  • If the reduction mode is D1 or S , the zoom factor is 2ⁿ. If the zoom factor is 5, the data are reduced by a factor 32.
  
  • If the reduction mode is C , the zoom factor defines the number of centroids.
      @param qReductionMode - Defines the reduction mode.
  
  One of:
  
  • N or DATA_REDUCTION_NONE
  
  • D1 or DATA_REDUCTION_ONEDIM
  
  • S or DATA_REDUCTION_SCATTERED
  
  • C or DATA_REDUCTION_CLUSTERED
  
  • ST or DATA_REDUCTION_STACKED
    */
    getHyperCubeReducedData(qPath: string, qPages: Array<NxPage>, qZoomFactor: number, qReductionMode: string): Promise<Array<NxDataPage>>;
    /**    Retrieves the values of a pivot table. It is possible to retrieve specific pages of data.
  This method works for a hypercube in DATA_MODE_PIVOT.
  
      @param qPath - Path to the definition of the object to be selected.
  For example, /qHyperCubeDef .
      @param qPages - Array of pages to retrieve.
    */
    getHyperCubePivotData(qPath: string, qPages: Array<NxPage>): Promise<Array<NxPivotPage>>;
    /**    Retrieves the values of a stacked pivot table. It is possible to retrieve specific pages of data.
  This method works for a hypercube in DATA_MODE_PIVOT_STACK.
  
      @param qPath - Path to the definition of the object to be selected.
  For example, /qHyperCubeDef .
      @param qPages - Array of pages to retrieve.
      @param qMaxNbrCells - Maximum number of cells at outer level.
  The default value is 10 000.
    */
    getHyperCubeStackData(qPath: string, qPages: Array<NxPage>, qMaxNbrCells?: number): Promise<Array<NxStackPage>>;
    /**    Retrieves and packs compressed hypercube and axis data. It is possible to retrieve specific pages of data.
  Binning is done on the time stamp data as well as the date. This means that you can zoom in to a level of granularity as low as seconds.
  
      @param qPath - Path to the definition of the object.
  For example, /qHyperCubeDef .
      @param qReverseSort - If set to true the returned data pages are reverse sorted.
  Optional.
      @param qOptions - Defines the data to return.
    */
    getHyperCubeContinuousData(qPath: string, qReverseSort?: boolean, { qMaxNumberLines, ...rest }?: NxContinuousDataOptions): Promise<GetHyperCubeContinuousDataReturn>;
    /**    Retrieves data for nodes in a tree structure. It is possible to retrieve specific pages of data.
  This method works for a treedata object or a hypercube in DATA_MODE_TREE.
  
      @param qPath - Path to the definition of the object to be selected.
      @param qNodeOptions - Specifies all the paging filters needed to define the tree to be fetched. If left out the complete tree is returned.
    */
    getHyperCubeTreeData(qPath: string, { qTreeLevels: { qDepth, ...restQTreeLevels }, ...rest }?: NxTreeDataOption): Promise<Array<NxTreeNode>>;
    /**    This method supports data binning.
  When a generic object with two or three measures and one dimension contains a lot of data, groups of points (for example, cells) can be rendered instead of points.
  A zone of interest can be refined (for zooming in) up to a maximum refinement level (set in the qQueryLevel parameter) or coarsened (for zoom out).
  The grid of cells is adaptive (not static), meaning that it adapts to different length scales.
  The GetHyperCubeBinnedData method gives information about the adaptive grid and the values of the generic object.
  The number of points in a cell and the coordinates (expressed in the measure range) of each cell are returned.
  Dimension values and measure values are rendered at point level (highest detailed level).
  The generic object should contain two or three measures and one dimension. When the refinement is high, the first two measures are represented on the x-axis and on the y-axis, while the third measure is visualized as color or point size.
  
   Adaptive Grid:
  More details about the properties of the adaptive grid are given in this paragraph.
  When the refinement is not the highest (cells are rendered), information about the adaptive grid is returned through several arrays.
  The first array contains the following properties:
  | Name        | Description                                       | Type                                                                                                                                                                                                             |
  |-------------|---------------------------------------------------|------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
  | qNum        | Maximum number of points that a cell can contain. | String                                                                                                                                                                                                           |
  | qElemNumber | Is set to 0.                                      | Boolean                                                                                                                                                                                                          |
  | qState      | The default value is L.                           | One of:*   L for Locked*   S for Selected*   O for Optional*   D for Deselected*   A for Alternative*   X for eXcluded*   XS for eXcluded Selected*   XL for eXcluded Locked |
  
  The next arrays give the coordinates of each cell in the page.
  Each array contains the following properties:
  | Name        | Description                                                                                                                                                                                                                                                                                                     | Type                                                                                                                                                                                                             |
  |-------------|-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
  | qText       | Coordinates of a cell in the measure range.  “qText”: “\[\[, , , \], \[, , , \], .... \[, , , \]\]  Where:  , _,  and  are the coordinates of the cell in the measure range. | String                                                                                                                                                                                                           |
  | qNum        | Number of points in the cell.                                                                                                                                                                                                                                                                                   | Double precision floating point                                                                                                                                                                                  |
  | qElemNumber | Unique identifier for each cell, calculated by the engine during the construction of the grid.  This element number is not stored in the database and can have a positive or a negative value.                                                                                                              | Integer                                                                                                                                                                                                          |
  | qState      | The default value is L.                                                                                                                                                                                                                                                                                         | One of:*   L for Locked*   S for Selected*   O for Optional*   D for Deselected*   A for Alternative*   X for eXcluded*   XS for eXcluded Selected*   XL for eXcluded Locked |
  
  Cells are represented as rectangles.
  
   Dimension values and measures values:
  More details about the properties, when dimension and measure values are returned, are given in this paragraph.
  When the refinement is high, points are rendered (not cells) and dimension and measure values for each cell are returned.
  The first array is empty because no information on the adaptive grid is needed.
  The next arrays bring information about the dimension and the measure values.
  | Name        | Description                                                                                                                                                                                        | Type                                                                                                                                                                                                             |
  |-------------|----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
  | qText       | Text value of the dimension or the measure.                                                                                                                                                        | String                                                                                                                                                                                                           |
  | qNum        | Numerical value of the dimension or the measure.  Is set to 0 if the value is only text.                                                                                                       | Double precision floating point                                                                                                                                                                                  |
  | qElemNumber | Unique identifier for each cell, calculated by the engine during the construction of the grid.  This element number is not stored in the database and can have a positive or a negative value. | Integer                                                                                                                                                                                                          |
  | qState      | The default value is L.                                                                                                                                                                            | One of:*   L for Locked*   S for Selected*   O for Optional*   D for Deselected*   A for Alternative*   X for eXcluded*   XS for eXcluded Selected*   XL for eXcluded Locked |
  
      @param qPath - Path to the definition of the object.
  For example, /qHyperCubeDef .
      @param qPages - Array of pages to retrieve.
  Since the generic object contains two measures and one dimension, qWidth should be set to 3.
  If the value of a measure is Null, the value cannot be rendered. Therefore, the number of elements rendered in a page can be less than the number defined in the property qHeight .
      @param qViewport - Defines the canvas and the zoom level.
  This parameter is not yet used and is optional.
      @param qDataRanges - Range of the data to render.
  This range applies to the measure values.
  The lowest and highest values of a measure can be retrieved by using the GetLayout method (in /qHyperCube/qMeasureInfo ).
      @param qMaxNbrCells - Maximum number of cells in the grid.
      @param qQueryLevel - Level of details. The higher the level, the more detailed information you get (zoom-in).
  When the number of points to render falls below a certain threshold, the values are no longer rendered as cells but as points.
  The query level should be no greater than 20.
      @param qBinningMethod - Selects the algorithm.
  The default value is 0.
  One of:
  
  • 0: Adaptive grid
  
  • 1: Hexagonal grid
  
  • 2: Uniform grid
    */
    getHyperCubeBinnedData(qPath: string, qPages: Array<NxPage>, qViewport: NxViewPort, qDataRanges: Array<NxDataAreaPage>, qMaxNbrCells: number, qQueryLevel: number, qBinningMethod: number): Promise<Array<NxDataPage>>;
    /**    Applies a patch to the properties of an object. Allows an update to some of the properties.
  It is possible to apply a patch to the properties of a generic object, that is not persistent. Such a patch is called a soft patch.
  In that case, the result of the operation on the properties (add, remove or delete) is not shown when doing GetProperties , and only a GetLayout call shows the result of the operation.
  Properties that are not persistent are called soft properties. Once the engine session is over, soft properties are cleared. It should not be possible to patch "/qInfo/qId",
  and it will be forbidden in the near future.
  Soft properties apply only to generic objects.
  
      @param qPatches - Array of patches.
      @param qSoftPatch - If set to true, it means that the properties to be applied are not persistent. The patch is a soft patch.
  The default value is false.
    */
    applyPatches(qPatches: Array<NxPatch>, qSoftPatch?: boolean): Promise<object>;
    /**    Clears the soft properties of a generic object.
  For more information on how to add soft properties to a generic object, see ApplyPatches Method.
  
    */
    clearSoftPatches(): Promise<object>;
    /**    Sets some properties for a generic object.
  The properties depends on the generic object type, see properties genericobject-property.html.
  
      @param qProp - Information about the generic object.
    */
    setProperties({ qBookmarkListDef: { qType, ...restQBookmarkListDef }, qHyperCubeDef: { qMaxStackedCells, qMode, qNoOfLeftDims, qPseudoDimPos, ...restQHyperCubeDef }, qListObjectDef: { qFrequencyMode, ...restQListObjectDef }, qNxLibraryDimensionDef: { coloring: { baseColor: { index, ...restQNxLibraryDimensionDefColoringBaseColor }, ...restQNxLibraryDimensionDefColoring }, ...restQNxLibraryDimensionDef }, qNxLibraryMeasureDef: { qNumFormat: { qType: qType2, qnDec, ...restQNxLibraryMeasureDefQNumFormat }, coloring: { baseColor: { index: index2, ...restQNxLibraryMeasureDefColoringBaseColor }, gradient: { limitType, ...restQNxLibraryMeasureDefColoringGradient }, ...restQNxLibraryMeasureDefColoring }, ...restQNxLibraryMeasureDef }, qVariableListDef: { qData: { tags, ...restQVariableListDefQData }, qShowConfig, qShowReserved, qType: qType3, ...restQVariableListDef }, ...rest }?: GenericObjectProperties): Promise<object>;
    /**    Returns the identifier, the type and the properties of the object.
  Because it is not mandatory to set all properties when you define an object, the GetProperties method may show properties that were not set. In that case, default values are given.
  If the object contains some soft properties, the soft properties are not returned by the GetProperties method. Use the GetEffectiveProperties method instead.
  If the object is linked to another object, the properties of the linking object are not returned by the GetProperties method. Use the GetEffectiveProperties method instead.
  The properties depends on the generic object type, see properties genericobject-layout.html.
  If the member delta is set to true in the request object, only the delta is retrieved.
  
    */
    getProperties(): Promise<GenericObjectProperties>;
    /**    Returns the identifier, the type and the properties of the object.
  If the object contains some soft properties, the soft properties are returned.
  If the object is linked to another object, the properties of the linking object are returned.
  
    */
    getEffectiveProperties(): Promise<GenericObjectProperties>;
    /**    Sets the properties of:
  
  • A generic object.
  
  • The children of the generic object.
  
  • The bookmarks/embedded snapshots of the generic object.
  
  If the SetFullPropertyTree method is asked to set some properties to a child that does not exist, it creates the child.  The type of an object cannot be updated.
  
      @param qPropEntry - Information about the generic object entry.
    */
    setFullPropertyTree({ qEmbeddedSnapshotRef: { qClassicBookmark: { qApplyInputFieldValues, qIncludeSelectionState, qShow: { qAlways, ...restQEmbeddedSnapshotRefQClassicBookmarkQShow }, ...restQEmbeddedSnapshotRefQClassicBookmark }, qProperties: { creationDate, ...restQEmbeddedSnapshotRefQProperties }, ...restQEmbeddedSnapshotRef }, qProperty: { qBookmarkListDef: { qType, ...restQPropertyQBookmarkListDef }, qHyperCubeDef: { qMaxStackedCells, qMode, qNoOfLeftDims, qPseudoDimPos, ...restQPropertyQHyperCubeDef }, qListObjectDef: { qFrequencyMode, ...restQPropertyQListObjectDef }, qNxLibraryDimensionDef: { coloring: { baseColor: { index, ...restQPropertyQNxLibraryDimensionDefColoringBaseColor }, ...restQPropertyQNxLibraryDimensionDefColoring }, ...restQPropertyQNxLibraryDimensionDef }, qNxLibraryMeasureDef: { qNumFormat: { qType: qType2, qnDec, ...restQPropertyQNxLibraryMeasureDefQNumFormat }, coloring: { baseColor: { index: index2, ...restQPropertyQNxLibraryMeasureDefColoringBaseColor }, gradient: { limitType, ...restQPropertyQNxLibraryMeasureDefColoringGradient }, ...restQPropertyQNxLibraryMeasureDefColoring }, ...restQPropertyQNxLibraryMeasureDef }, qVariableListDef: { qData: { tags, ...restQPropertyQVariableListDefQData }, qShowConfig, qShowReserved, qType: qType3, ...restQPropertyQVariableListDef }, ...restQProperty }, ...rest }?: GenericObjectEntry): Promise<object>;
    /**    Gets the properties of:
  
  • A generic object.
  
  • The children of the generic object.
  
  • The bookmarks/embedded snapshots of the generic object.
  
    */
    getFullPropertyTree(): Promise<GenericObjectEntry>;
    /**    Returns the type and identifier of the object.
  
    */
    getInfo(): Promise<NxInfo>;
    /**    Clears the selections in a dimension of a visualization.
  
      @param qPath - Path to the definition of the visualization.
  For example, /qListObjectDef .
      @param qColIndices - Array of dimension numbers or indexes. The selections are cleared in the specified dimensions.
  Dimension numbers/indexes start from 0.
  If this parameter is not set, all dimensions are cleared.
    */
    clearSelections(qPath: string, qColIndices?: Array<number>): Promise<object>;
    /**    Exports the data of any generic object to an Excel file or a open XML file. If the object contains excluded values, those excluded values are not exported.
  This API has limited functionality and will not support CSV export from all types of objects. Consider using Excel export instead. Treemap and bar chart are not supported.
  ExportData method is not supported in SaaS Editions of Qlik Sense.
  
   Default limitations in number of rows and columns:
  The default maximum number of rows and columns in the Excel export file is:
  
  • 1048566 rows per sheet. For pivot tables: 1048566 column dimensions. 10 rows can be added after the export.
  
  • 16384 columns per sheet. If the number of columns exceeds the limit, the exported file is truncated and a warning message is sent.
  
   Default limitation in number of columns:
  The default maximum number of columns in the export file is:
  
  • 1000 to export to a CSV file
  
  The exported file is truncated if the number of cells exceeds the limit. A warning message with code 1000 is sent.
  There is an option to export only the possible values ( qExportState is P).
  
   Default limitation in size:
  If the exported file is larger than the maximum value, then an out-of-memory error with code 13000 is returned.
  
  Exported files are temporary and are available only for a certain time span and only to the user who created them.
  
      @param qFileType - Type of the file to export.
  
  One of:
  
  • CSV_C or EXPORT_CSV_C
  
  • CSV_T or EXPORT_CSV_T
  
  • OOXML or EXPORT_OOXML
  
  • PARQUET or EXPORT_PARQUET
      @param qPath - Path to the definition of the object to be exported.
  For example, /qHyperCubeDef .
  This parameter is mandatory if the file type is CSV_C or CSV_T .
      @param qFileName - Name of the exported file after download from browser.
  This parameter is optional and only used in Qlik Sense Desktop.
      @param qExportState - Defines the values to be exported.
  The default value is A.
  
  One of:
  
  • P or EXPORT_POSSIBLE
  
  • A or EXPORT_ALL
      @param qServeOnce - If the exported file should be served only once
  This parameter is optional and only used in Qlik Sense Enterprise (Windows)
  Default value: false
    */
    exportData(qFileType: string, qPath?: string, qFileName?: string, qExportState?: string, qServeOnce?: boolean): Promise<ExportDataReturn>;
    /**    Makes single selections in dimensions.
  This method applies to list objects only.
  The member Change returns the handles of the objects that are updated following the selections.
  qSuccess is set to true if the selections are successful and is set to false in the following cases:
  
  • The object contains invalid fields (fields that are not in the data model).
  
  • The selection applies to a locked field.
  
  • A range selection is performed and the parameter OneAndOnlyOne is set to true in the definition of the object.
  
      @param qPath - Path to the definition of the object to be selected.
  For example, /qListObjectDef .
      @param qValues - Element numbers to select.
  You can select multiple values; the separator is the comma.
      @param qToggleMode - Set to true to toggle.
      @param qSoftLock - Set to true to ignore locks; in that case, locked fields can be selected.
  The default value is false.
    */
    selectListObjectValues(qPath: string, qValues: Array<number>, qToggleMode: boolean, qSoftLock?: boolean): Promise<boolean>;
    /**    Selects all possible values of a list object.
  This method applies to list objects (objects with one dimension).
  The member Change returns the handles of the objects that are updated following the selections.
  qSuccess is set to true if the selections are successful and is set to false in the following cases:
  
  • The object contains invalid fields (fields that are not in the data model).
  
  • The selection applies to a locked field.
  
  • A range selection is performed and the parameter OneAndOnlyOne is set to true in the definition of the object.
  
      @param qPath - Path to the definition of the object to be selected.
  For example, /qListObjectDef .
      @param qSoftLock - Set to true to ignore locks; in that case, locked fields can be selected.
  The default value is false.
    */
    selectListObjectPossible(qPath: string, qSoftLock?: boolean): Promise<boolean>;
    /**    Inverts the current selections in a specific field.
  This method applies to list objects (objects with one dimension).
  The member Change returns the handles of the objects that are updated following the selections.
  qSuccess is set to true if the selections are successful and is set to false in the following cases:
  
  • The object contains some invalid fields (fields that are not in the data model).
  
  • The selection applies to a locked field.
  
  • A range selection is performed and the parameter OneAndOnlyOne is set to true in the definition of the object.
  
      @param qPath - Path to the definition of the object to be selected.
  For example, /qListObjectDef .
      @param qSoftLock - Set to true to ignore locks; in that case, locked fields can be selected.
  The default value is false.
    */
    selectListObjectExcluded(qPath: string, qSoftLock?: boolean): Promise<boolean>;
    /**    Selects all alternative values in a specific field.
  This method applies to list objects (objects with one dimension). If a field contains at least one selected value, the values that are neither selected nor excluded are alternatives values.
  The member Change returns the handles of the objects that are updated following the selections.
  qSuccess is set to true if the selections are successful and is set to false in the following cases:
  
  • The object contains some invalid fields (fields that are not in the data model).
  
  • The selection applies to a locked field.
  
  • A range selection is performed and the parameter OneAndOnlyOne is set to true in the definition of the object.
  
      @param qPath - Path to the definition of the object to be selected.
  For example, /qListObjectDef .
      @param qSoftLock - Set to true to ignore locks; in that case, locked fields can be selected.
  The default value is false.
    */
    selectListObjectAlternative(qPath: string, qSoftLock?: boolean): Promise<boolean>;
    /**    Selects all values of a field.
  This method applies to list objects (objects with one dimension).
  The member Change returns the handles of the objects that are updated following the selections.
  qSuccess is set to true if the selections are successful and is set to false in the following cases:
  
  • The object contains some invalid fields (fields that are not in the data model).
  
  • The selection applies to a locked field.
  
  • A range selection is performed and the parameter OneAndOnlyOne is set to true in the definition of the object.
  
      @param qPath - Path to the definition of the object to be selected.
  For example, /qListObjectDef .
      @param qSoftLock - Set to true to ignore locks; in that case, locked fields can be selected.
  The default value is false.
    */
    selectListObjectAll(qPath: string, qSoftLock?: boolean): Promise<boolean>;
    /**    The following is returned in the output:
  The operation is successful if qSuccess is set to true.
  
      @param qPath - Path to the definition of the object.
  For example, /qHyperCubeDef .
      @param qRanges - Selects ranges in a hypercube in (Ranges[N].Min,Ranges[N].Max) intervals.
  If either Ranges[N].MinInclEq or Ranges[N].MaxInclEq, or both flags are set to true then Min and Max values will be selected.
      @param qSoftLock - Set to true to ignore locks; in that case, locked fields can be selected.
  The default value is false.
    */
    selectListObjectContinuousRange(qPath: string, qRanges: Array<Range>, qSoftLock?: boolean): Promise<boolean>;
    /**    Searches for a string in a list object.
  This method applies to list objects (objects with one dimension). The search results can be displayed using the GetLayout Method.
  
  The operation is successful if qSuccess is set to true.
  
      @param qPath - Path to the definition of the list object.
  For example, /qListObjectDef .
      @param qMatch - Search string.
  Wild card characters are allowed. The search is not case sensitive.
  Examples:
  
  • `P*U*`: retrieves only values that start with P and contain U
  
  • `P U S`: retrieves values that start with P, U or S
    */
    searchListObjectFor(qPath: string, qMatch: string): Promise<boolean>;
    /**    Aborts the results of a search in a list object.
  This method applies to list objects (objects with one dimension).  After an abort on a list object search, the GetLayout Method does not return any more search results but it does return the values in the field.
  
      @param qPath - Path to the definition of the list object.
  For example, /qListObjectDef .
    */
    abortListObjectSearch(qPath: string): Promise<object>;
    /**    Accept the results of a search in a list object. The search results become selected in the field.
  This method applies to list objects (objects with one dimension). The search results are displayed using the GetLayout Method.
  
      @param qPath - Path to the definition of the list object.
  For example, /qListObjectDef .
      @param qToggleMode - Set to true to keep any selections present in the list object.
  If this parameter is set to false, selections made before accepting the list object search become alternative.
      @param qSoftLock - Set to true to ignore locks; in that case, locked fields can be selected.
  The default value is false.
    */
    acceptListObjectSearch(qPath: string, qToggleMode: boolean, qSoftLock?: boolean): Promise<object>;
    /**    Expands the left dimensions of a pivot table. This method applies only to pivot tables that are not always fully expanded.
  In the definition of the hypercube (in HyperCubeDef ), the parameter qAlwaysFullyExpanded must be set to false.
  
      @param qPath - Path to the definition of the object to be expanded.
  For example, /qHyperCubeDef .
      @param qRow - Row index in the data matrix to expand.
  Indexing starts from 0.
      @param qCol - Column index. The index is based on the left dimension indexes.
  Indexing starts from 0.
      @param qAll - If set to true, it expands all cells.
  Parameters qRow and qCol are not used if qAll is set to true, but they need to be set (for example to 0).
    */
    expandLeft(qPath: string, qRow: number, qCol: number, qAll: boolean): Promise<object>;
    /**    Expands the top dimensions of a pivot table. This method applies only to pivot tables that are not always fully expanded.
  In the definition of the hypercube (in HyperCubeDef ), the parameter qAlwaysFullyExpanded must be set to false.
  
      @param qPath - Path to the definition of the object to be expanded.
  For example, /qHyperCubeDef .
      @param qRow - Row index. The index is based on the top dimension indexes.
  Indexing starts from 0.
      @param qCol - Column index in the data matrix.
  Indexing starts from 0.
      @param qAll - If set to true, it expands all cells.
  Parameters qRow and qCol are not used if qAll is set to true, but they need to be set (for example to 0).
    */
    expandTop(qPath: string, qRow: number, qCol: number, qAll: boolean): Promise<object>;
    /**    Collapses the left dimensions of a pivot table. This method applies only to pivot tables that are not always fully expanded.
  In the definition of the hypercube (in HyperCubeDef ), the parameter qAlwaysFullyExpanded must be set to false.
  
      @param qPath - Path to the definition of the object to be collapsed.
  For example, /qHyperCubeDef .
      @param qRow - Row index in the data matrix.
  Indexing starts from 0.
      @param qCol - Column index. The index is based on the left dimension indexes.
  Indexing starts from 0.
      @param qAll - If set to true, it collapses all cells.
  Parameters qRow and qCol are not used if qAll is set to true, but they need to be set (for example to 0).
    */
    collapseLeft(qPath: string, qRow: number, qCol: number, qAll: boolean): Promise<object>;
    /**    Collapses the top dimensions of a pivot table. This method applies only to pivot tables that are not always fully expanded.
  In the definition of the hypercube (in HyperCubeDef ), the parameter qAlwaysFullyExpanded must be set to false.
  
      @param qPath - Path to the definition of the object to be collapsed
  For example, /qHyperCubeDef .
      @param qRow - Row index. The index is based on the top dimension indexes.
  Indexing starts from 0.
      @param qCol - Column index in the data matrix.
  Indexing starts from 0.
      @param qAll - If set to true, it collapses all cells.
  Parameters qRow and qCol are not used if qAll is set to true, but they need to be set (for example to 0).
    */
    collapseTop(qPath: string, qRow: number, qCol: number, qAll: boolean): Promise<object>;
    /**    You can use the drillUp method with any object that contains a drill-down group as a dimension.
  This method allows you to move between different levels of information (from a detailed level to a less detailed level of information). You can go back to previous visualizations up to the highest level of the hierarchy.
  If you try to drill up more steps than there are available levels, the first level of the hierarchy is displayed.
  
      @param qPath - Path to the definition of the object to be selected.
  For example, /qHyperCubeDef .
      @param qDimNo - Dimension number or index starting from 0.
  The default value is 0.
      @param qNbrSteps - Number of steps you want to drill up.
  The default value is 0.
    */
    drillUp(qPath: string, qDimNo: number, qNbrSteps: number): Promise<object>;
    /**    Locks the selected values of a generic object.
  
      @param qPath - Path to the definition of the object.
  For example, /qListObjectDef .
      @param qColIndices - Dimension numbers or dimension indexes where the lock should apply.
  Dimension numbers/indexes start from 0.
  If this parameter is not set, the selected values in all dimensions are locked.
    */
    lock(qPath: string, qColIndices?: Array<number>): Promise<object>;
    /**    Unlocks the selected values of a generic object if the target (or handle ) is a generic object
  
      @param qPath - Path to the definition of the object.
  For example, /qListObjectDef .
      @param qColIndices - Dimension numbers/indexes where the unlock should apply.
  Dimension numbers/indexes start from 0.
  If this parameter is not set, the locked values in all dimensions are unlocked.
    */
    unlock(qPath: string, qColIndices?: Array<number>): Promise<object>;
    /**    Selects some values in one dimension.
  The values are identified by their element numbers.
  This method applies to charts, tables and scatter plots.
  The member Change returns the handles of the objects that are updated following the selections.
  qSuccess is set to true if the selections are successful and is set to false in the following cases:
  
  • The object contains some invalid fields (fields that are not in the data model).
  
  • The selection applies to a locked field.
  
  • A range selection is performed and the parameter OneAndOnlyOne is set to true in the definition of the object.
  
      @param qPath - Path to the definition of the object to be selected.
  For example, /qHyperCubeDef .
      @param qDimNo - Dimension number or index to select.
  Dimension numbers/index start from 0.
      @param qValues - Element numbers of the field to select.
  You can select multiple elements; the separator is the comma.
      @param qToggleMode - Set to true to toggle.
    */
    selectHyperCubeValues(qPath: string, qDimNo: number, qValues: Array<number>, qToggleMode: boolean): Promise<boolean>;
    /**    Makes selections in multiple dimensions and measures.
   This method applies to hypercubes, such as bar charts, tables and scatter plots.
  The member Change returns the handles of the objects that are updated following the selections.
  qSuccess is set to true if the selections are successful and is set to false in the following cases:
  
  • The object contains some invalid fields (fields that are not in the data model).
  
  • The selection applies to a locked field.
  
  • A range selection is performed and the parameter OneAndOnlyOne is set to true in the definition of the object.
  
      @param qPath - Path to the definition of the object to be selected.
  For example, /qHyperCubeDef .
      @param qRowIndices - Array of row indexes to select, starting from 0.
  If the array is empty [ ] , all rows are selected.
      @param qColIndices - Indexes of the columns to select, starting from 0.
  A column corresponds to a dimension in the order they are added to the hypercube.
  If a column is hidden it is ignored, qColIndex n refers to the n:th visible column (starting from zero).
  Example:
  If the hypercube has two dimensions:
  
  • [0] selects the first column (i.e the first dimension).
  
  • [1] selects the second column (i.e the second dimension).
  
  If the array is empty [ ] , all columns are selected.
      @param qSoftLock - Set to true to ignore locks; in that case, locked fields can be selected.
      @param qDeselectOnlyOneSelected - Set this parameter to true to unselect the last single selected value. There must be only one selected value in the field.
  The default value is false.
    */
    selectHyperCubeCells(qPath: string, qRowIndices: Array<number>, qColIndices: Array<number>, qSoftLock?: boolean, qDeselectOnlyOneSelected?: boolean): Promise<boolean>;
    /**    This method only applies to hypercubes that are not represented as straight tables. The parameter qMode in HyperCubeDef must be set either to P  or K .
  
   Pivot table:
  Makes selections in the top or left dimension cells of a pivot table or in the data matrix. Only expanded dimensions can be selected.
  
   Stacked table:
  Makes selections in the left dimension cells of a stacked table or in the data matrix.
  There is no top dimensions in a stacked table. A stacked table can only contain one measure.
  
   Example of a pivot table:
  
  In the representation above:
  |                                        |                                                                                     |
  |----------------------------------------|-------------------------------------------------------------------------------------|
  | Sum(OrderTotal)  Count(OrderTotal) | Are pseudo dimensions.                                                              |
  | CategoryName                           | Is a left dimension.  _Beverages_ , _Condiments_ ... are left dimension values. |
  | ProductName                            | Is a top dimension.  _Chef Anton's Cajun Seasoning_ is a top dimension value.   |
  | Numeric values                         | Are calculated values in the data matrix.  _626291,832_ is a calculated value.  |
  
  The member Change returns the handles of the objects that are updated following the selections.
  qSuccess is set to true if the selections are successful and is set to false in the following cases:
  
  • The object contains some invalid fields (fields that are not in the data model).
  
  • The selection applies to a locked field.
  
  • A range selection is performed and the parameter OneAndOnlyOne is set to true in the definition of the object.
  
      @param qPath - Path to the definition of the object.
  For example, /qHyperCubeDef .
      @param qSelections - Information about the selections to perform.
      @param qSoftLock - Set to true to ignore locks; in that case, locked fields can be selected.
      @param qDeselectOnlyOneSelected - Set this parameter to true to unselect the last single selected value. There must be only one selected value in the field.
  The default value is false.
    */
    selectPivotCells(qPath: string, qSelections: Array<NxSelectionCell>, qSoftLock?: boolean, qDeselectOnlyOneSelected?: boolean): Promise<boolean>;
    /**    Makes range selections in measures.
   This method applies to hypercubes. For example, bar charts, tables and scatter plots.
  The member Change returns the handles of the objects that are updated following the selections.
  qSuccess is set to true if the selections are successful and is set to false in the following cases:
  
  • The object contains some invalid fields (fields that are not in the data model).
  
  • The selection applies to a locked field.
  
  • A range selection is performed and the parameter OneAndOnlyOne is set to true in the definition of the object.
  
      @param qPath - Path to the definition of the object to be selected.
  For example, /qHyperCubeDef .
      @param qRanges - Ranges of selections.
      @param qColumnsToSelect - Indicates which dimensions to select.
  The dimensions numbering starts at 0 (first dimension is 0).
  If the array is empty, all dimensions are selected.
      @param qOrMode - Applies to hypercubes with multiple measures.
  If set to true, it means that at least one of the measures must be in the range of selections for the group of measures to be selected.
  If set to false, it means that all measures must be in the range of selections for the group of measures to be selected.
  The default value is false.
      @param qDeselectOnlyOneSelected - Set this parameter to true to unselect the last single selected value. There must be only one selected value in the field.
  The default value is false.
    */
    rangeSelectHyperCubeValues(qPath: string, qRanges: Array<NxRangeSelectInfo>, qColumnsToSelect?: Array<number>, qOrMode?: boolean, qDeselectOnlyOneSelected?: boolean): Promise<boolean>;
    /**    Makes multiple range selections in measures.
   This method applies to hypercubes. For example, bar charts, tables and scatter plots.
  The member Change returns the handles of the objects that are updated following the selections.
  qSuccess is set to true if the selections are successful and is set to false in the following cases:
  
  • The object contains some invalid fields (fields that are not in the data model).
  
  • The selection applies to a locked field.
  
  • A range selection is performed and the parameter OneAndOnlyOne is set to true in the definition of the object.
  
      @param qPath - Path to the definition of the object to be selected.
  For example, /qHyperCubeDef .
      @param qRanges - Ranges of selections.
      @param qOrMode - Applies to hypercubes with multiple measures.
  If set to true, it means that at least one of the measures must be in the range of selections for the group of measures to be selected.
  If set to false, it means that all measures must be in the range of selections for the group of measures to be selected.
  The default value is false.
      @param qDeselectOnlyOneSelected - Set this parameter to true to unselect the last single selected value. There must be only one selected value in the field.
  The default value is false.
    */
    multiRangeSelectHyperCubeValues(qPath: string, qRanges: Array<NxMultiRangeSelectInfo>, qOrMode?: boolean, qDeselectOnlyOneSelected?: boolean): Promise<boolean>;
    /**
  
      @param qPath -
      @param qRanges -
      @param qOrMode -
      @param qDeselectOnlyOneSelected -
    */
    multiRangeSelectTreeDataValues(qPath: string, qRanges: Array<NxTreeMultiRangeSelectInfo>, qOrMode?: boolean, qDeselectOnlyOneSelected?: boolean): Promise<boolean>;
    /**    The following is returned in the output:
  The operation is successful if qSuccess is set to true.
  
      @param qPath - Path to the definition of the object.
  For example, /qHyperCubeDef .
      @param qRanges - Selects ranges in a hypercube in (Ranges[N].Min,Ranges[N].Max) intervals.
  If either Ranges[N].MinInclEq or Ranges[N].MaxInclEq, or both flags are set to true then Min and Max values will be selected.
      @param qSoftLock - Set to true to ignore locks; in that case, locked fields can be selected.
  The default value is false.
    */
    selectHyperCubeContinuousRange(qPath: string, qRanges: Array<NxContinuousRangeSelectInfo>, qSoftLock?: boolean): Promise<boolean>;
    /**    Returns the type of the object and the corresponding handle.
  
      @param qId - Identifier of the object.
    */
    getChild(qId: string): Promise<GenericObject>;
    /**    Returns the type of the object and the corresponding handle to the parent object in the hiearchy.
  
    */
    getParent(): Promise<GenericObject>;
    /**    Returns the identifier and the type for each child in an app object. If the child contains extra properties in qInfos , these properties are returned.
  
  Full dynamic properties are optional and are returned if they exist in the definition of the object.
  
    */
    getChildInfos(): Promise<Array<NxInfo>>;
    /**    Creates a generic object that is a child of another generic object.
  It is possible to update the properties of the child's parent at the same time that the child is created. Both operations are performed by the same call. It is possible to create a child that is linked to another generic object. The two objects have the same properties.
  
      @param qProp - Information about the child.
  It is possible to create a child that is linked to another object.
      @param qPropForThis - Identifier of the parent's object.
  Should be set to update the properties of the parent's object at the same time the child is created.
    */
    createChild({ qBookmarkListDef: { qType, ...restQBookmarkListDef }, qHyperCubeDef: { qMaxStackedCells, qMode, qNoOfLeftDims, qPseudoDimPos, ...restQHyperCubeDef }, qListObjectDef: { qFrequencyMode, ...restQListObjectDef }, qNxLibraryDimensionDef: { coloring: { baseColor: { index, ...restQNxLibraryDimensionDefColoringBaseColor }, ...restQNxLibraryDimensionDefColoring }, ...restQNxLibraryDimensionDef }, qNxLibraryMeasureDef: { qNumFormat: { qType: qType2, qnDec, ...restQNxLibraryMeasureDefQNumFormat }, coloring: { baseColor: { index: index2, ...restQNxLibraryMeasureDefColoringBaseColor }, gradient: { limitType, ...restQNxLibraryMeasureDefColoringGradient }, ...restQNxLibraryMeasureDefColoring }, ...restQNxLibraryMeasureDef }, qVariableListDef: { qData: { tags, ...restQVariableListDefQData }, qShowConfig, qShowReserved, qType: qType3, ...restQVariableListDef }, ...rest }?: GenericObjectProperties, { qBookmarkListDef: { qType: qType4, ...rest2QBookmarkListDef }, qHyperCubeDef: { qMaxStackedCells: qMaxStackedCells2, qMode: qMode2, qNoOfLeftDims: qNoOfLeftDims2, qPseudoDimPos: qPseudoDimPos2, ...rest2QHyperCubeDef }, qListObjectDef: { qFrequencyMode: qFrequencyMode2, ...rest2QListObjectDef }, qNxLibraryDimensionDef: { coloring: { baseColor: { index: index3, ...rest2QNxLibraryDimensionDefColoringBaseColor }, ...rest2QNxLibraryDimensionDefColoring }, ...rest2QNxLibraryDimensionDef }, qNxLibraryMeasureDef: { qNumFormat: { qType: qType5, qnDec: qnDec2, ...rest2QNxLibraryMeasureDefQNumFormat }, coloring: { baseColor: { index: index4, ...rest2QNxLibraryMeasureDefColoringBaseColor }, gradient: { limitType: limitType2, ...rest2QNxLibraryMeasureDefColoringGradient }, ...rest2QNxLibraryMeasureDefColoring }, ...rest2QNxLibraryMeasureDef }, qVariableListDef: { qData: { tags: tags2, ...rest2QVariableListDefQData }, qShowConfig: qShowConfig2, qShowReserved: qShowReserved2, qType: qType6, ...rest2QVariableListDef }, ...rest2 }?: GenericObjectProperties): Promise<GenericObject>;
    /**    Removes a child object.
  It is possible to update the properties of the child's parent at the same time that the child is removed. Both operations are performed by the same call. Removing a linked object, invalidate the linking object.
  
  The operation is successful if qSuccess is set to true.
  
      @param qId - Identifier of the child to remove.
      @param qPropForThis - Identifier of the parent's object and property to update.
  Should be set to update the properties of the parent's object at the same time the child is created.
    */
    destroyChild(qId: string, { qBookmarkListDef: { qType, ...restQBookmarkListDef }, qHyperCubeDef: { qMaxStackedCells, qMode, qNoOfLeftDims, qPseudoDimPos, ...restQHyperCubeDef }, qListObjectDef: { qFrequencyMode, ...restQListObjectDef }, qNxLibraryDimensionDef: { coloring: { baseColor: { index, ...restQNxLibraryDimensionDefColoringBaseColor }, ...restQNxLibraryDimensionDefColoring }, ...restQNxLibraryDimensionDef }, qNxLibraryMeasureDef: { qNumFormat: { qType: qType2, qnDec, ...restQNxLibraryMeasureDefQNumFormat }, coloring: { baseColor: { index: index2, ...restQNxLibraryMeasureDefColoringBaseColor }, gradient: { limitType, ...restQNxLibraryMeasureDefColoringGradient }, ...restQNxLibraryMeasureDefColoring }, ...restQNxLibraryMeasureDef }, qVariableListDef: { qData: { tags, ...restQVariableListDefQData }, qShowConfig, qShowReserved, qType: qType3, ...restQVariableListDef }, ...rest }?: GenericObjectProperties): Promise<boolean>;
    /**    Removes all children and all children to the children on an object.
  
      @param qPropForThis - Identifier of the parent's object and property to update.
  Should be set to update the properties of the parent's object at the same time the child is created.
    */
    destroyAllChildren({ qBookmarkListDef: { qType, ...restQBookmarkListDef }, qHyperCubeDef: { qMaxStackedCells, qMode, qNoOfLeftDims, qPseudoDimPos, ...restQHyperCubeDef }, qListObjectDef: { qFrequencyMode, ...restQListObjectDef }, qNxLibraryDimensionDef: { coloring: { baseColor: { index, ...restQNxLibraryDimensionDefColoringBaseColor }, ...restQNxLibraryDimensionDefColoring }, ...restQNxLibraryDimensionDef }, qNxLibraryMeasureDef: { qNumFormat: { qType: qType2, qnDec, ...restQNxLibraryMeasureDefQNumFormat }, coloring: { baseColor: { index: index2, ...restQNxLibraryMeasureDefColoringBaseColor }, gradient: { limitType, ...restQNxLibraryMeasureDefColoringGradient }, ...restQNxLibraryMeasureDefColoring }, ...restQNxLibraryMeasureDef }, qVariableListDef: { qData: { tags, ...restQVariableListDefQData }, qShowConfig, qShowReserved, qType: qType3, ...restQVariableListDef }, ...rest }?: GenericObjectProperties): Promise<object>;
    /**    Sets the order of the children in a generic object.
  To change the order of the children in a generic object, the identifiers of all the children must be included in the list of the identifiers (in qIds ).
  
      @param qIds - List of the children identifiers.
    */
    setChildArrayOrder(qIds: Array<string>): Promise<object>;
    /**    Lists the linked objects to a generic object, a dimension or a measure.
  
    */
    getLinkedObjects(): Promise<Array<NxLinkedObjectInfo>>;
    /**    Copies the properties of a generic object and its children.
  The source object is specified by the parameter qFromId and the destination object is referenced by its handle.
  The identifier of the destination object is the same as before the copy takes place.
  
      @param qFromId - Identifier of the object to copy.
    */
    copyFrom(qFromId: string): Promise<object>;
    /**    Begins the selection mode. The app enters the modal state. The specified object enters the selection mode and a modal window is opened. The selection mode can apply to only one object in an app at a time.
  When a visualization is in selection mode, selections can be made in this visualization. The visualization is not sorted until the selection mode is ended. Once the selection mode is ended and if the selections are accepted, the visualization is sorted according to the sort criteria. For more information about:
  
  • Ending the selection mode, see EndSelections Method.
  
  • The sort criteria, see ListObjectDef or HyperCubeDef.
  
   Example:
  A sheet contains a list object and a chart. If the list object is in selection mode then the chart cannot be in selection mode. No selection on the chart can be made until the list object exits the selection mode.
  
      @param qPaths - List of the paths to the definition of the objects to enter selection mode.
  For example, /qListObjectDef .
    */
    beginSelections(qPaths: Array<string>): Promise<object>;
    /**    Ends the selection mode on a visualization. The selections are accepted or aborted when exiting the selection mode, depending on the qAccept parameter value.
  
      @param qAccept - Set this parameter to true to accept the selections before exiting the selection mode.
    */
    endSelections(qAccept: boolean): Promise<object>;
    /**    Resets all selections made in selection mode.
  
    */
    resetMadeSelections(): Promise<object>;
    /**    Adds a snapshot to a generic object.
  Only one snapshot can be embedded in a generic object. If you embed a snapshot in an object that already contains a snapshot, the new snapshot overwrites the previous one.
  
      @param qId - Identifier of the bookmark.
    */
    embedSnapshotObject(qId: string): Promise<object>;
    /**    Returns the type of the object and the corresponding handle.
  
    */
    getSnapshotObject(): Promise<GenericObject>;
    /**    Publishes a generic object.
  This operation is not applicable for Qlik Sense Desktop.
  
    */
    publish(): Promise<object>;
    /**    Unpublishes a generic object.
  This operation is not applicable for Qlik Sense Desktop.
  
    */
    unPublish(): Promise<object>;
    /**    Adds the generic object to the list of approved objects
  This operation is possible only in Qlik Sense Enterprise.
  
    */
    approve(): Promise<object>;
    /**    Removes the generic object from the list of approved objects
  This operation is possible only in Qlik Sense Enterprise.
  
    */
    unApprove(): Promise<object>;
    on(event: EventTypes, listener: EventListener): void;
    once(event: EventTypes, listener: EventListener): void;
}
export type GenericObjectEntry = {
    /** Information about the children of the generic object. */
    qChildren?: Array<GenericObjectEntry>;
    /** Reference to a bookmark/snapshot that is embedded in the generic object. */
    qEmbeddedSnapshotRef?: GenericBookmarkEntry;
    /** Information about the generic object properties. */
    qProperty?: GenericObjectProperties;
    [key: string]: any;
};
export type GenericObjectLayout = {
    /** Gives information on the error.
  This parameter is optional. */
    qError?: NxLayoutErrors;
    /** Should be set to create an object that is linked to another object. Enter the identifier of the object you want to link to.
  If you do not want to link your object, set this parameter to an empty string. */
    qExtendsId?: string;
    /** Is set to true if the generic object contains some properties that are not persistent (a soft patch was applied). */
    qHasSoftPatches?: boolean;
    /** Identifier and type of the generic object. */
    qInfo?: NxInfo;
    /** Information about publishing and permissions.
  This parameter is optional. */
    qMeta?: NxMeta;
    /** Information about the selections. */
    qSelectionInfo?: NxSelectionInfo;
    /** Name of the alternate state.
  Default is current selections $ . */
    qStateName?: string;
    /** Lists the app objects. Is the layout for AppObjectListDef.
  An app object is a generic object created at app level. */
    qAppObjectList?: AppObjectList;
    /** Lists the bookmarks. Is the layout for BookmarkListDef. */
    qBookmarkList?: BookmarkList;
    /** Lists the children of a generic object. Is the layout for ChildListDef.
  ChildList is used by the GetLayout Method to list the children of a generic object.  */
    qChildList?: ChildList;
    /** Lists the dimensions. Is the layout for DimensionListDef. */
    qDimensionList?: DimensionList;
    /** Renders the embedded snapshot in an object.
  The following is returned:
  
  • Any dynamic properties defined in the bookmark
  
  • Any properties defined in qEmbeddedSnapshot
  
   Properties:
  "qEmbeddedSnapshot": {} */
    qEmbeddedSnapshot?: EmbeddedSnapshot;
    /** Obsolete, use qrs API's to fetch extensions. */
    qExtensionList?: ExtensionList;
    /** Lists the fields present in the data model viewer. Is the layout for FieldListDef. */
    qFieldList?: FieldList;
    /** Renders the properties of a hypercube. Is the layout for HyperCubeDef.
  For more information about the definition of a hypercube, see Generic object.
  What is returned in HyperCube depends on the type of the hypercube (straight, pivot or stacked table, or tree) and on the method called (GetLayout, GetHyperCubeData, GetHyperCubePivotData, GetHyperCubeStackData, GetHyperCubeTreeData). */
    qHyperCube?: HyperCube;
    /** Renders the properties of a list object. Is the layout for ListObjectDef.
  For more information about the definition of a list object, see Generic object.
  ListObject is used by the GetLayout Method to display the properties of a list object.  */
    qListObject?: ListObject;
    /** Lists the measures. Is the layout for MeasureListDef. */
    qMeasureList?: MeasureList;
    /** Lists the media files. Is the layout for MediaListDef.
  This struct is deprecated. */
    qMediaList?: MediaList;
    qNxLibraryDimension?: NxLibraryDimension;
    /** Information about the library measure. Is the layout for NxLibraryMeasureDef. */
    qNxLibraryMeasure?: NxLibraryMeasure;
    /** Indicates which selections are currently applied. It gives the current selections. Is the layout for SelectionObjectDef. */
    qSelectionObject?: SelectionObject;
    /** In addition, this structure can return dynamic properties. */
    qStaticContentUrl?: StaticContentUrl;
    /** Renders the properties of a TreeData object. Is the layout for TreeDataDef.
  For more information about the definition of TreeData, see Generic object.
  To retrieve data from the TreeData object, use the method called GetHyperCubeTreeData. */
    qTreeData?: TreeData;
    /** Displays information about the number of possible undos and redos. Is the layout for UndoInfoDef. */
    qUndoInfo?: UndoInfo;
    /** Lists the variables in an app. Is the layout for VariableListDef. */
    qVariableList?: VariableList;
    [key: string]: any;
};
export type GenericObjectProperties = {
    /** Should be set to create an object that is linked to another object. Enter the identifier of the linking object (i.e the object you want to link to).
  If you do not want to link your object, set this parameter to an empty string. */
    qExtendsId?: string;
    /** Identifier and type of the object.
  This parameter is mandatory. */
    qInfo?: NxInfo;
    /** Definition of the dynamic properties. */
    qMetaDef?: NxMetaDef;
    /** Name of the alternate state.
  Default is current selections $ . */
    qStateName?: string;
    /** Defines the list of objects in an app.
  An app object is a generic object created at app level. */
    qAppObjectListDef?: AppObjectListDef;
    /** Defines the list of bookmarks. */
    qBookmarkListDef?: BookmarkListDef;
    /** Defines the list of children of a generic object.
  What is defined in ChildListDef has an impact on what the GetLayout method returns. See Example for more information. */
    qChildListDef?: ChildListDef;
    /** Defines the lists of dimensions. */
    qDimensionListDef?: DimensionListDef;
    /** Defines the embedded snapshot in a generic object.
  
   Properties:
  "EmbeddedSnapshotDef": {} */
    qEmbeddedSnapshotDef?: EmbeddedSnapshotDef;
    /** Obsolete, use qrs API's to fetch extensions. */
    qExtensionListDef?: ExtensionListDef;
    /** Defines the fields to show. */
    qFieldListDef?: FieldListDef;
    /** Defines the properties of a hypercube.
  For more information about the definition of a hypercube, see Generic object. */
    qHyperCubeDef?: HyperCubeDef;
    /** Contains JSON to be excluded from validation. */
    qLayoutExclude?: LayoutExclude;
    /** Defines the properties of a list object.
  For more information about the definition of a list object, see Generic object. */
    qListObjectDef?: ListObjectDef;
    /** Defines the list of measures. */
    qMeasureListDef?: MeasureListDef;
    /** Defines the list of media files.
  This struct is deprecated.
  
   Properties:
  "qMediaListDef": {}
  qMediaListDef has an empty structure. No properties need to be set. */
    qMediaListDef?: MediaListDef;
    qNxLibraryDimensionDef?: NxLibraryDimensionDef;
    qNxLibraryMeasureDef?: NxLibraryMeasureDef;
    /** To display the current selections.
  Can be added to any generic object but is particularly meaningful when using session objects to monitor an app.
  
   Properties:
  "qSelectionObjectDef": {} */
    qSelectionObjectDef?: SelectionObjectDef;
    /** In addition, this structure can contain dynamic properties. */
    qStaticContentUrlDef?: StaticContentUrlDef;
    /**  Properties:
  Abbreviated syntax:
  "qStringExpression":"=<expression>"
  Extended object syntax:
  "qStringExpression":{"qExpr":"=<expression>"}
  Where:
  
  • < expression > is a string
  
  The "=" sign in the string expression is not mandatory. Even if the "=" sign is not given, the expression is evaluated. A string expression is not evaluated, if the expression is surrounded by simple quotes.
  The result of the evaluation of the expression can be of any type, as it is returned as a JSON (quoted) string. */
    qStringExpression?: StringExpression;
    /** Defines the properties of a TreeData object.
  For more information about the definition of a TreeData object, see Generic object. */
    qTreeDataDef?: TreeDataDef;
    /** Defines if an object should contain information on the number of possible undo and redo.
  
   Properties:
  "qUndoInfoDef": {}
  The numbers of undos and redos are empty when an object is created. The number of possible undos is increased every time an action (for example, create a child, set some properties) on the object is performed. The number of possible redos is increased every time an undo action is performed. */
    qUndoInfoDef?: UndoInfoDef;
    /**  Properties:
  Abbreviated syntax:
  "qValueExpression":"=<expression>"
  Extended object syntax:
  "qValueExpression":{"qExpr":"=<expression>"}
  Where:
  
  • < expression > is a string.
  
  The "=" sign in the value expression is not mandatory. Even if the "=" sign is not given, the expression is evaluated.
  The expression is evaluated as a numeric. */
    qValueExpression?: ValueExpression;
    /** Defines the list of variables in an app. */
    qVariableListDef?: VariableListDef;
    [key: string]: any;
};
/**
  @param qGenericId - Object ID.
  @param qGenericType - The type of the object.
  @param qHandle - The handle used to connect to object.
  @param qType - The native type of the object.
  @param auth - Auth object used to make requests
 */
export declare class GenericVariable {
    session: RpcSession;
    auth: Auth;
    qGenericId?: string;
    qGenericType?: string;
    qHandle?: number;
    qType?: string;
    [key: string]: any;
    constructor({ qGenericId, qGenericType, qHandle, qType, ...rest }: {
        qGenericId?: string;
        qGenericType?: string;
        qHandle?: number;
        qType?: string;
    }, session: RpcSession, auth?: Auth);
    /**    Evaluates an object and displays its properties including the dynamic properties.
  If the member delta is set to true in the request object, only the delta is evaluated.
  
    */
    getLayout(): Promise<GenericVariableLayout>;
    /**    Applies a patch to the properties of a variable. Allows an update to some of the properties. It should not be possible to patch "/qInfo/qId",
  and it will be forbidden in the near future.
  Applying a patch takes less time than resetting all the properties.
  
      @param qPatches - Array of patches.
    */
    applyPatches(qPatches: Array<NxPatch>): Promise<object>;
    /**    Sets some properties for a variable.
  The identifier of a variable cannot be modified. You cannot update the properties of a script-defined variable using the SetProperties method.
  
      @param qProp - Information about the variable.
    */
    setProperties({ qNumberPresentation: { qType, qnDec, ...restQNumberPresentation }, ...rest }?: GenericVariableProperties): Promise<object>;
    /**    Shows the properties of an object.
  If the member delta is set to true in the request, only the delta is retrieved.
  The following is always returned in the output:
  
    */
    getProperties(): Promise<GenericVariableProperties>;
    /**    Returns the type and identifier of the object.
  
    */
    getInfo(): Promise<NxInfo>;
    /**    Sets a string value to a variable.
  These changes are not persistent. They only last the duration of the engine session.
  
      @param qVal - Value of the variable. The string can contain an expression.
    */
    setStringValue(qVal: string): Promise<object>;
    /**    Sets a numerical value to a variable.
  These changes are not persistent. They only last the duration of the engine session.
  
      @param qVal - Value of the variable.
    */
    setNumValue(qVal: number): Promise<object>;
    /**    Sets the value of a dual variable.
  These changes are not persistent. They only last the duration of the engine session.
  
      @param qText - String representation of a dual value. Set this parameter to "", if the string representation is to be Null.
      @param qNum - Numeric representation of a dual value.
    */
    setDualValue(qText: string, qNum: number): Promise<object>;
    /**    Returns the raw value of a variable.
  
    */
    getRawContent(): Promise<string>;
    on(event: EventTypes, listener: EventListener): void;
    once(event: EventTypes, listener: EventListener): void;
}
export type GenericVariableLayout = {
    /** Identifier and type of the object.
  This parameter is mandatory. */
    qInfo?: NxInfo;
    /** If set to true, it means that the variable was defined via script. */
    qIsScriptCreated?: boolean;
    /** Information about publishing and permissions.
  This parameter is optional. */
    qMeta?: NxMeta;
    /** A value. */
    qNum?: number;
    /** Some text. */
    qText?: string;
    /** Comment related to the variable.
  This parameter is optional. */
    qComment?: string;
    /** Definition of the variable. */
    qDefinition?: string;
    /** Set this property to true to update the variable when applying a bookmark. The variable value will be persisted in the bookmark.
  The value of a variable can affect the state of the selections.
  Script variables cannot be persisted in the bookmark.
  The default value is false. Default:false */
    qIncludeInBookmark?: boolean;
    /** Name of the variable.
  The name must be unique.
  This parameter is mandatory. */
    qName?: string;
    /** Sets the formatting of a field.
  The properties of _qFieldAttributes_ and the formatting mechanism are described below.
  
  Formatting mechanism
  The formatting mechanism depends on the type set in _qType,_ as shown below:
  In case of inconsistencies between the type and the format pattern, the format pattern takes precedence over the type.
  
  Type is DATE, TIME, TIMESTAMP or INTERVAL
  The following applies:
  If a format pattern is defined in _qFmt_ , the formatting is as defined in _qFmt_ .
  If _qFmt_ is empty, the formatting is defined by the number interpretation variables included at the top of the script ( _TimeFormat_ , _DateFormat_ , _TimeStampFormat_ ).
  The properties _qDec_ , _qThou_ , _qnDec_ , _qUseThou_ are not used.
  
  Type is INTEGER
  The following applies:
  If a format pattern is defined in _qFmt_ , the engine looks at the values set in _qDec_ and _qThou_ . If these properties are not defined, the formatting mechanism uses the number interpretation variables included at the top of the script ( _DecimalSep_ and _ThousandSep_ ).
  If no format pattern is defined in _qFmt_ , no formatting is applied. The properties _qDec_ , _qThou_ , _qnDec_ , _qUseThou_ and the number interpretation variables defined in the script are not used .
  
  Type is REAL
  The following applies:
  If a format pattern is defined in _qFmt_ , the engine looks at the values set in _qDec_ and _qThou_ . If these properties are not defined, the engine uses the number interpretation variables included at the top of the script ( _DecimalSep_ and _ThousandSep_ ).
  If no format pattern is defined in _qFmt_ , and if the value is almost an integer value (for example, 14,000012), the value is formatted as an integer. The properties _qDec_ , _qThou_ , _qnDec_ , _qUseThou_ are not used.
  If no format pattern is defined in _qFmt_ , and if _qnDec_ is defined and not 0, the property _qDec_ is used. If _qDec_ is not defined, the variable _DecimalSep_ defined at the top of the script is used.
  If no format pattern is defined in _qFmt_ , and if _qnDec_ is 0, the number of decimals is 14 and the property _qDec_ is used. If _qDec_ is not defined, the variable _DecimalSep_ defined at the top of the script is used.
  
  Type is FIX
  The following applies:
  If a format pattern is defined in _qFmt_ , the engine looks at the values set in _qDec_ and _qThou_ . If these properties are not defined, the engine uses the number interpretation variables included at the top of the script ( _DecimalSep_ and _ThousandSep_ ).
  If no format pattern is defined in _qFmt_ , the properties _qDec_ and _qnDec_ are used. If _qDec_ is not defined, the variable _DecimalSep_ defined at the top of the script is used.
  
  Type is MONEY
  The following applies:
  If a format pattern is defined in _qFmt_ , the engine looks at the values set in _qDec_ and _qThou_ . If these properties are not defined, the engine uses the number interpretation variables included at the top of any script ( _MoneyDecimalSep_ and _MoneyThousandSep_ ).
  If no format pattern is defined in _qFmt_ , the engine uses the number interpretation variables included at the top of the script ( _MoneyDecimalSep_ and _MoneyThousandSep_ ).
  
  Type is ASCII
  No formatting, _qFmt_ is ignored. */
    qNumberPresentation?: GenericVariablePropertiesQNumberPresentation;
    /** Tags added to the variable. Optional. */
    tags?: Array<string>;
    [key: string]: any;
};
export type GenericVariableProperties = {
    /** Comment related to the variable.
  This parameter is optional. */
    qComment?: string;
    /** Definition of the variable. */
    qDefinition?: string;
    /** Set this property to true to update the variable when applying a bookmark. The variable value will be persisted in the bookmark.
  The value of a variable can affect the state of the selections.
  Script variables cannot be persisted in the bookmark.
  The default value is false. */
    qIncludeInBookmark?: boolean;
    /** Identifier and type of the object.
  This parameter is mandatory. */
    qInfo?: NxInfo;
    /** Meta data. */
    qMetaDef?: NxMetaDef;
    /** Name of the variable.
  The name must be unique.
  This parameter is mandatory. */
    qName?: string;
    /** Defines the format of the value.
  This parameter is optional. */
    qNumberPresentation?: FieldAttributes;
    /** Tags added to the variable. Optional. */
    tags?: Array<string>;
    [key: string]: any;
};
export type GetBaseBNFReturn = {
    qBnfDefs?: Array<BNFDef>;
    qBnfHash?: string;
    [key: string]: any;
};
export type GetBaseBNFStringReturn = {
    qBnfHash?: string;
    qBnfStr?: string;
    [key: string]: any;
};
export type GetDatabaseTablePreviewReturn = {
    qPreview?: Array<DataRecord>;
    qRowCount?: number;
    [key: string]: any;
};
export type GetExpressionBNFReturn = {
    qBnfDefs?: Array<BNFDef>;
    qBnfHash?: string;
    [key: string]: any;
};
export type GetFileTableFieldsReturn = {
    qFields?: Array<DataField>;
    qFormatSpec?: string;
    [key: string]: any;
};
export type GetFileTablePreviewReturn = {
    qFormatSpec?: string;
    qPreview?: Array<DataRecord>;
    [key: string]: any;
};
export type GetHyperCubeContinuousDataReturn = {
    qAxisData?: NxAxisData;
    qDataPages?: Array<NxDataPage>;
    [key: string]: any;
};
export type GetInteractReturn = {
    qDef?: InteractDef;
    qReturn?: boolean;
    [key: string]: any;
};
export type GetMediaListReturn = {
    /** Lists the media files. Is the layout for MediaListDef.
  This struct is deprecated. */
    qList?: MediaList;
    qReturn?: boolean;
    [key: string]: any;
};
export type GetTablesAndKeysReturn = {
    qk?: Array<SourceKeyRecord>;
    qtr?: Array<TableRecord>;
    [key: string]: any;
};
/**
  @param qGenericId - Object ID.
  @param qGenericType - The type of the object.
  @param qHandle - The handle used to connect to object.
  @param qType - The native type of the object.
  @param auth - Auth object used to make requests
 */
export declare class Global {
    session: RpcSession;
    auth: Auth;
    qGenericId?: string;
    qGenericType?: string;
    qHandle?: number;
    qType?: string;
    [key: string]: any;
    constructor({ qGenericId, qGenericType, qHandle, qType, ...rest }: {
        qGenericId?: string;
        qGenericType?: string;
        qHandle?: number;
        qType?: string;
    }, session: RpcSession, auth?: Auth);
    /**    Sets an abort flag on a specific request in the current engine session.
  
  • If an abort flag is set on a pending request, the request is aborted.
  
  • If an abort flag is set on an ongoing request, the engine checks to see if it is possible to abort the request.
  
      @param qRequestId - Identifier of request to abort.
    */
    abortRequest(qRequestId: number): Promise<object>;
    /**    Sets an abort flag on all pending and ongoing requests in the current engine session.
  
  • If an abort flag is set on a pending request, the request is aborted.
  
  • If an abort flag is set on an ongoing request, the engine checks to see if it is possible to abort the request.
  
    */
    abortAll(): Promise<object>;
    /**    Gives information about the progress of the DoReload and DoSave calls.
  For more information on DoReload and DoSave, see the DoReload Method and DoSave Method.
  
      @param qRequestId - Identifier of the DoReload or DoSave request or 0.
  Complete information is returned if the identifier of the request is given.
  If the identifier is 0, less information is given. Progress messages and error messages are returned but information like when the request started and finished is not returned.
    */
    getProgress(qRequestId: number): Promise<ProgressData>;
    /**    Retrieves information on the user interaction that is requested by the engine.
  Engine can request user interactions only during script reload and when the reload is performed in debug mode ( qDebug is set to true when using the DoReload method ).
  When running reload in debug mode, the engine pauses the script execution to receive data about user interaction. The engine can pause:
  
  • Before executing a new script statement.
  
  • When an error occurs while executing the script.
  
  • When the script execution is finished.
  
  To know if the engine is paused and waits for a response to an interaction request, the GetProgress method should be used. The engine waits for a response if the property qUserInteractionWanted is set to true in the response of the GetProgress request.
  
      @param qRequestId - Identifier of the request.
  Corresponds to the identifier of the DoReload request.
    */
    getInteract(qRequestId: number): Promise<GetInteractReturn>;
    /**    Informs the engine that a user interaction (which was earlier requested by the engine) was performed and indicates to the engine what to do next.
  
      @param qRequestId - Identifier of the request.
  Corresponds to the identifier of the DoReload request.
      @param qDef - User response to the current interaction.
    */
    interactDone(qRequestId: number, qDef: InteractDef): Promise<object>;
    /**    Retrieves information about the authenticated user.
  
    */
    getAuthenticatedUser(): Promise<string>;
    /**    Returns the handle of the current app.
  
    */
    getActiveDoc(): Promise<Doc>;
    /**    Indicates whether or not a user is able to create an app.
  
    */
    allowCreateApp(): Promise<boolean>;
    /**    Indicates whether the user is working in Qlik Sense Desktop.
  
    */
    isDesktopMode(): Promise<boolean>;
    /**    Cancels an ongoing request. The request is stopped.
  
      @param qRequestId - Identifier of the request to stop.
    */
    cancelRequest(qRequestId: number): Promise<object>;
    /**    Shuts down the Qlik engine.
  This operation is possible only in Qlik Sense Desktop.
  
    */
    shutdownProcess(): Promise<object>;
    /**    Replaces objects of a target app with the objects from a source app.
  The list of objects in the app to be replaced must be defined in qIds.
  The data model of the app cannot be updated.  This operation is possible only in Qlik Sense Enterprise.
  
  The operation is successful if qSuccess is set to true.
  
      @param qTargetAppId - Identifier (GUID) of the target app.
  The target app is the app to be replaced.
      @param qSrcAppID - Identifier (GUID) of the source app.
  The objects in the source app will replace the objects in the target app.
      @param qIds - QRS identifiers (GUID) of the objects in the target app to be replaced. Only QRS-approved GUIDs are applicable.
  An object that is QRS-approved, is for example an object that has been published (for example, not private anymore).
  If an object is private, it should not be included in this list.
  If the array of identifiers contains objects that are not present in the source app, the objects related to these identifiers are removed from the target app.
  If qIds is empty, no objects are deleted in the target app.
    */
    replaceAppFromID(qTargetAppId: string, qSrcAppID: string, qIds: Array<string>): Promise<boolean>;
    /**    Publishes an app to the supplied stream.
  
      @param qAppId - The Id of the app to publish.
      @param qName - The name of the app to publish.
      @param qStreamId - The stream Id of the app to publish.
    */
    publishApp(qAppId: string, qName: string, qStreamId: string): Promise<object>;
    /**    Indicates whether or not the user is working in personal mode (Qlik Sense Desktop).
      @deprecated
  
    */
    isPersonalMode(): Promise<boolean>;
    /**    Returns the unique identifier of the endpoint for the current user in the current app.
  This unique identifier can be used for logging purposes.
  
    */
    getUniqueID(): Promise<string>;
    /**    Opens an app and checks if the app needs to be migrated (if the app is deprecated).
  The OpenDoc method compares the version of the app with the version of Qlik Sense and migrates the app to the current version of Qlik Sense if necessary. Once the migration is done, the app is opened.
  If no migration is needed, the app is opened immediately.
  The following applies:
  
  • The app version is lower than 0.95: no migration is done. Apps older than the version 0.95 are not supported.
  
  • The app version is at least 0.95 and less than the Qlik Sense version: the app is migrated and then opened.
  
  • Qlik Sense and the app have the same version: the app is opened, no migration is needed.
  
  If the app is read-only, the app migration cannot occur. An error message is sent.
  
   Backups:
  In Qlik Sense Desktop, apps are automatically backed up before a migration.
  The backup files are located in %userprofile%\Documents\Qlik\Sense\AppsBackup\<Qlik Sense Desktop version>.
  In Qlik Sense Enterprise, no automatic back up is run. The back up should be done manually.
  
      @param qDocName - The GUID (in Qlik Sense Enterprise) or Name (in Qlik Sense Desktop) of the app to retrieve.
      @param qUserName - Name of the user that opens the app.
      @param qPassword - Password of the user.
      @param qSerial - Current Qlik Sense serial number.
      @param qNoData - Set this parameter to true to be able to open an app without loading its data.
  When this parameter is set to true, the objects in the app are present but contain no data. The script can be edited and reloaded.
  The default value is false.
    */
    openDoc(qDocName: string, qUserName?: string, qPassword?: string, qSerial?: string, qNoData?: boolean): Promise<Doc>;
    /**    Returns the Qlik Sense version number.
      @deprecated
  
    */
    productVersion(): Promise<string>;
    /**    Retrieves the meta data of an app.
  
      @param qAppID - Identifier of the app, as returned by the CreateApp method.
  One of:
  
  • Path and name of the app (Qlik Sense Desktop)
  
  • GUID (Qlik Sense Enterprise)
    */
    getAppEntry(qAppID: string): Promise<AppEntry>;
    /**    Configures the engine's behavior during a reload.
  The ConfigureReload method should be run before the DoReload method.
  
      @param qCancelOnScriptError - If set to true, the script execution is halted on error.
  Otherwise, the engine continues the script execution.
  This parameter is relevant only if the variable ErrorMode is set to 1.
      @param qUseErrorData - If set to true, any script execution error is returned in qErrorData by the GetProgress method.
      @param qInteractOnError - If set to true, the script execution is halted on error and the engine is waiting for an interaction to be performed. If the result from the interaction is 1 (qDef.qResult is 1), the engine continues the script execution otherwise the execution is halted.
  This parameter is relevant only if the variable ErrorMode is set to 1 and the script is run in debug mode (qDebug is set to true when calling the DoReload method).
    */
    configureReload(qCancelOnScriptError: boolean, qUseErrorData: boolean, qInteractOnError: boolean): Promise<object>;
    /**    Cancels an ongoing reload. The reload of the app is stopped. The indexation can be canceled and true is still the return value of the reload task.
  
    */
    cancelReload(): Promise<object>;
    /**    Gets the current Backus-Naur Form (BNF) grammar of the Qlik engine scripting language. The BNF rules define the syntax for the script statements and the script or chart functions.
  In the Qlik engine BNF grammar, a token is a string of one or more characters that is significant as a group. For example, a token could be a function name, a number, a letter, a parenthesis, and so on.
      @deprecated
      @param qBnfType - Returns a set of rules defining the syntax for:
  
  • The script statements and the script functions if qBnfType is set to S.
  
  • The chart functions if qBnfType is set to E.
  
  One of:
  
  • S or SCRIPT_TEXT_SCRIPT
  
  • E or SCRIPT_TEXT_EXPRESSION
    */
    getBNF(qBnfType: string): Promise<Array<BNFDef>>;
    /**    Gets the list of all the script functions.
  
      @param qGroup - Name of the group.
  Default is all groups.
  
  One of:
  
  • ALL or FUNC_GROUP_ALL
  
  • U or FUNC_GROUP_UNKNOWN
  
  • NONE or FUNC_GROUP_NONE
  
  • AGGR or FUNC_GROUP_AGGR
  
  • NUM or FUNC_GROUP_NUMERIC
  
  • RNG or FUNC_GROUP_RANGE
  
  • EXP or FUNC_GROUP_EXPONENTIAL_AND_LOGARITHMIC
  
  • TRIG or FUNC_GROUP_TRIGONOMETRIC_AND_HYPERBOLIC
  
  • FIN or FUNC_GROUP_FINANCIAL
  
  • MATH or FUNC_GROUP_MATH_CONSTANT_AND_PARAM_FREE
  
  • COUNT or FUNC_GROUP_COUNTER
  
  • STR or FUNC_GROUP_STRING
  
  • MAPP or FUNC_GROUP_MAPPING
  
  • RCRD or FUNC_GROUP_INTER_RECORD
  
  • CND or FUNC_GROUP_CONDITIONAL
  
  • LOG or FUNC_GROUP_LOGICAL
  
  • NULL or FUNC_GROUP_NULL
  
  • SYS or FUNC_GROUP_SYSTEM
  
  • FILE or FUNC_GROUP_FILE
  
  • TBL or FUNC_GROUP_TABLE
  
  • DATE or FUNC_GROUP_DATE_AND_TIME
  
  • NUMI or FUNC_GROUP_NUMBER_INTERPRET
  
  • FRMT or FUNC_GROUP_FORMATTING
  
  • CLR or FUNC_GROUP_COLOR
  
  • RNK or FUNC_GROUP_RANKING
  
  • GEO or FUNC_GROUP_GEO
  
  • EXT or FUNC_GROUP_EXTERNAL
  
  • PROB or FUNC_GROUP_PROBABILITY
  
  • ARRAY or FUNC_GROUP_ARRAY
  
  • LEG or FUNC_GROUP_LEGACY
  
  • DB or FUNC_GROUP_DB_NATIVE
    */
    getFunctions(qGroup?: string): Promise<Array<Function>>;
    /**    Returns the list of the ODBC connectors that are installed in the system.
  
    */
    getOdbcDsns(): Promise<Array<OdbcDsn>>;
    /**    Returns the list of the OLEDB providers installed on the system.
  
    */
    getOleDbProviders(): Promise<Array<OleDbProvider>>;
    /**    Lists the databases in a ODBC, OLEDB or CUSTOM data source.
  
      @param qConnection - Information about the connection.
    */
    getDatabasesFromConnectionString(qConnection: Connection): Promise<Array<Database>>;
    /**    Checks if a connection string is valid.
  
      @param qConnection - Information about the connection.
    */
    isValidConnectionString(qConnection: Connection): Promise<boolean>;
    /**    Returns the folder where the apps are stored.
  This method applies only if running Qlik Sense Desktop.
  
    */
    getDefaultAppFolder(): Promise<string>;
    /**    Lists the logical drives in the system.
  This method applies only if running Qlik Sense Desktop.
  
    */
    getLogicalDriveStrings(): Promise<Array<DriveInfo>>;
    /**    Returns the files and folders located at a specified path.
  
      @param qPath - Absolute or relative path.
  Relative paths are relative to the default Apps folder.
  
  In Qlik Sense Enterprise:
  
  The list is generated by the QRS. The GetDocList method only returns documents the current user is allowed to access.
  
  In Qlik Sense Desktop:
  
  The apps are located in C:\\Users\<user name>\Documents\Qlik\Sense\Apps.
    */
    getFolderItemsForPath(qPath: string): Promise<Array<FolderItem>>;
    /**    Lists the supported code pages.
  
    */
    getSupportedCodePages(): Promise<Array<CodePage>>;
    /**    List the custom connectors available in the system.
  
      @param qReloadList - Sets if the list of custom connectors should be reloaded or not.
  If set to false, only the connectors that were returned the previous time are returned. If new connectors have been added since the last call to the GetCustomConnectors method was made, the new connectors are not returned.
  If set to true, the GetCustomConnectors method looks for new connectors in the file system.
  The default value is false.
    */
    getCustomConnectors(qReloadList?: boolean): Promise<Array<CustomConnector>>;
    /**    Lists the streams.
      @deprecated
  
    */
    getStreamList(): Promise<Array<NxStreamListEntry>>;
    /**    Returns the version number of the Qlik engine component.
  
    */
    engineVersion(): Promise<NxEngineVersion>;
    /**    Gets the current Backus-Naur Form (BNF) grammar of the Qlik engine scripting language, as well as a string hash calculated from that grammar. The BNF rules define the syntax for the script statements and the script or chart functions. If the hash changes between subsequent calls to this method, this indicates that the BNF has changed.
  In the Qlik engine grammars, a token is a string of one or more characters that is significant as a group. For example, a token could be a function name, a number, a letter, a parenthesis, and so on.
  
      @param qBnfType - The type of grammar to return:
  
  • The script statements and the script functions if qBnfType is set to S.
  
  • The chart functions if qBnfType is set to E.
  
  One of:
  
  • S or SCRIPT_TEXT_SCRIPT
  
  • E or SCRIPT_TEXT_EXPRESSION
    */
    getBaseBNF(qBnfType: string): Promise<GetBaseBNFReturn>;
    /**    Gets a string hash calculated from the current Backus-Naur Form (BNF) grammar of the Qlik engine scripting language. If the hash changes between subsequent calls to this method, this indicates that the BNF grammar has changed.
  
      @param qBnfType - The type of grammar to return:
  
  • The script statements and the script functions if qBnfType is set to S.
  
  • The chart functions if qBnfType is set to E.
  
  One of:
  
  • S or SCRIPT_TEXT_SCRIPT
  
  • E or SCRIPT_TEXT_EXPRESSION
    */
    getBaseBNFHash(qBnfType: string): Promise<string>;
    /**    Gets the current Backus-Naur Form (BNF) grammar of the Qlik engine scripting language, as well as a string hash calculated from that grammar. The BNF rules define the syntax for the script statements and the script or chart functions. If the hash changes between subsequent calls to this method, this indicates that the BNF has changed.
  In the Qlik engine grammars, a token is a string of one or more characters that is significant as a group. For example, a token could be a function name, a number, a letter, a parenthesis, and so on.
  
      @param qBnfType - The type of grammar to return:
  
  • S: returns the script statements and the script functions.
  
  • E: returns the chart functions.
  
  One of:
  
  • S or SCRIPT_TEXT_SCRIPT
  
  • E or SCRIPT_TEXT_EXPRESSION
    */
    getBaseBNFString(qBnfType: string): Promise<GetBaseBNFStringReturn>;
    /**    Save a copy of an app with a different name.
  Can be used to save a session app as an ordinary app.
      @deprecated
      @param qNewAppName - <Name of the saved app>
    */
    saveAs(qNewAppName: string): Promise<string>;
    on(event: EventTypes, listener: EventListener): void;
    once(event: EventTypes, listener: EventListener): void;
}
export type GraphMode = {
    [key: string]: any;
};
export type GroupBookmarkData = {
    qCyclePos?: number;
    qId?: string;
    [key: string]: any;
};
export type GroupStateInfo = {
    qCurrentItemName?: string;
    qGroupName?: string;
    [key: string]: any;
};
export type HyperCube = {
    /** The message displayed if calculation condition is not fulfilled. */
    qCalcCondMsg?: string;
    /** The order of the columns. */
    qColumnOrder?: Array<number>;
    /** Set of data.
  Is empty if nothing has been defined in qInitialDataFetch in HyperCubeDef. */
    qDataPages?: Array<NxDataPage>;
    /** Information on the dimension. */
    qDimensionInfo?: Array<NxDimensionInfo>;
    /** Sort order of the columns in the hypercube.
  Column numbers are separated by a comma.
  Example: [1,0,2] means that the first column to be sorted was the column 1, followed by the column 0 and the column 2. */
    qEffectiveInterColumnSortOrder?: Array<number>;
    /** This parameter is optional and is displayed in case of error. */
    qError?: NxValidationError;
    /** Aggregate for measures of all values in the field.
  The result value depends on the qAggrFunc defined in HyperCubeDef. */
    qGrandTotalRow?: Array<NxCell>;
    /** True if other row exists. */
    qHasOtherValues?: boolean;
    /** Is used for pivot tables only.
  If set to true, the formatting of the results is slightly different.
  This property is optional. */
    qIndentMode?: boolean;
    /** Is used for pivot tables only.
  Position of the last expended cell.
  This property is optional. */
    qLastExpandedPos?: NxCellPosition;
    /** Information on the measure. */
    qMeasureInfo?: Array<NxMeasureInfo>;
    /** Information about the mode of the visualization.
  
  One of:
  
  • S or DATA_MODE_STRAIGHT
  
  • P or DATA_MODE_PIVOT
  
  • K or DATA_MODE_PIVOT_STACK
  
  • T or DATA_MODE_TREE
  
  • D or DATA_MODE_DYNAMIC */
    qMode?: 'DATA_MODE_STRAIGHT' | 'DATA_MODE_PIVOT' | 'DATA_MODE_PIVOT_STACK' | 'DATA_MODE_TREE' | 'DATA_MODE_DYNAMIC' | string;
    /** Number of left dimensions.
  Default value is -1.
  The index related to each left dimension depends on the position of the pseudo dimension (if any).
  For example, a pivot table with:
  
  • Four dimensions in the following order: Country, City, Product and Category
  
  • One pseudo dimension in position 1
  
  • Three left dimensions.
  
  implies that:
  
  • The index 0 corresponds to the left dimension Country.
  
  • The index 1 corresponds to the pseudo dimension.
  
  • The index 2 corresponds to the left dimension City.
  
  • Product and Category are top dimensions.
  
  Another example:
  
  • Four dimensions in the following order: Country, City, Product and Category.
  
  • One pseudo dimension in position -1.
  
  • Three left dimensions.
  
  implies that:
  
  • The index -1 corresponds to the pseudo dimension; the pseudo dimension is the most to the right.
  
  • The index 0 corresponds to the left dimension Country.
  
  • The index 1 corresponds to the left dimension City.
  
  • The index 2 corresponds to the left dimension Product.
  
  • Category is a top dimension. */
    qNoOfLeftDims?: number;
    /** Set of data for pivot tables.
  Is empty if nothing has been defined in qInitialDataFetch in HyperCubeDef. */
    qPivotDataPages?: Array<NxPivotPage>;
    /** Defines the size of the hypercube. */
    qSize?: Size;
    /** Set of data for stacked tables.
  Is empty if nothing has been defined in qInitialDataFetch in HyperCubeDef. */
    qStackedDataPages?: Array<NxStackPage>;
    /** Name of the alternate state.
  Default is current selections $ . */
    qStateName?: string;
    /** Title of the hypercube, for example the title of a chart. */
    qTitle?: string;
    /** The total number of nodes on each dimension (only applicable when qMode = T ). */
    qTreeNodesOnDim?: Array<number>;
    [key: string]: any;
};
export type HyperCubeDef = {
    /** If this property is set to true, the cells are always expanded. It implies that it is not possible to collapse any cells.
  The default value is false. */
    qAlwaysFullyExpanded?: boolean;
    /** Specifies a calculation condition, which must be fulfilled for the hypercube to be (re)calculated.
  As long as the condition is not met, the engine does not perform a new calculation.
  This property is optional. By default, there is no calculation condition. */
    qCalcCond?: ValueExpr;
    /** Specifies a calculation condition object.
  If CalcCondition.Cond is not fulfilled, the hypercube is not calculated and CalcCondition.Msg is evaluated.
  By default, there is no calculation condition.
  This property is optional. */
    qCalcCondition?: NxCalcCond;
    /** The order of the columns. */
    qColumnOrder?: Array<number>;
    /** Set Expression valid for the whole cube. Used to limit computations to the set specified. */
    qContextSetExpression?: string;
    /** Array of dimensions. */
    qDimensions?: Array<NxDimension>;
    /** Hypercube Modifier Dynamic script string */
    qDynamicScript?: Array<string>;
    /** Expansion state per dimension for pivot mode ( qMode is P). */
    qExpansionState?: Array<ExpansionData>;
    /** This property applies for pivot tables and allows to change the layout of the table. An indentation is added to the beginning of each row.
  The default value is false. */
    qIndentMode?: boolean;
    /** Initial data set. */
    qInitialDataFetch?: Array<NxPage>;
    /** Defines the sort order of the columns in the hypercube.
  Column numbers are separated by a comma.
  Example: [1,0,2] means that the first column to be sorted should be the column 1, followed by the column 0 and the column 2.
  The default sort order is the order in which the dimensions and measures have been defined in the hypercube. By default, the pseudo-dimension (if any) is the most to the right in the array.
  The index of the pseudo-dimension (if any) is -1.
  Pseudo dimensions only apply for pivot tables with more than one measure.
  A pseudo dimension groups together the measures defined in a pivot table. You can neither collapse/expand a pseudo dimension nor make any selections in it.
  Stacked pivot tables can only contain one measure. */
    qInterColumnSortOrder?: Array<number>;
    /** Maximum number of cells for an initial data fetch (set in qInitialDataFetch ) when in stacked mode ( qMode is K).
  The default value is 5000.
  @defaultValue 5000 */
    qMaxStackedCells?: number;
    /** Array of measures. */
    qMeasures?: Array<NxMeasure>;
    /** Defines the way the data are handled internally by the engine.
  Default value is DATA_MODE_STRAIGHT .
  A pivot table can contain several dimensions and measures whereas a stacked pivot table can contain several dimensions but only one measure.
  
  One of:
  
  • S or DATA_MODE_STRAIGHT
  
  • P or DATA_MODE_PIVOT
  
  • K or DATA_MODE_PIVOT_STACK
  
  • T or DATA_MODE_TREE
  
  • D or DATA_MODE_DYNAMIC
  @defaultValue "DATA_MODE_STRAIGHT" */
    qMode?: 'DATA_MODE_STRAIGHT' | 'DATA_MODE_PIVOT' | 'DATA_MODE_PIVOT_STACK' | 'DATA_MODE_TREE' | 'DATA_MODE_DYNAMIC' | string;
    /** Number of left dimensions.
  Default value is -1. In that case, all dimensions are left dimensions.
  Hidden dimensions (e.g. due to unfulfilled calc condition on dimension level) is still counted in this context.
  The index related to each left dimension depends on the position of the pseudo dimension (if any).
  For example, a pivot table with:
  
  • Four dimensions in the following order: Country, City, Product and Category.
  
  • One pseudo dimension in position 1 (the position is defined in qInterColumnSortOrder )
  qInterColumnSortOrder is (0,-1,1,2,3).
  
  • Three left dimensions ( qNoOfLeftDims is set to 3).
  
  implies that:
  
  • The index 0 corresponds to the left dimension Country.
  
  • The index 1 corresponds to the pseudo dimension.
  
  • The index 2 corresponds to the left dimension City.
  
  • Product and Category are top dimensions.
  
  Another example:
  
  • Four dimensions in the following order: Country, City, Product and Category.
  
  • Three left dimensions ( qNoOfLeftDims is set to 3).
  
  • One pseudo dimension.
  
  • The property qInterColumnSortOrder is left empty.
  
  Implies that:
  
  • The index 0 corresponds to the left dimension Country.
  
  • The index 1 corresponds to the left dimension City.
  
  • The index 2 corresponds to the left dimension Product.
  
  • Category is a top dimension.
  
  • The pseudo dimension is a top dimension.
  @defaultValue -1 */
    qNoOfLeftDims?: number;
    /** If this property is set to true, the missing symbols (if any) are replaced by 0 if the value is a numeric and by an empty string if the value is a string.
  The default value is false. */
    qPopulateMissing?: boolean;
    /** @defaultValue -1 */
    qPseudoDimPos?: number;
    /**
  One of:
  
  • N or DATA_REDUCTION_NONE
  
  • D1 or DATA_REDUCTION_ONEDIM
  
  • S or DATA_REDUCTION_SCATTERED
  
  • C or DATA_REDUCTION_CLUSTERED
  
  • ST or DATA_REDUCTION_STACKED */
    qReductionMode?: 'DATA_REDUCTION_NONE' | 'DATA_REDUCTION_ONEDIM' | 'DATA_REDUCTION_SCATTERED' | 'DATA_REDUCTION_CLUSTERED' | 'DATA_REDUCTION_STACKED' | string;
    /** If set to true, the total (if any) is shown on the first row.
  The default value is false. */
    qShowTotalsAbove?: boolean;
    /** To enable the sorting by ascending or descending order in the values of a measure.
  This property applies to pivot tables and stacked pivot tables.
  In the case of a pivot table, the measure or pseudo dimension should be defined as a top dimension. The sorting is restricted to the values of the first measure in a pivot table. */
    qSortbyYValue?: number;
    /** Name of the alternate state.
  Default is current selections $ . */
    qStateName?: string;
    /** Removes missing values. */
    qSuppressMissing?: boolean;
    /** Removes zero values. */
    qSuppressZero?: boolean;
    /** Title of the hypercube, for example the title of a chart. */
    qTitle?: StringExpr;
    [key: string]: any;
};
export type InputFieldItem = {
    qFieldName?: string;
    qPackedHashKeys?: Array<number>;
    qValues?: Array<FieldValue>;
    [key: string]: any;
};
export type InterFieldSortData = {
    qName?: string;
    qReversed?: boolean;
    [key: string]: any;
};
export type InteractDef = {
    /** Buttons displayed in the message box dialog.
  This property is relevant if qType is *IT_MSGBOX*.
  One of:
  
  • 0 means that the qButtons property is not relevant.
  
  • 17 means that the message box contains the OK and Cancel buttons or the stop -sign icon. */
    qButtons?: number;
    /** This property is set to true if the returned statement is an hidden script statement. */
    qHidden?: boolean;
    /** Is not used in Qlik Sense. */
    qInput?: string;
    /** Next script statement to be executed.
  This property is used if the type of interaction is *IT_SCRIPTLINE*. */
    qLine?: string;
    /** Message used in the message box dialog.
  This property is relevant if qType is *IT_MSGBOX*. */
    qMsg?: string;
    /** First line number of the next statement to be executed.
  This property is used if the type of interaction is *IT_SCRIPTLINE*. */
    qNewLineNr?: number;
    /** First line number of the previously executed statement.
  This property is used if the type of interaction is *IT_SCRIPTLINE*. */
    qOldLineNr?: number;
    /** Path specified by the Include script variable.
  This property is used if the type of interaction is *IT_SCRIPTLINE*.
  Example of an Include variable:
  $(Include=lib:\\\MyDataFiles\abc.txt); */
    qPath?: string;
    /** Not relevant for describing the requested user interaction. */
    qResult?: number;
    /** Title used in the message box dialog.
  This property is relevant if qType is *IT_MSGBOX*. */
    qTitle?: string;
    /** Interaction type.
  
  One of:
  
  • IT_MSGBOX
  
  • IT_SCRIPTLINE
  
  • IT_BREAK
  
  • IT_INPUT
  
  • IT_END
  
  • IT_PASSWD
  
  • IT_USERNAME */
    qType?: 'IT_MSGBOX' | 'IT_SCRIPTLINE' | 'IT_BREAK' | 'IT_INPUT' | 'IT_END' | 'IT_PASSWD' | 'IT_USERNAME' | string;
    [key: string]: any;
};
export type InteractType = {
    [key: string]: any;
};
export type JsonObject = {
    [key: string]: any;
};
export type KeyType = {
    [key: string]: any;
};
export type LayoutBookmarkData = {
    qActive?: boolean;
    qId?: string;
    qScrollPos?: ScrollPosition;
    qShowMode?: number;
    [key: string]: any;
};
export type LayoutExclude = {
    [key: string]: any;
};
export type LayoutFieldInfo = {
    /** Number of excluded values in the field. */
    qExcludedValuesCount?: number;
    /** The name of the field. */
    qFieldName?: string;
    /** Number of selected values in the field. */
    qValuesCount?: number;
    [key: string]: any;
};
export type LineageInfo = {
    /** A string indicating the origin of the data:
  
  • [filename]: the data comes from a local file.
  
  • INLINE: the data is entered inline in the load script.
  
  • RESIDENT: the data comes from a resident table. The table name is listed.
  
  • AUTOGENERATE: the data is generated from the load script (no external table of data source).
  
  • Provider: the data comes from a data connection. The connector source name is listed.
  
  • [webfile]: the data comes from a web-based file.
  
  • STORE: path to QVD or TXT file where data is stored.
  
  • EXTENSION: the data comes from a Server Side Extension (SSE). */
    qDiscriminator?: string;
    /** The LOAD and SELECT script statements from the data load script. */
    qStatement?: string;
    [key: string]: any;
};
export type ListObject = {
    /** Set of data.
  Is empty if nothing has been defined in qInitialDataFetch in ListObjectDef. */
    qDataPages?: Array<NxDataPage>;
    /** Information about the dimension. */
    qDimensionInfo?: NxDimensionInfo;
    /** This parameter is optional and is displayed in case of error. */
    qError?: NxValidationError;
    /** Lists the expressions in the list object. */
    qExpressions?: Array<NxListObjectExpression>;
    /** Defines the size of a list object. */
    qSize?: Size;
    /** Name of the alternate state.
  Default is current selections $ . */
    qStateName?: string;
    [key: string]: any;
};
export type ListObjectDef = {
    /** Defines the sorting by state. */
    qAutoSortByState?: NxAutoSortByStateDef;
    /** Refers to a dimension stored in the list object. */
    qDef?: NxInlineDimensionDef;
    /** If set to true, reduces the set of states returned.
  Supported for Direct Query mode only.
  Default is false. */
    qDirectQuerySimplifiedView?: boolean;
    /** Lists the expressions in the list object.
  This parameter is optional. */
    qExpressions?: Array<NxListObjectExpressionDef>;
    /** Defines the frequency mode. The frequency mode is used to calculate the frequency of a value in a list object.
  Default is NX_FREQUENCY_NONE .
  This parameter is optional.
  
  One of:
  
  • N or NX_FREQUENCY_NONE
  
  • V or NX_FREQUENCY_VALUE
  
  • P or NX_FREQUENCY_PERCENT
  
  • R or NX_FREQUENCY_RELATIVE
  @defaultValue "NX_FREQUENCY_NONE" */
    qFrequencyMode?: 'NX_FREQUENCY_NONE' | 'NX_FREQUENCY_VALUE' | 'NX_FREQUENCY_PERCENT' | 'NX_FREQUENCY_RELATIVE' | string;
    /** Fetches an initial data set. */
    qInitialDataFetch?: Array<NxPage>;
    /** Refers to a dimension stored in the library. */
    qLibraryId?: string;
    /** If set to true, alternative values are allowed in qData .
  If set to false, no alternative values are displayed in qData . Values are excluded instead.
  The default value is false.
  Note that on the contrary, the qStateCounts parameter counts the excluded values as alternative values.
  This parameter is optional. */
    qShowAlternatives?: boolean;
    /** Name of the alternate state.
  Default is current selections $ . */
    qStateName?: string;
    [key: string]: any;
};
export type LocaleInfo = {
    /** Is set to true if broken weeks are allowed in a year.
  According to ISO 8601, no broken weeks should be allowed.
  This property is not shown if set to false.
  If qBrokenWeeks is set to true, qReferenceDay is irrelevant.
  If this property has not been set in a script, the returned value comes from the Windows operating system. */
    qBrokenWeeks?: boolean;
    /** Information about the calendar. */
    qCalendarStrings?: CalendarStrings;
    /** Locale name (following language tagging convention RFC 4646):
  < language>-<REGION>
  Where:
  
  • language is a lowercase ISO  639 language code
  
  • REGION specifies an uppercase ISO 3166 country code.
  
  If this property has not been set in a script, the returned value comes from the Windows operating system. */
    qCollation?: string;
    /** Current year. */
    qCurrentYear?: number;
    /** Date format.
  Example: YYYY-MM-DD */
    qDateFmt?: string;
    /** Decimal separator. */
    qDecimalSep?: string;
    /** First month of the year, starting from 1.
  According to ISO 8601, January is the first month of the year.
  
  • 1 = January
  
  • 2 = February
  
  • 12 = January
  
  If this property has not been set in a script, the returned value comes from the Windows operating system. */
    qFirstMonthOfYear?: number;
    /** First day of the week, starting from 0.
  According to ISO 8601, Monday is the first day of the week.
  
  • 0 = Monday
  
  • 1 = Tuesday
  
  • ...
  
  • 6 = Sunday
  
  If this property has not been set in a script, the returned value comes from the Windows operating system. */
    qFirstWeekDay?: number;
    /** List separator. */
    qListSep?: string;
    /** Money decimal separator. */
    qMoneyDecimalSep?: string;
    /** Money format.
  Example: .0,00 kr;-#.##0,00 kr:: */
    qMoneyFmt?: string;
    /** Money thousand separator. */
    qMoneyThousandSep?: string;
    /** Number format.
  Example: 3:k;6:M;9:G;12:T;15:P;18:E;21:Z;24:Y;-3:m;-6:μ;-9:n;-12:p;-15:f;-18:a;-21:z;-24:y */
    qNumericalAbbreviation?: string;
    /** Day in the year that is always in week 1.
  According to ISO 8601, January 4th should always be part of the first week of the year ( qReferenceDay =4).
  Recommended values are in the range 1 and 7.
  If this property has not been set in a script, the returned value comes from the Windows operating system.
  This property is not relevant if there are broken weeks in the year. */
    qReferenceDay?: number;
    /** Thousand separator. */
    qThousandSep?: string;
    /** Time format.
  Example: hh:mm:ss */
    qTimeFmt?: string;
    /** Time stamp format.
  Example: YYYY-MM-DD hh:mm:ss[.fff] */
    qTimestampFmt?: string;
    [key: string]: any;
};
export type LogOnType = {
    [key: string]: any;
};
export type MeasureList = {
    /** Information about the list of measures. */
    qItems?: Array<NxContainerEntry>;
    /** Should be set to create an object that is linked to another object. Enter the identifier of the linking object (i.e the object you want to link to).
  If you do not want to link your object, set this parameter to an empty string. */
    qExtendsId?: string;
    qInfo?: NxInfo;
    /** Defines the list of measures. */
    qMeasureListDef?: MeasureListQMeasureListDef;
    /** Used to collect meta data.
  
  Properties
  Semantic type with an empty structure. */
    qMetaDef?: object;
    /** Name of the alternate state.
  Default is current selections _$_ . Default:$
  @defaultValue "$" */
    qStateName?: string;
    [key: string]: any;
};
export type MeasureListDef = {
    /** Data */
    qData?: JsonObject;
    /** Type of the list. */
    qType?: string;
    [key: string]: any;
};
export type MediaList = {
    /** Information about the list of media files.
  In Qlik Sense Desktop, the media files are retrieved from:
  %userprofile%\Documents\Qlik\Sense\Content\Default
  In Qlik Sense Enterprise, the media files are retrieved from:
  <installation_directory>\Qlik\Sense\Repository\Content\Default
  The default installation directory is ProgramData . */
    qItems?: Array<MediaListItem>;
    [key: string]: any;
};
export type MediaListDef = {
    [key: string]: any;
};
export type MediaListItem = {
    /** Relative path to the media file.
  Media files located:
  
  • in the /content/default/ folder are outside the qvf file.
  
  • in the /media/ folder are embedded in the qvf file. */
    qUrl?: string;
    /** Relative path to the media file. The URL is static.
  Media files located:
  
  • in the /content/default/ folder are outside the qvf file.
  
  • in the /media/ folder are embedded in the qvf file. */
    qUrlDef?: string;
    [key: string]: any;
};
export type MetaData = {
    qAccessList?: Array<string>;
    qHidden?: boolean;
    qLinkedTo?: Array<string>;
    qPersonalEditionHash_OBSOLETE?: string;
    qRestrictedAccess?: boolean;
    qShared?: boolean;
    qSheetId?: string;
    qTemporary?: boolean;
    qUtcModifyTime?: number;
    [key: string]: any;
};
export type NxAppLayout = {
    /** In Qlik Sense Enterprise, this property corresponds to the app identifier (GUID).
  In Qlik Sense Desktop, this property corresponds to the full path of the app. */
    qFileName?: string;
    /** Is set to true if the app contains data following a script reload. */
    qHasData?: boolean;
    /** Is set to true if a script is defined in the app. */
    qHasScript?: boolean;
    /** If set to true, the app is in BDI Direct Query Mode. */
    qIsBDILiveMode?: boolean;
    /** If set to true, the app is in Direct Query Mode. */
    qIsDirectQueryMode?: boolean;
    /** If set to true, it means that the app was opened without loading its data. */
    qIsOpenedWithoutData?: boolean;
    /** If set to true, the app is a Session App, i.e. not persistent. */
    qIsSessionApp?: boolean;
    /** Date and time of the last reload of the app in ISO format. */
    qLastReloadTime?: string;
    /** Information about the locale. */
    qLocaleInfo?: LocaleInfo;
    /** Information on publishing and permissions. */
    qMeta?: NxMeta;
    /** Is set to true if the app has been updated since the last save. */
    qModified?: boolean;
    /** If set to true, it means that the app is read-only. */
    qReadOnly?: boolean;
    /** Array of alternate states. */
    qStateNames?: Array<string>;
    /** App thumbnail. */
    qThumbnail?: StaticContentUrl;
    /** Title of the app. */
    qTitle?: string;
    /** Array of features not supported by the app. */
    qUnsupportedFeatures?: Array<string>;
    /** Enable chart animations for all sheet objects Default:true
  @defaultValue true */
    chartAnimations?: boolean;
    /** Disables the hover menu for all sheet objects Default:false */
    disableCellNavMenu?: boolean;
    /** Should be set to create an object that is linked to another object. Enter the identifier of the linking object (i.e the object you want to link to).
  If you do not want to link your object, set this parameter to an empty string. */
    qExtendsId?: string;
    qInfo?: NxInfo;
    /** Name of the alternate state.
  Default is current selections _$_ . Default:$
  @defaultValue "$" */
    qStateName?: string;
    /** Right to left layout for right-to-left languages Default:false */
    rtl?: boolean;
    /** Position of the sheet logo. right|left|center */
    sheetLogoPosition?: string;
    sheetLogoThumbnail?: NxAppPropertiesSheetLogoThumbnail;
    /** Color of the sheet background. Left side color when using gradient */
    sheetTitleBgColor?: string;
    /** Color of the sheet title text */
    sheetTitleColor?: string;
    /** Right side background color when using gradient */
    sheetTitleGradientColor?: string;
    /** The theme used across the app Default:horizon
  @defaultValue "horizon" */
    theme?: string;
    [key: string]: any;
};
export type NxAppProperties = {
    /** If true the app has section access configured. */
    qHasSectionAccess?: boolean;
    /** Last reload time of the app. */
    qLastReloadTime?: string;
    /** Internal property reserved for app migration.
  Patch version of the app.
  Do not update. */
    qMigrationHash?: string;
    /** Internal property reserved for app migration.
  The app is saved in this version of the product.
  Do not update. */
    qSavedInProductVersion?: string;
    /** App thumbnail. */
    qThumbnail?: StaticContentUrlDef;
    /** App title. */
    qTitle?: string;
    /** Enable chart animations for all sheet objects Default:true
  @defaultValue true */
    chartAnimations?: boolean;
    /** Disables the hover menu for all sheet objects Default:false */
    disableCellNavMenu?: boolean;
    /** Should be set to create an object that is linked to another object. Enter the identifier of the linking object (i.e the object you want to link to).
  If you do not want to link your object, set this parameter to an empty string. */
    qExtendsId?: string;
    qInfo?: NxInfo;
    /** Used to collect meta data.
  
  Properties
  Semantic type with an empty structure. */
    qMetaDef?: object;
    /** Name of the alternate state.
  Default is current selections _$_ . Default:$
  @defaultValue "$" */
    qStateName?: string;
    /** Right to left layout for right-to-left languages Default:false */
    rtl?: boolean;
    /** Position of the sheet logo. right|left|center */
    sheetLogoPosition?: string;
    sheetLogoThumbnail?: NxAppPropertiesSheetLogoThumbnail;
    /** Color of the sheet background. Left side color when using gradient */
    sheetTitleBgColor?: string;
    /** Color of the sheet title text */
    sheetTitleColor?: string;
    /** Right side background color when using gradient */
    sheetTitleGradientColor?: string;
    /** The theme used across the app Default:horizon
  @defaultValue "horizon" */
    theme?: string;
    [key: string]: any;
};
export type NxAttrDimDef = {
    /** If set to true, this attribute will not affect the number of rows in the cube. */
    qAttribute?: boolean;
    /** Expression or field name. */
    qDef?: string;
    /** LibraryId for dimension. */
    qLibraryId?: string;
    /** Sorting. */
    qSortBy?: SortCriteria;
    [key: string]: any;
};
export type NxAttrDimInfo = {
    /** Cardinality of the attribute expression. */
    qCardinal?: number;
    /** Validation error. */
    qError?: NxValidationError;
    /** The title for the attribute dimension. */
    qFallbackTitle?: string;
    /** True if this is a calculated dimension. */
    qIsCalculated?: boolean;
    /** The Locked value of the dimension. */
    qLocked?: boolean;
    /** Number of rows. */
    qSize?: Size;
    [key: string]: any;
};
export type NxAttrExprDef = {
    /** If set to true, this measure will not affect the number of rows in the cube. */
    qAttribute?: boolean;
    /** Definition of the attribute expression.
  Example: "Max(OrderID)" */
    qExpression?: string;
    /** Label of the attribute expression. */
    qLabel?: string;
    /** Optional expression used for dynamic label. */
    qLabelExpression?: string;
    /** Definition of the attribute expression stored in the library.
  Example: "MyGenericMeasure" */
    qLibraryId?: string;
    /** Format of the field.
  This parameter is optional. */
    qNumFormat?: FieldAttributes;
    [key: string]: any;
};
export type NxAttrExprInfo = {
    qFallbackTitle?: string;
    /** This parameter is set to true if qNumFormat is set to U (unknown). The engine guesses the type of the field based on the field's expression. */
    qIsAutoFormat?: boolean;
    /** Maximum value. */
    qMax?: number;
    /** String version of the maximum Value. */
    qMaxText?: string;
    /** Minimum value. */
    qMin?: number;
    /** String version of the minimum Value. */
    qMinText?: string;
    /** Format of the field.
  This parameter is optional. */
    qNumFormat?: FieldAttributes;
    [key: string]: any;
};
export type NxAttributeDimValues = {
    /** List of values. */
    qValues?: Array<NxSimpleDimValue>;
    [key: string]: any;
};
export type NxAttributeExpressionValues = {
    /** List of attribute expressions values. */
    qValues?: Array<NxSimpleValue>;
    [key: string]: any;
};
export type NxAutoSortByStateDef = {
    /** This parameter applies to list objects.
  If the total number of values in the list object is greater than the value set in qDisplayNumberOfRows , the selected lines are promoted at the top of the list object.
  If qDisplayNumberOfRows is set to a negative value or to 0, the sort by state is disabled. */
    qDisplayNumberOfRows?: number;
    [key: string]: any;
};
export type NxAxisData = {
    /** List of axis data. */
    qAxis?: Array<NxAxisTicks>;
    [key: string]: any;
};
export type NxAxisTicks = {
    /** Name of the derived definition. */
    qName?: string;
    /** List of tags. */
    qTags?: Array<string>;
    /** List of ticks. */
    qTicks?: Array<NxTickCell>;
    [key: string]: any;
};
export type NxBookmark = {
    /** Softpatches to be applied with this bookmark. */
    qPatches?: Array<NxPatches>;
    /** List of selections for each state. */
    qStateData?: Array<AlternateStateData>;
    /** Time when the bookmark was created. */
    qUtcModifyTime?: number;
    /** List of the variables in the app at the time the bookmark was created. */
    qVariableItems?: Array<BookmarkVariableItem>;
    [key: string]: any;
};
export type NxCalcCond = {
    /** Condition for calculating an hypercube, dimension or measure. */
    qCond?: ValueExpr;
    /** Evaluated if Cond is not fullfilled. */
    qMsg?: StringExpr;
    [key: string]: any;
};
export type NxCardinalities = {
    /** Number of distinct values when paging for AllValues in a Tree Structure.
  Default is -1 if not part of a Tree structure.
  @defaultValue -1 */
    qAllValuesCardinal?: number;
    /** Number of distinct field values. */
    qCardinal?: number;
    /** Number of distinct hypercube values. */
    qHypercubeCardinal?: number;
    [key: string]: any;
};
export type NxCell = {
    /** Attribute dimensions values. */
    qAttrDims?: NxAttributeDimValues;
    /** Attribute expression values. */
    qAttrExps?: NxAttributeExpressionValues;
    /** Rank number of the value, starting from 0.
  If the element number is a negative number, it means that the returned value is not an element number.
  You can get the following negative values:
  
  • -1: the cell is a Total cell. It shows a total.
  
  • -2: the cell is a Null cell.
  
  • -3: the cell belongs to the group Others .
  
  • -4: the cell is empty. Applies to pivot tables. */
    qElemNumber?: number;
    /** Frequency of the value.
  This parameter is optional. */
    qFrequency?: string;
    /** Search hits.
  The search hits are highlighted.
  This parameter is optional. */
    qHighlightRanges?: NxHighlightRanges;
    qInExtRow?: boolean;
    /** Is set to true , if qText and qNum are empty.
  This parameter is optional. The default value is false . */
    qIsEmpty?: boolean;
    /** Is set to true if the value is Null. */
    qIsNull?: boolean;
    /** Is set to true if the cell belongs to the group Others .
  Dimension values can be set as Others depending on what has been defined in OtherTotalSpecProp .
  This parameter is optional. The default value is false .
  Not applicable to list objects. */
    qIsOtherCell?: boolean;
    /** Is set to true if a total is displayed in the cell.
  This parameter is optional. The default value is false .
  Not applicable to list objects. */
    qIsTotalCell?: boolean;
    qMiniChart?: NxMiniChartData;
    /** A value.
  This parameter is optional. */
    qNum?: number;
    /** State of the value.
  The default state for a measure is L.
  
  One of:
  
  • L or LOCKED
  
  • S or SELECTED
  
  • O or OPTION
  
  • D or DESELECTED
  
  • A or ALTERNATIVE
  
  • X or EXCLUDED
  
  • XS or EXCL_SELECTED
  
  • XL or EXCL_LOCKED
  
  • NSTATES */
    qState?: 'LOCKED' | 'SELECTED' | 'OPTION' | 'DESELECTED' | 'ALTERNATIVE' | 'EXCLUDED' | 'EXCL_SELECTED' | 'EXCL_LOCKED' | 'NSTATES' | string;
    /** Some text.
  This parameter is optional. */
    qText?: string;
    [key: string]: any;
};
export type NxCellPosition = {
    /** Position of the cell on the x-axis. */
    qx?: number;
    /** Position of the cell on the y-axis. */
    qy?: number;
    [key: string]: any;
};
export type NxCellRows = Array<NxCell>;
export type NxContainerEntry = {
    /** Set of data. */
    qData?: JsonObject;
    /** Information about the object. */
    qInfo?: NxInfo;
    /** Information on publishing and permissions. */
    qMeta?: NxMeta;
    [key: string]: any;
};
export type NxContinuousDataOptions = {
    /** End value. */
    qEnd?: number;
    /** Maximum number of ticks. */
    qMaxNbrTicks?: number;
    /** Maximum number of lines.
  @defaultValue -1 */
    qMaxNumberLines?: number;
    /** Number of bins for binning. */
    qNbrPoints?: number;
    /** Start value. */
    qStart?: number;
    [key: string]: any;
};
export type NxContinuousMode = {
    [key: string]: any;
};
export type NxContinuousRangeSelectInfo = {
    /** Dimension index. */
    qDimIx?: number;
    /** Range information. */
    qRange?: Range;
    [key: string]: any;
};
export type NxCurrentSelectionItem = {
    /** Name of the field that is selected. */
    qField?: string;
    /** Optional parameter. Indicates if the selection is to be hidden in the Selections bar.
  Is set to true if the current selection is hidden. */
    qIsHidden?: boolean;
    /** This parameter is displayed if its value is true.
  Is set to true if the field is a numeric.
  This parameter is optional. */
    qIsNum?: boolean;
    /** This parameter is displayed if its value is true.
  Is set to true if the field is locked.
  This parameter is optional. */
    qLocked?: boolean;
    /** Information about the fields that are not selected. */
    qNotSelectedFieldSelectionInfo?: Array<NxFieldSelectionInfo>;
    /** This parameter is displayed if its value is true.
  Property that is set to a field. Is set to true if the field cannot be unselected.
  This parameter is optional. */
    qOneAndOnlyOne?: boolean;
    /** Information about the range of selected values.
  Is empty if there is no range of selected values. */
    qRangeInfo?: Array<RangeSelectInfo>;
    /** Label that, if defined, is displayed in current selections instead of the actual expression. */
    qReadableName?: string;
    /** Values that are selected. */
    qSelected?: string;
    /** Number of values that are selected. */
    qSelectedCount?: number;
    /** Information about the fields that are selected. */
    qSelectedFieldSelectionInfo?: Array<NxFieldSelectionInfo>;
    /** Maximum values to show in the current selections.
  The default value is 6. */
    qSelectionThreshold?: number;
    /** Sort index of the field. Indexing starts from 0. */
    qSortIndex?: number;
    /** Number of values in a particular state. */
    qStateCounts?: NxStateCounts;
    /** Text that was used for the search. This parameter is filled when searching for a value and selecting it.
  This parameter is optional. */
    qTextSearch?: string;
    /** Number of values in the field. */
    qTotal?: number;
    [key: string]: any;
};
export type NxDataAreaPage = {
    /** Height of the page.
  The difference between qTop and qHeight gives the lowest possible value of the second measure (the measure on the y-axis). */
    qHeight?: number;
    /** Position from the left.
  Corresponds to the lowest possible value of the first measure (the measure on the x-axis). */
    qLeft?: number;
    /** Position from the top.
  Corresponds to the highest possible value of the second measure (the measure on the y-axis). */
    qTop?: number;
    /** Width of the page.
  Corresponds to the highest possible value of the first measure (the measure on the x-axis). */
    qWidth?: number;
    [key: string]: any;
};
export type NxDataPage = {
    /** Size and offset of the data in the matrix. */
    qArea?: Rect;
    /** Is set to true, if the data have been reduced.
  The default value is false. */
    qIsReduced?: boolean;
    /** Array of data. */
    qMatrix?: Array<NxCellRows>;
    /** Array of tails.
  Is used for hypercube objects with multiple dimensions. It might happen that due to the window size some elements in a group cannot be displayed in the same page as the other elements of the group. Elements of a group of dimensions can be part of the previous or the next tail.
  If there is no tail, the array is empty [ ] . */
    qTails?: Array<NxGroupTail>;
    [key: string]: any;
};
export type NxDataReductionMode = {
    [key: string]: any;
};
export type NxDerivedField = {
    /** Expression of the derived field.
  Example:
  If qName is OrderDate.MyDefinition.Year , the expression is as follows:
  =${Mydefinition(OrderDate).Year} */
    qExpr?: string;
    /** Identifier of the derived field.
  The identifier is unique. */
    qId?: string;
    /** Method name associated to the derived field. */
    qMethod?: string;
    /** Combination of field name, definition and method.
  Example:
  OrderDate.MyDefinition.Year */
    qName?: string;
    /** List of tags. */
    qTags?: Array<string>;
    [key: string]: any;
};
export type NxDerivedFieldDescriptionList = {
    /** Information about the derived fields. */
    qDerivedFieldLists?: Array<NxDerivedFieldsData>;
    [key: string]: any;
};
export type NxDerivedFieldsData = {
    /** Name of the derived definition. */
    qDerivedDefinitionName?: string;
    /** List of the derived fields. */
    qFieldDefs?: Array<NxDerivedField>;
    /** List of the derived groups. */
    qGroupDefs?: Array<NxDerivedGroup>;
    /** List of tags on the derived fields. */
    qTags?: Array<string>;
    [key: string]: any;
};
export type NxDerivedGroup = {
    /** List of the derived fields in the group. */
    qFieldDefs?: Array<string>;
    /** Grouping type.
  The grouping should be either H or C (Grouping is mandatory for derived definitions).
  The parameter is mandatory.
  
  One of:
  
  • N or GRP_NX_NONE
  
  • H or GRP_NX_HIEARCHY
  
  • C or GRP_NX_COLLECTION */
    qGrouping?: 'GRP_NX_NONE' | 'GRP_NX_HIEARCHY' | 'GRP_NX_COLLECTION' | string;
    /** Identifier of the group. */
    qId?: string;
    /** Name of the derived group. */
    qName?: string;
    [key: string]: any;
};
export type NxDimCellType = {
    [key: string]: any;
};
export type NxDimension = {
    /** List of attribute dimensions. */
    qAttributeDimensions?: Array<NxAttrDimDef>;
    /** List of attribute expressions. */
    qAttributeExpressions?: Array<NxAttrExprDef>;
    /** Specifies a calculation condition, which must be fulfilled for the dimension to be calculated.
  If the calculation condition is not met, the dimension is excluded from the calculation.
  By default, there is no calculation condition.
  This property is optional. */
    qCalcCond?: ValueExpr;
    /** Specifies a calculation condition object.
  If CalcCondition.Cond is not fulfilled, the dimension is excluded from the calculation and CalcCondition.Msg is evaluated.
  By default, there is no calculation condition.
  This property is optional. */
    qCalcCondition?: NxCalcCond;
    /** Refers to a dimension stored in the hypercube. */
    qDef?: NxInlineDimensionDef;
    qIncludeElemValue?: boolean;
    /** Refers to a dimension stored in the library. */
    qLibraryId?: string;
    /** If set to true, no null values are returned. */
    qNullSuppression?: boolean;
    /** This property is used when some dimension limits are set.
  Label of the Others group. The default label is Others .
  Example:
  "qOtherLabel":"= <label>"
  or
  "qOtherLabel":{"qExpr":"= <label>"}
  Where:
  
  • < label > is the label of the Others group. */
    qOtherLabel?: StringExpr;
    /** Sets the dimension limits. Each dimension of a hypercube is configured separately.
  Defines if some values (grouped as Others ) should be grouped together in the visualization.
  For example in a pie chart all values lower than 200 could be grouped together. */
    qOtherTotalSpec?: OtherTotalSpecProp;
    /** If set to true, all dimension values are shown. */
    qShowAll?: boolean;
    qShowTotal?: boolean;
    /** If this property is set, the total of the calculated values is returned.
  The default label is Total .
  Example:
  "qTotalLabel":"= <label>"
  or
  "qTotalLabel":{"qExpr":"= <label>"}
  Where:
  
  • < label > is the label of the Total group. */
    qTotalLabel?: StringExpr;
    [key: string]: any;
};
export type NxDimensionInfo = {
    /** Length of the longest value in the field. */
    qApprMaxGlyphCount?: number;
    /** Array of attribute dimensions. */
    qAttrDimInfo?: Array<NxAttrDimInfo>;
    /** Array of attribute expressions. */
    qAttrExprInfo?: Array<NxAttrExprInfo>;
    /** The message displayed if calculation condition is not fulfilled. */
    qCalcCondMsg?: string;
    /** Number of distinct field values. */
    qCardinal?: number;
    /** Dimension Cardinalities */
    qCardinalities?: NxCardinalities;
    /** Is continuous axis used. */
    qContinuousAxes?: boolean;
    /** Is derived field is used as a dimension. */
    qDerivedField?: boolean;
    /** Binary format of the field.
  
  One of:
  
  • D or NX_DIMENSION_TYPE_DISCRETE
  
  • N or NX_DIMENSION_TYPE_NUMERIC
  
  • T or NX_DIMENSION_TYPE_TIME */
    qDimensionType?: 'NX_DIMENSION_TYPE_DISCRETE' | 'NX_DIMENSION_TYPE_NUMERIC' | 'NX_DIMENSION_TYPE_TIME' | string;
    /** This parameter is optional.
  Gives information on the error. */
    qError?: NxValidationError;
    /** Corresponds to the label of the dimension that is selected.
  If the label is not defined then the field name is used. */
    qFallbackTitle?: string;
    /** Array of dimension labels.
  Contains the labels of all dimensions in a hierarchy group (for example the labels of all dimensions in a drill down group). */
    qGroupFallbackTitles?: Array<string>;
    /** Array of field names. */
    qGroupFieldDefs?: Array<string>;
    /** Index of the dimension that is currently in use.
  qGroupPos is set to 0 if there are no hierarchical groups (drill-down groups) or cycle groups. */
    qGroupPos?: number;
    /** Defines the grouping.
  
  One of:
  
  • N or GRP_NX_NONE
  
  • H or GRP_NX_HIEARCHY
  
  • C or GRP_NX_COLLECTION */
    qGrouping?: 'GRP_NX_NONE' | 'GRP_NX_HIEARCHY' | 'GRP_NX_COLLECTION' | string;
    /** This parameter is set to true if qNumFormat is set to U (unknown). The engine guesses the type of the field based on the field's definition. */
    qIsAutoFormat?: boolean;
    /** True if this is a calculated dimension. */
    qIsCalculated?: boolean;
    /** Is a cyclic dimension used. */
    qIsCyclic?: boolean;
    /** If set to true, it means that the field always has one and only one selected value. */
    qIsOneAndOnlyOne?: boolean;
    /** If set to true, it means that the field is a semantic. */
    qIsSemantic?: boolean;
    /** Refers to a dimension stored in the library. */
    qLibraryId?: string;
    /** Is set to true if the field is locked. */
    qLocked?: boolean;
    /** Maximum value. */
    qMax?: number;
    /** Minimum value. */
    qMin?: number;
    /** Format of the field.
  This parameter is optional. */
    qNumFormat?: FieldAttributes;
    /** If set to true, it inverts the sort criteria in the field. */
    qReverseSort?: boolean;
    /** Sort indicator.
  The default value is no sorting.
  This parameter is optional.
  
  One of:
  
  • N or NX_SORT_INDICATE_NONE
  
  • A or NX_SORT_INDICATE_ASC
  
  • D or NX_SORT_INDICATE_DESC */
    qSortIndicator?: 'NX_SORT_INDICATE_NONE' | 'NX_SORT_INDICATE_ASC' | 'NX_SORT_INDICATE_DESC' | string;
    /** Number of values in a particular state. */
    qStateCounts?: NxStateCounts;
    /** Gives information on a field. For example, it can return the type of the field.
  Examples: key, text, ASCII */
    qTags?: Array<string>;
    [key: string]: any;
};
export type NxDimensionType = {
    [key: string]: any;
};
export type NxDownloadInfo = {
    /** The filesize of the reduced app.
  @defaultValue -1 */
    qFileSize?: number;
    /** URL to download the reduced app on. */
    qUrl?: string;
    [key: string]: any;
};
export type NxDownloadOptions = {
    /** Bookmark Id to apply before reducing the application. */
    qBookmarkId?: string;
    /** Time in seconds for how long the download link is valid.
  @defaultValue 3600 */
    qExpires?: number;
    qServeOnce?: boolean;
    [key: string]: any;
};
export type NxEngineVersion = {
    /** Version number of the Qlik engine component. */
    qComponentVersion?: string;
    [key: string]: any;
};
export type NxExportFileType = {
    [key: string]: any;
};
export type NxExportState = {
    [key: string]: any;
};
export type NxFeature = {
    [key: string]: any;
};
export type NxFieldDescription = {
    /** If set to true a logical AND (instead of a logical OR) is used when making selections in a field.
  The default value is false. */
    qAndMode?: boolean;
    /** Number of distinct field values */
    qCardinal?: number;
    /** Lists the derived fields if any. */
    qDerivedFieldData?: NxDerivedFieldDescriptionList;
    /** If set to true, it means that the field is a field on the fly. */
    qIsDefinitionOnly?: boolean;
    /** Is used for Direct Discovery.
  If set to true, it means that the type of the field is detail. */
    qIsDetail?: boolean;
    /** If set to true, it means that the field is hidden. */
    qIsHidden?: boolean;
    /** Is used for Direct Discovery.
  If set to true, it means that the type of the field is measure. */
    qIsImplicit?: boolean;
    /** If set to true, it means that the field is a semantic. */
    qIsSemantic?: boolean;
    /** If set to true, it means that the field is a system field. */
    qIsSystem?: boolean;
    /** Name of the field */
    qName?: string;
    qReadableName?: string;
    /** Gives information on a field. For example, it can return the type of the field.
  Examples: key, text, ASCII */
    qTags?: Array<string>;
    [key: string]: any;
};
export type NxFieldProperties = {
    /** This parameter is set to true, if the field has one and only one selection (not 0 and not more than 1).
  If this property is set to true, the field cannot be cleared anymore and no more selections can be performed in that field.
  The property OneAndOnlyOne can be set to true if one and only value has been selected in the field prior to setting the property.  */
    qOneAndOnlyOne?: boolean;
    [key: string]: any;
};
export type NxFieldResourceId = {
    /** Name of the field to get the resource id for. */
    qName?: string;
    /** Field level resource Id per table that the field is part of */
    qResourceIds?: Array<NxFieldTableResourceId>;
    [key: string]: any;
};
export type NxFieldSelectionInfo = {
    /** Selection mode.
   Properties:
  One of:
  
  • NORMAL for a selection in normal mode.
  
  • AND for a selection in AND mode.
  
  • NOT for a selection NOT in AND mode.
  One of:
  
  • NORMAL or SELECTION_MODE_NORMAL
  
  • AND or SELECTION_MODE_AND
  
  • NOT or SELECTION_MODE_NOT */
    qFieldSelectionMode?: 'SELECTION_MODE_NORMAL' | 'SELECTION_MODE_AND' | 'SELECTION_MODE_NOT' | string;
    /** Name of the field. */
    qName?: string;
    [key: string]: any;
};
export type NxFieldSelectionMode = {
    [key: string]: any;
};
export type NxFieldTableResourceId = {
    /** Resource identifier for the field */
    qResourceId?: string;
    /** Name of the table that the field belongs to get the resource id for */
    qTable?: string;
    [key: string]: any;
};
export type NxFrequencyMode = {
    [key: string]: any;
};
export type NxGetBookmarkOptions = {
    /** Set of data. */
    qData?: BookmarkListQBookmarkListDefQData;
    /** Include the bookmark patches. Patches can be very large and may make the list result unmanageable. */
    qIncludePatches?: boolean;
    /** List of object types.
  @defaultValue ["bookmark"] */
    qTypes?: Array<string>;
    [key: string]: any;
};
export type NxGetObjectOptions = {
    /** Set of data. */
    qData?: JsonObject;
    /** Set to true to include session objects.
  The default value is false. */
    qIncludeSessionObjects?: boolean;
    /** List of object types. */
    qTypes?: Array<string>;
    [key: string]: any;
};
export type NxGroupTail = {
    /** Number of elements that are part of the next tail.
  This number depends on the paging, more particularly it depends on the values defined in qTop and qHeight
  Is not shown if the value is 0.
  This parameter is optional. */
    qDown?: number;
    /** Number of elements that are part of the previous tail.
  This number depends on the paging, more particularly it depends on the values defined in qTop and qHeight .
  Is not shown if the value is 0.
  This parameter is optional. */
    qUp?: number;
    [key: string]: any;
};
export type NxGrpType = {
    [key: string]: any;
};
export type NxHighlightRanges = {
    /** Ranges of highlighted values. */
    qRanges?: Array<CharRange>;
    [key: string]: any;
};
export type NxHypercubeMode = {
    [key: string]: any;
};
export type NxInfo = {
    /** Identifier of the object.
  If the chosen identifier is already in use, the engine automatically sets another one.
  If an identifier is not set, the engine automatically sets one.
  This parameter is optional. */
    qId?: string;
    /** Type of the object.
  This parameter is mandatory. */
    qType?: string;
    [key: string]: any;
};
export type NxInlineDimensionDef = {
    /** Index of the active field in a cyclic dimension.
  This parameter is optional. The default value is 0.
  This parameter is used in case of cyclic dimensions ( qGrouping is C). */
    qActiveField?: number;
    /** Array of field names.
  When creating a grouped dimension, more than one field name is defined.
  This parameter is optional. */
    qFieldDefs?: Array<string>;
    /** Array of field labels.
  This parameter is optional. */
    qFieldLabels?: Array<string>;
    /** Used to define a cyclic group or drill-down group.
  Default value is no grouping.
  This parameter is optional.
  
  One of:
  
  • N or GRP_NX_NONE
  
  • H or GRP_NX_HIEARCHY
  
  • C or GRP_NX_COLLECTION */
    qGrouping?: 'GRP_NX_NONE' | 'GRP_NX_HIEARCHY' | 'GRP_NX_COLLECTION' | string;
    /** Label expression.
  This parameter is optional. */
    qLabelExpression?: string;
    /** Defines the format of the value.
  This parameter is optional. */
    qNumberPresentations?: Array<FieldAttributes>;
    /** If set to true, it inverts the sort criteria in the field. */
    qReverseSort?: boolean;
    /** Defines the sorting criteria in the field.
  Default is to sort by alphabetical order, ascending.
  This parameter is optional. */
    qSortCriterias?: Array<SortCriteria>;
    [key: string]: any;
};
export type NxInlineMeasureDef = {
    /** * 0 means no accumulation
                              * 1 means full accumulation (each y-value accumulates all previous y-values of the expression)
                              * ≥ 2 means accumulate as many steps as the qAccumulate value
  Default value is 0.
  This parameter is optional. */
    qAccumulate?: number;
    /** Index of the active expression in a cyclic measure. The indexing starts from 0.
  The default value is 0.
  This parameter is optional. */
    qActiveExpression?: number;
    /** Aggregate function.
  For more information on the aggregate function syntax, see the section Working with Qlik Sense on the online help portal.
  The default value is 0 (Sum of rows)
  This parameter is optional. */
    qAggrFunc?: string;
    /** If set to true, the sum of rows total should be used rather than real expression total.
  This parameter is optional and applies to straight tables.
  Default value is false.
  If using the Qlik Sense interface, it means that the total mode is set to Expression Total . */
    qBrutalSum?: boolean;
    /** Definition of the expression in the measure.
  Example: Sum (OrderTotal)
  This parameter is mandatory. */
    qDef?: string;
    /** Description of the measure.
  An empty string is returned as a default value.
  This parameter is optional. */
    qDescription?: string;
    /** Array of expressions. This parameter is used in case of cyclic measures ( qGrouping is C). List of the expressions in the cyclic group. */
    qExpressions?: Array<string>;
    /** Default value is no grouping.
  This parameter is optional.
  
  One of:
  
  • N or GRP_NX_NONE
  
  • H or GRP_NX_HIEARCHY
  
  • C or GRP_NX_COLLECTION */
    qGrouping?: 'GRP_NX_NONE' | 'GRP_NX_HIEARCHY' | 'GRP_NX_COLLECTION' | string;
    /** Name of the measure.
  An empty string is returned as a default value.
  This parameter is optional. */
    qLabel?: string;
    /** Label expression.
  This parameter is optional. */
    qLabelExpression?: string;
    /** Format of the field.
  This parameter is optional. */
    qNumFormat?: FieldAttributes;
    /** If set to true, percentage values are returned instead of absolute numbers.
  Default value is false.
  This parameter is optional. */
    qRelative?: boolean;
    /** If set to true, it inverts the sort criteria in the field. */
    qReverseSort?: boolean;
    /** Name connected to the measure that is used for search purposes.
  A measure can have several tags.
  This parameter is optional. */
    qTags?: Array<string>;
    [key: string]: any;
};
export type NxLTrendlineType = {
    [key: string]: any;
};
export type NxLayoutErrors = {
    /** Error code. */
    qErrorCode?: number;
    [key: string]: any;
};
export type NxLibraryDimension = {
    /** Array of dimension names. */
    qFieldDefs?: Array<string>;
    /** Array of dimension labels. */
    qFieldLabels?: Array<string>;
    /** Information about the grouping.
  
  One of:
  
  • N or GRP_NX_NONE
  
  • H or GRP_NX_HIEARCHY
  
  • C or GRP_NX_COLLECTION */
    qGrouping?: 'GRP_NX_NONE' | 'GRP_NX_HIEARCHY' | 'GRP_NX_COLLECTION' | string;
    qLabelExpression?: string;
    /** Settings coloring by master dimension. */
    coloring?: GenericDimensionPropertiesQDimColoring;
    /** Properties
  Abbreviated syntax:
  "qStringExpression":"=&lt;expression&gt;"
  Extended object syntax:
  "qStringExpression":{"qExpr":"=&lt;expression&gt;"}
  Where:
  &lt; **expression** &gt; is a string
  
  The "=" sign in the string expression is not mandatory. Even if the "=" sign is not given, the expression is evaluated. A string expression is not evaluated, if the expression is surrounded by simple quotes.
  The result of the evaluation of the expression can be of any type, as it is returned as a JSON (quoted) string. */
    descriptionExpression?: GenericDimensionPropertiesQDimDescriptionExpression;
    /** Name of the dimension. Used unless label expression is set. */
    title?: string;
    [key: string]: any;
};
export type NxLibraryDimensionDef = {
    /** Array of dimension names. */
    qFieldDefs?: Array<string>;
    /** Array of dimension labels. */
    qFieldLabels?: Array<string>;
    /** Information about the grouping.
  
  One of:
  
  • N or GRP_NX_NONE
  
  • H or GRP_NX_HIEARCHY
  
  • C or GRP_NX_COLLECTION */
    qGrouping?: 'GRP_NX_NONE' | 'GRP_NX_HIEARCHY' | 'GRP_NX_COLLECTION' | string;
    qLabelExpression?: string;
    /** Settings coloring by master dimension. */
    coloring?: GenericDimensionPropertiesQDimColoring;
    /** Properties
  Abbreviated syntax:
  "qStringExpression":"=&lt;expression&gt;"
  Extended object syntax:
  "qStringExpression":{"qExpr":"=&lt;expression&gt;"}
  Where:
  &lt; **expression** &gt; is a string
  
  The "=" sign in the string expression is not mandatory. Even if the "=" sign is not given, the expression is evaluated. A string expression is not evaluated, if the expression is surrounded by simple quotes.
  The result of the evaluation of the expression can be of any type, as it is returned as a JSON (quoted) string. */
    descriptionExpression?: GenericDimensionPropertiesQDimDescriptionExpression;
    /** Name of the dimension. Used unless label expression is set. */
    title?: string;
    [key: string]: any;
};
export type NxLibraryMeasure = {
    qActiveExpression?: number;
    qDef?: string;
    qExpressions?: Array<string>;
    /**
  One of:
  
  • N or GRP_NX_NONE
  
  • H or GRP_NX_HIEARCHY
  
  • C or GRP_NX_COLLECTION */
    qGrouping?: 'GRP_NX_NONE' | 'GRP_NX_HIEARCHY' | 'GRP_NX_COLLECTION' | string;
    qLabel?: string;
    qLabelExpression?: string;
    /** Format of the field.
  This parameter is optional. */
    qNumFormat?: FieldAttributes;
    /** Settings coloring by master measure. */
    coloring?: GenericMeasurePropertiesQMeasureColoring;
    /** Properties
  Abbreviated syntax:
  "qStringExpression":"=&lt;expression&gt;"
  Extended object syntax:
  "qStringExpression":{"qExpr":"=&lt;expression&gt;"}
  Where:
  &lt; **expression** &gt; is a string
  
  The "=" sign in the string expression is not mandatory. Even if the "=" sign is not given, the expression is evaluated. A string expression is not evaluated, if the expression is surrounded by simple quotes.
  The result of the evaluation of the expression can be of any type, as it is returned as a JSON (quoted) string. */
    descriptionExpression?: GenericMeasurePropertiesQMeasureDescriptionExpression;
    /** Denotes whether the measure has custom formatting applied Default:false */
    isCustomFormatted?: boolean;
    /** Denotes whether the number formatting comes from a template Default:false */
    numFormatFromTemplate?: boolean;
    [key: string]: any;
};
export type NxLibraryMeasureDef = {
    /** Index to the active expression in a measure. */
    qActiveExpression?: number;
    /** Definition of the measure. */
    qDef?: string;
    /** Array of expressions. */
    qExpressions?: Array<string>;
    /** Used to define a cyclic group or drill-down group.
  Default value is no grouping.
  This parameter is optional.
  
  One of:
  
  • N or GRP_NX_NONE
  
  • H or GRP_NX_HIEARCHY
  
  • C or GRP_NX_COLLECTION */
    qGrouping?: 'GRP_NX_NONE' | 'GRP_NX_HIEARCHY' | 'GRP_NX_COLLECTION' | string;
    /** Label of the measure. */
    qLabel?: string;
    /** Optional expression used for dynamic label. */
    qLabelExpression?: string;
    /** Format of the field.
  This parameter is optional. */
    qNumFormat?: FieldAttributes;
    /** Settings coloring by master measure. */
    coloring?: GenericMeasurePropertiesQMeasureColoring;
    /** Properties
  Abbreviated syntax:
  "qStringExpression":"=&lt;expression&gt;"
  Extended object syntax:
  "qStringExpression":{"qExpr":"=&lt;expression&gt;"}
  Where:
  &lt; **expression** &gt; is a string
  
  The "=" sign in the string expression is not mandatory. Even if the "=" sign is not given, the expression is evaluated. A string expression is not evaluated, if the expression is surrounded by simple quotes.
  The result of the evaluation of the expression can be of any type, as it is returned as a JSON (quoted) string. */
    descriptionExpression?: GenericMeasurePropertiesQMeasureDescriptionExpression;
    /** Denotes whether the measure has custom formatting applied Default:false */
    isCustomFormatted?: boolean;
    /** Denotes whether the number formatting comes from a template Default:false */
    numFormatFromTemplate?: boolean;
    [key: string]: any;
};
export type NxLinkedObjectInfo = {
    /** Information about the linked object. */
    qInfo?: NxInfo;
    /** Identifier of the root object.
  If the linked object is a child, the root identifier is the identifier of the parent.
  If the linked object is an app object, the root identifier is the same than the identifier of the linked object since the linked object is a root object. */
    qRootId?: string;
    [key: string]: any;
};
export type NxListObjectExpression = {
    /** Gives information on the error.
  This parameter is optional. */
    qError?: NxLayoutErrors;
    /** Value of the expression. */
    qExpr?: string;
    [key: string]: any;
};
export type NxListObjectExpressionDef = {
    /** Value of the expression. */
    qExpr?: string;
    /** Refers to an expression stored in the library. */
    qLibraryId?: string;
    [key: string]: any;
};
export type NxLocalizedErrorCode = {
    [key: string]: any;
};
export type NxLocalizedWarningCode = {
    [key: string]: any;
};
export type NxMatchingFieldInfo = {
    /** Name of the field. */
    qName?: string;
    /** List of tags. */
    qTags?: Array<string>;
    [key: string]: any;
};
export type NxMatchingFieldMode = {
    [key: string]: any;
};
export type NxMeasure = {
    /** List of attribute dimensions. */
    qAttributeDimensions?: Array<NxAttrDimDef>;
    /** List of attribute expressions. */
    qAttributeExpressions?: Array<NxAttrExprDef>;
    /** Specifies a calculation condition, which must be fulfilled for the measure to be calculated.
  If the calculation condition is not met, the measure is excluded from the calculation.
  By default, there is no calculation condition.
  This property is optional. */
    qCalcCond?: ValueExpr;
    /** Specifies a calculation condition object.
  If CalcCondition.Cond is not fulfilled, the measure is excluded from the calculation and CalcCondition.Msg is evaluated.
  By default, there is no calculation condition.
  This property is optional. */
    qCalcCondition?: NxCalcCond;
    /** Refers to a measure stored in the hypercube. */
    qDef?: NxInlineMeasureDef;
    /** Refers to a measure stored in the library. */
    qLibraryId?: string;
    qMiniChartDef?: NxMiniChartDef;
    /** Defines the sort criteria.
  The default value is sort by ascending alphabetic order.
  This property is optional. */
    qSortBy?: SortCriteria;
    /** Specifies trendlines for this measure. */
    qTrendLines?: Array<NxTrendlineDef>;
    [key: string]: any;
};
export type NxMeasureInfo = {
    /** Length of the longest value in the field. */
    qApprMaxGlyphCount?: number;
    /** List of attribute dimensions. */
    qAttrDimInfo?: Array<NxAttrDimInfo>;
    /** List of attribute expressions. */
    qAttrExprInfo?: Array<NxAttrExprInfo>;
    /** The message displayed if calculation condition is not fulfilled. */
    qCalcCondMsg?: string;
    /** Number of distinct field values. */
    qCardinal?: number;
    /** This parameter is optional.
  Gives information on the error. */
    qError?: NxValidationError;
    /** Corresponds to the label of the measure.
  If the label is not defined then the measure name is used. */
    qFallbackTitle?: string;
    /** This parameter is set to true if qNumFormat is set to U (unknown). The engine guesses the type of the field based on the field's expression. */
    qIsAutoFormat?: boolean;
    /** Refers to a dimension stored in the library. */
    qLibraryId?: string;
    /** Highest value in the range. */
    qMax?: number;
    /** Lowest value in the range. */
    qMin?: number;
    qMiniChart?: NxMiniChart;
    /** Format of the field.
  This parameter is optional. */
    qNumFormat?: FieldAttributes;
    /** If set to true, it inverts the sort criteria in the field. */
    qReverseSort?: boolean;
    /** Sort indicator.
  The default value is no sorting.
  This parameter is optional.
  
  One of:
  
  • N or NX_SORT_INDICATE_NONE
  
  • A or NX_SORT_INDICATE_ASC
  
  • D or NX_SORT_INDICATE_DESC */
    qSortIndicator?: 'NX_SORT_INDICATE_NONE' | 'NX_SORT_INDICATE_ASC' | 'NX_SORT_INDICATE_DESC' | string;
    /** Calculated trendlines */
    qTrendLines?: Array<NxTrendline>;
    [key: string]: any;
};
export type NxMeta = {
    /** Name.
  This property is optional. */
    qName?: string;
    [key: string]: any;
};
export type NxMetaDef = {
    [key: string]: any;
};
export type NxMiniChart = {
    /** List of attribute expressions. */
    qAttrExprInfo?: Array<NxAttrExprInfo>;
    /** This parameter is optional and is displayed in case of error. */
    qError?: NxValidationError;
    qXMax?: number;
    qXMin?: number;
    qYMax?: number;
    qYMin?: number;
    [key: string]: any;
};
export type NxMiniChartCell = {
    /** Attribute expressions values. */
    qAttrExps?: NxAttributeExpressionValues;
    /** Rank number of the value, starting from 0.
  If the element number is a negative number, it means that the returned value is not an element number.
  You can get the following negative values:
  
  • -1: the cell is a Total cell. It shows a total.
  
  • -2: the cell is a Null cell.
  
  • -3: the cell belongs to the group Others .
  
  • -4: the cell is empty. Applies to pivot tables. */
    qElemNumber?: number;
    /** A value.
  This parameter is optional. */
    qNum?: number;
    /** Some text. */
    qText?: string;
    [key: string]: any;
};
export type NxMiniChartData = {
    /** This parameter is optional and is displayed in case of error. */
    qError?: NxValidationError;
    /** Array of data. */
    qMatrix?: Array<NxMiniChartRows>;
    qMax?: number;
    qMin?: number;
    [key: string]: any;
};
export type NxMiniChartDef = {
    /** List of attribute expressions. */
    qAttributeExpressions?: Array<NxAttrExprDef>;
    /** Expression or field name. */
    qDef?: string;
    /** LibraryId for dimension. */
    qLibraryId?: string;
    /** @defaultValue -1 */
    qMaxNumberPoints?: number;
    /** If set to true, no null values are returned. */
    qNullSuppression?: boolean;
    qOtherTotalSpec?: OtherTotalSpecProp;
    /** Sorting. */
    qSortBy?: SortCriteria;
    [key: string]: any;
};
export type NxMiniChartRows = Array<NxMiniChartCell>;
export type NxMultiRangeSelectInfo = {
    qColumnsToSelect?: Array<number>;
    qRanges?: Array<NxRangeSelectInfo>;
    [key: string]: any;
};
export type NxPage = {
    /** Number of rows or elements in the page. The indexing of the rows may vary depending on whether the cells are expanded or not (parameter qAlwaysFullyExpanded in HyperCubeDef ). */
    qHeight?: number;
    /** Position from the left.
  Corresponds to the first column. */
    qLeft?: number;
    /** Position from the top.
  Corresponds to the first row. */
    qTop?: number;
    /** Number of columns in the page. The indexing of the columns may vary depending on whether the cells are expanded or not (parameter qAlwaysFullyExpanded in HyperCubeDef ). */
    qWidth?: number;
    [key: string]: any;
};
export type NxPageTreeLevel = {
    /** Number of dimensions to include in the tree.
  @defaultValue -1 */
    qDepth?: number;
    /** The first dimension that is to be part of the tree, counted from the left. For example, if qLeft is equal to 1, omit nodes from the first dimension in the current sort order. */
    qLeft?: number;
    [key: string]: any;
};
export type NxPageTreeNode = {
    /** When set to true, generated nodes (based on current selection) will be inserted into the returned tree even when there is no actual value. For example, suppose you are looking for hybrid car sales at all car dealerships. Normally, only dealerships where hybrid cars are sold would be part of the returned tree but with qAllValues set to true, all available dealerships will be included regardless if they sold any hybrid cars or not. */
    qAllValues?: boolean;
    /** The area of the tree to be fetched. If no area is defined on a dimension, all existing nodes are included. */
    qArea?: Rect;
    [key: string]: any;
};
export type NxPatch = {
    /** Operation to perform.
  
  One of:
  
  • add or Add
  
  • remove or Remove
  
  • replace or Replace */
    qOp?: 'Add' | 'Remove' | 'Replace' | string;
    /** Path to the property to add, remove or replace. */
    qPath?: string;
    /** This parameter is not used in a remove operation.
  Corresponds to the value of the property to add or to the new value of the property to update.
  Examples:
  "false", "2", "\"New title\"" */
    qValue?: string;
    [key: string]: any;
};
export type NxPatchOperationType = {
    [key: string]: any;
};
export type NxPatches = {
    /** Array with child objects and their patches. */
    qChildren?: Array<NxPatches>;
    /** Identifier and type of the object. */
    qInfo?: NxInfo;
    /** Array with patches. */
    qPatches?: Array<NxPatch>;
    [key: string]: any;
};
export type NxPivotDimensionCell = {
    /** Information about attribute dimensions. */
    qAttrDims?: NxAttributeDimValues;
    /** Information about attribute expressions.
  The array is empty [ ] when there is no attribute expressions. */
    qAttrExps?: NxAttributeExpressionValues;
    /** If set to true, it means that the cell can be collapsed.
  This parameter is not returned if it is set to false. */
    qCanCollapse?: boolean;
    /** If set to true, it means that the cell can be expanded.
  This parameter is not returned if it is set to false. */
    qCanExpand?: boolean;
    /** Number of elements that are part of the next tail.
  This number depends on the paging, more particularly it depends on the values defined in qTop and qHeight . */
    qDown?: number;
    /** Rank number of the value.
  If set to -1, it means that the value is not an element number. */
    qElemNo?: number;
    /** Information about sub nodes (or sub cells).
  The array is empty [ ] when there is no sub nodes. */
    qSubNodes?: Array<NxPivotDimensionCell>;
    /** Some text. */
    qText?: string;
    /** Type of the cell.
  
  One of:
  
  • V or NX_DIM_CELL_VALUE
  
  • E or NX_DIM_CELL_EMPTY
  
  • N or NX_DIM_CELL_NORMAL
  
  • T or NX_DIM_CELL_TOTAL
  
  • O or NX_DIM_CELL_OTHER
  
  • A or NX_DIM_CELL_AGGR
  
  • P or NX_DIM_CELL_PSEUDO
  
  • R or NX_DIM_CELL_ROOT
  
  • U or NX_DIM_CELL_NULL
  
  • G or NX_DIM_CELL_GENERATED */
    qType?: 'NX_DIM_CELL_VALUE' | 'NX_DIM_CELL_EMPTY' | 'NX_DIM_CELL_NORMAL' | 'NX_DIM_CELL_TOTAL' | 'NX_DIM_CELL_OTHER' | 'NX_DIM_CELL_AGGR' | 'NX_DIM_CELL_PSEUDO' | 'NX_DIM_CELL_ROOT' | 'NX_DIM_CELL_NULL' | 'NX_DIM_CELL_GENERATED' | string;
    /** Number of elements that are part of the previous tail.
  This number depends on the paging, more particularly it depends on the values defined in qTop and qHeight . */
    qUp?: number;
    /** Value of the cell.
  Is set to NaN , if the value is not a number. */
    qValue?: number;
    [key: string]: any;
};
export type NxPivotPage = {
    /** Size and offset of the data in the matrix. */
    qArea?: Rect;
    /** Array of data. */
    qData?: Array<ArrayOfNxValuePoint>;
    /** Information about the left dimension values of a pivot table. */
    qLeft?: Array<NxPivotDimensionCell>;
    /** Information about the top dimension values of a pivot table. If there is no top dimension in the pivot table, information about the measures are given. */
    qTop?: Array<NxPivotDimensionCell>;
    [key: string]: any;
};
export type NxPivotValuePoint = {
    qAttrDims?: NxAttributeDimValues;
    /** Attribute expressions values. */
    qAttrExps?: NxAttributeExpressionValues;
    /** Label of the cell.
  This parameter is optional. */
    qLabel?: string;
    /** Value of the cell. */
    qNum?: number;
    /** Some text related to the cell. */
    qText?: string;
    /** Type of the cell.
  
  One of:
  
  • V or NX_DIM_CELL_VALUE
  
  • E or NX_DIM_CELL_EMPTY
  
  • N or NX_DIM_CELL_NORMAL
  
  • T or NX_DIM_CELL_TOTAL
  
  • O or NX_DIM_CELL_OTHER
  
  • A or NX_DIM_CELL_AGGR
  
  • P or NX_DIM_CELL_PSEUDO
  
  • R or NX_DIM_CELL_ROOT
  
  • U or NX_DIM_CELL_NULL
  
  • G or NX_DIM_CELL_GENERATED */
    qType?: 'NX_DIM_CELL_VALUE' | 'NX_DIM_CELL_EMPTY' | 'NX_DIM_CELL_NORMAL' | 'NX_DIM_CELL_TOTAL' | 'NX_DIM_CELL_OTHER' | 'NX_DIM_CELL_AGGR' | 'NX_DIM_CELL_PSEUDO' | 'NX_DIM_CELL_ROOT' | 'NX_DIM_CELL_NULL' | 'NX_DIM_CELL_GENERATED' | string;
    [key: string]: any;
};
export type NxRange = {
    /** Number of characters in the field name. */
    qCount?: number;
    /** Position in the expression of the first character of the field name. */
    qFrom?: number;
    [key: string]: any;
};
export type NxRangeSelectInfo = {
    /** Number of the measure to select.
  Numbering starts from 0. */
    qMeasureIx?: number;
    /** Range of values. */
    qRange?: Range;
    [key: string]: any;
};
export type NxSelectionCell = {
    /** Column index to select.
  Indexing starts from 0.
  If the cell's type is:
  
  • D, the index is based on the data matrix.
  
  • T, the index is based on the data matrix.
  
  • L, the index is based on the left dimensions indexes. */
    qCol?: number;
    /** Row index to select.
  Indexing starts from 0.
  If the cell's type is:
  
  • D, the index is based on the data matrix.
  
  • T, the index is based on the top dimensions indexes.
  
  • L, the index is based on the data matrix. */
    qRow?: number;
    /** Type of cells to select.
  
  One of:
  
  • D or NX_CELL_DATA
  
  • T or NX_CELL_TOP
  
  • L or NX_CELL_LEFT */
    qType?: 'NX_CELL_DATA' | 'NX_CELL_TOP' | 'NX_CELL_LEFT' | string;
    [key: string]: any;
};
export type NxSelectionCellType = {
    [key: string]: any;
};
export type NxSelectionInfo = {
    /** Is set to true if the visualization is in selection mode.
  For more information about the selection mode, see BeginSelections Method. */
    qInSelections?: boolean;
    /** Is set to true if the visualization is in selection mode and if some selections have been made while in selection mode.
  For more information about the selection mode, see BeginSelections Method. */
    qMadeSelections?: boolean;
    [key: string]: any;
};
export type NxSimpleDimValue = {
    /** Element number. */
    qElemNo?: number;
    /** Text related to the attribute expression value.
  This property is optional. No text is returned if the attribute expression value is a numeric. */
    qText?: string;
    [key: string]: any;
};
export type NxSimpleValue = {
    /** Numeric value of the attribute expression.
  Set to NaN (Not a Number) if the attribute expression value is not numeric. */
    qNum?: number;
    /** Text related to the attribute expression value. */
    qText?: string;
    [key: string]: any;
};
export type NxSortIndicatorType = {
    [key: string]: any;
};
export type NxStackPage = {
    /** Size and offset of the data in the matrix. */
    qArea?: Rect;
    /** Array of data. */
    qData?: Array<NxStackedPivotCell>;
    [key: string]: any;
};
export type NxStackedPivotCell = {
    /** Attribute dimensions values. */
    qAttrDims?: NxAttributeDimValues;
    /** Attribute expressions values. */
    qAttrExps?: NxAttributeExpressionValues;
    /** If set to true, it means that the cell can be collapsed.
  This parameter is not returned if it is set to false. */
    qCanCollapse?: boolean;
    /** If set to true, it means that the cell can be expanded.
  This parameter is not returned if it is set to false. */
    qCanExpand?: boolean;
    /** Number of elements that are part of the next tail. */
    qDown?: number;
    /** Rank number of the value.
  If set to -1, it means that the value is not an element number. */
    qElemNo?: number;
    /** Total of the positive values in the current group of cells. */
    qMaxPos?: number;
    /** Total of the negative values in the current group of cells. */
    qMinNeg?: number;
    /** Row index in the data matrix.
  The indexing starts from 0. */
    qRow?: number;
    /** Information about sub nodes (or sub cells).
  The array is empty [ ] when there are no sub nodes. */
    qSubNodes?: Array<NxStackedPivotCell>;
    /** Some text. */
    qText?: string;
    /** Type of the cell.
  
  One of:
  
  • V or NX_DIM_CELL_VALUE
  
  • E or NX_DIM_CELL_EMPTY
  
  • N or NX_DIM_CELL_NORMAL
  
  • T or NX_DIM_CELL_TOTAL
  
  • O or NX_DIM_CELL_OTHER
  
  • A or NX_DIM_CELL_AGGR
  
  • P or NX_DIM_CELL_PSEUDO
  
  • R or NX_DIM_CELL_ROOT
  
  • U or NX_DIM_CELL_NULL
  
  • G or NX_DIM_CELL_GENERATED */
    qType?: 'NX_DIM_CELL_VALUE' | 'NX_DIM_CELL_EMPTY' | 'NX_DIM_CELL_NORMAL' | 'NX_DIM_CELL_TOTAL' | 'NX_DIM_CELL_OTHER' | 'NX_DIM_CELL_AGGR' | 'NX_DIM_CELL_PSEUDO' | 'NX_DIM_CELL_ROOT' | 'NX_DIM_CELL_NULL' | 'NX_DIM_CELL_GENERATED' | string;
    /** Number of elements that are part of the previous tail. */
    qUp?: number;
    /** Value of the cell.
  Is set to NaN , if the value is not a number. */
    qValue?: number;
    [key: string]: any;
};
export type NxStateCounts = {
    /** Number of values in alternative state. */
    qAlternative?: number;
    /** Number of values in deselected state. */
    qDeselected?: number;
    /** Number of values in excluded state. */
    qExcluded?: number;
    /** Number of values in locked state. */
    qLocked?: number;
    /** Number of values in locked excluded state. */
    qLockedExcluded?: number;
    /** Number of values in optional state. */
    qOption?: number;
    /** Number of values in selected state. */
    qSelected?: number;
    /** Number of values in selected excluded state. */
    qSelectedExcluded?: number;
    [key: string]: any;
};
export type NxStreamListEntry = {
    /** Identifier of the stream. */
    qId?: string;
    /** Name of the stream. */
    qName?: string;
    [key: string]: any;
};
export type NxTempBookmarkOptions = {
    /** IncludeAllPatches If true all patches will be stored in the temporary bookmark, if false ObjectIdsToPatch will determine what patches to include */
    qIncludeAllPatches?: boolean;
    /** IncludeVariables If true all variables will be stored in the temporary bookmark */
    qIncludeVariables?: boolean;
    [key: string]: any;
};
export type NxTickCell = {
    /** End value. */
    qEnd?: number;
    /** Start value. */
    qStart?: number;
    /** Tick's label. */
    qText?: string;
    [key: string]: any;
};
export type NxTreeDataOption = {
    /** Maximum number of nodes in the tree. If this limit is exceeded, no nodes are returned. All nodes are counted. */
    qMaxNbrOfNodes?: number;
    /** Filters out complete dimensions from the fetched tree. */
    qTreeLevels?: NxPageTreeLevel;
    /** Defines areas of the tree to be fetched. Areas must be defined left to right. */
    qTreeNodes?: Array<NxPageTreeNode>;
    [key: string]: any;
};
export type NxTreeDimensionDef = {
    /** List of attribute dimensions. */
    qAttributeDimensions?: Array<NxAttrDimDef>;
    /** List of attribute expressions. */
    qAttributeExpressions?: Array<NxAttrExprDef>;
    /** Specifies a calculation condition object.
  If CalcCondition.Cond is not fulfilled, the dimension is excluded from the calculation and CalcCondition.Msg is evaluated.
  By default, there is no calculation condition.
  This property is optional. */
    qCalcCondition?: NxCalcCond;
    /** Refers to a dimension. */
    qDef?: NxInlineDimensionDef;
    /** Refers to a dimension stored in the library. */
    qLibraryId?: string;
    /** If set to true, no null values are returned. */
    qNullSuppression?: boolean;
    /** This property is used when some dimension limits are set.
  Label of the Others group. The default label is Others .
  Example:
  "qOtherLabel":"= <label>"
  or
  "qOtherLabel":{"qExpr":"= <label>"}
  Where:
  
  • < label > is the label of the Others group. */
    qOtherLabel?: StringExpr;
    /** Sets the dimension limits. Each dimension of a hypercube is configured separately.
  Defines if some values (grouped as Others ) should be grouped together in the visualization.
  For example in a pie chart all values lower than 200 could be grouped together. */
    qOtherTotalSpec?: OtherTotalSpecProp;
    /** If set to true, all dimension values are shown. */
    qShowAll?: boolean;
    /** If this property is set, the total of the calculated values is returned.
  The default label is Total .
  Example:
  "qTotalLabel":"= <label>"
  or
  "qTotalLabel":{"qExpr":"= <label>"}
  Where:
  
  • < label > is the label of the Total group. */
    qTotalLabel?: StringExpr;
    /** List of measures. */
    qValueExprs?: Array<NxMeasure>;
    [key: string]: any;
};
export type NxTreeDimensionInfo = {
    /** Length of the longest value in the field. */
    qApprMaxGlyphCount?: number;
    /** List of attribute dimensions. */
    qAttrDimInfo?: Array<NxAttrDimInfo>;
    /** List of attribute expressions. */
    qAttrExprInfo?: Array<NxAttrExprInfo>;
    /** The message displayed if calculation condition is not fulfilled. */
    qCalcCondMsg?: string;
    /** Number of distinct field values. */
    qCardinal?: number;
    /** Dimension Cardinalities */
    qCardinalities?: NxCardinalities;
    /** Is continuous axis used. */
    qContinuousAxes?: boolean;
    /** Is derived field is used as a dimension. */
    qDerivedField?: boolean;
    /** Binary format of the field.
  
  One of:
  
  • D or NX_DIMENSION_TYPE_DISCRETE
  
  • N or NX_DIMENSION_TYPE_NUMERIC
  
  • T or NX_DIMENSION_TYPE_TIME */
    qDimensionType?: 'NX_DIMENSION_TYPE_DISCRETE' | 'NX_DIMENSION_TYPE_NUMERIC' | 'NX_DIMENSION_TYPE_TIME' | string;
    /** This parameter is optional.
  Gives information on the error. */
    qError?: NxValidationError;
    /** Corresponds to the label of the dimension that is selected.
  If the label is not defined then the field name is used. */
    qFallbackTitle?: string;
    /** Array of dimension labels.
  Contains the labels of all dimensions in a hierarchy group (for example the labels of all dimensions in a drill down group). */
    qGroupFallbackTitles?: Array<string>;
    /** Array of field names. */
    qGroupFieldDefs?: Array<string>;
    /** Index of the dimension that is currently in use.
  qGroupPos is set to 0 if there are no hierarchical groups (drill-down groups) or cycle groups. */
    qGroupPos?: number;
    /** Defines the grouping.
  
  One of:
  
  • N or GRP_NX_NONE
  
  • H or GRP_NX_HIEARCHY
  
  • C or GRP_NX_COLLECTION */
    qGrouping?: 'GRP_NX_NONE' | 'GRP_NX_HIEARCHY' | 'GRP_NX_COLLECTION' | string;
    /** This parameter is set to true if qNumFormat is set to U (unknown). The engine guesses the type of the field based on the field's definition. */
    qIsAutoFormat?: boolean;
    /** True if this is a calculated dimension. */
    qIsCalculated?: boolean;
    /** Is a cyclic dimension used. */
    qIsCyclic?: boolean;
    /** If set to true, it means that the field always has one and only one selected value. */
    qIsOneAndOnlyOne?: boolean;
    /** If set to true, it means that the field is a semantic. */
    qIsSemantic?: boolean;
    /** Refers to a dimension stored in the library. */
    qLibraryId?: string;
    /** Is set to true if the field is locked. */
    qLocked?: boolean;
    /** Maximum value. */
    qMax?: number;
    /** A List of measures to be calculated on this TreeDimension. */
    qMeasureInfo?: Array<NxMeasureInfo>;
    /** Minimum value. */
    qMin?: number;
    /** Format of the field.
  This parameter is optional. */
    qNumFormat?: FieldAttributes;
    /** If set to true, it inverts the sort criteria in the field. */
    qReverseSort?: boolean;
    /** Sort indicator.
  The default value is no sorting.
  This parameter is optional.
  
  One of:
  
  • N or NX_SORT_INDICATE_NONE
  
  • A or NX_SORT_INDICATE_ASC
  
  • D or NX_SORT_INDICATE_DESC */
    qSortIndicator?: 'NX_SORT_INDICATE_NONE' | 'NX_SORT_INDICATE_ASC' | 'NX_SORT_INDICATE_DESC' | string;
    /** Number of values in a particular state. */
    qStateCounts?: NxStateCounts;
    /** Gives information on a field. For example, it can return the type of the field.
  Examples: key, text, ASCII */
    qTags?: Array<string>;
    [key: string]: any;
};
export type NxTreeMultiRangeSelectInfo = {
    /** An array of Ranges. */
    qRanges?: Array<NxTreeRangeSelectInfo>;
    [key: string]: any;
};
export type NxTreeNode = {
    /** Attribute dimension values. */
    qAttrDims?: NxAttributeDimValues;
    /** Attribute expression values. */
    qAttrExps?: NxAttributeExpressionValues;
    /** If set to true, it means that the cell can be collapsed.
  This parameter is not returned if it is set to false. */
    qCanCollapse?: boolean;
    /** If set to true, it means that the cell can be expanded.
  This parameter is not returned if it is set to false. */
    qCanExpand?: boolean;
    /** Element number. */
    qElemNo?: number;
    /** The position of this node inside it's group in the complete tree, i.e. Not dependant om what part is fetched. */
    qGroupPos?: number;
    /** Nbr of nodes connected to this node on the next level of the tree. Not dependant on what part is fetched. */
    qGroupSize?: number;
    /** Total of the positive values in the current group of cells. */
    qMaxPos?: Array<number>;
    /** Total of the negative values in the current group of cells. */
    qMinNeg?: Array<number>;
    /** The children of this node in the fetched tree structure. */
    qNodes?: Array<NxTreeNode>;
    /** Row index in the data matrix.
  The indexing starts from 0. */
    qRow?: number;
    /** Selection State of the value.
  The default state for a measure is L(Locked).
  
  One of:
  
  • L or LOCKED
  
  • S or SELECTED
  
  • O or OPTION
  
  • D or DESELECTED
  
  • A or ALTERNATIVE
  
  • X or EXCLUDED
  
  • XS or EXCL_SELECTED
  
  • XL or EXCL_LOCKED
  
  • NSTATES */
    qState?: 'LOCKED' | 'SELECTED' | 'OPTION' | 'DESELECTED' | 'ALTERNATIVE' | 'EXCLUDED' | 'EXCL_SELECTED' | 'EXCL_LOCKED' | 'NSTATES' | string;
    /** The text version of the value, if available. */
    qText?: string;
    /** The GroupPos of all prior nodes connected to this one, one position for each level of the tree.
  If this node is attached directly to the root, this array is empty. */
    qTreePath?: Array<number>;
    /** Type of the cell.
  
  One of:
  
  • V or NX_DIM_CELL_VALUE
  
  • E or NX_DIM_CELL_EMPTY
  
  • N or NX_DIM_CELL_NORMAL
  
  • T or NX_DIM_CELL_TOTAL
  
  • O or NX_DIM_CELL_OTHER
  
  • A or NX_DIM_CELL_AGGR
  
  • P or NX_DIM_CELL_PSEUDO
  
  • R or NX_DIM_CELL_ROOT
  
  • U or NX_DIM_CELL_NULL
  
  • G or NX_DIM_CELL_GENERATED */
    qType?: 'NX_DIM_CELL_VALUE' | 'NX_DIM_CELL_EMPTY' | 'NX_DIM_CELL_NORMAL' | 'NX_DIM_CELL_TOTAL' | 'NX_DIM_CELL_OTHER' | 'NX_DIM_CELL_AGGR' | 'NX_DIM_CELL_PSEUDO' | 'NX_DIM_CELL_ROOT' | 'NX_DIM_CELL_NULL' | 'NX_DIM_CELL_GENERATED' | string;
    /** Value of the cell.
  Is set to NaN , if the value is not a number. */
    qValue?: number;
    /** The measures for this node. */
    qValues?: Array<NxTreeValue>;
    [key: string]: any;
};
export type NxTreeRangeSelectInfo = {
    /** Number of the dimension to select
  measure from.  Numbering starts from 0. */
    qDimensionIx?: number;
    /** Number of the measure to select.
  Numbering starts from 0. */
    qMeasureIx?: number;
    /** Range of values. */
    qRange?: Range;
    [key: string]: any;
};
export type NxTreeValue = {
    /** Attribute dimension values. */
    qAttrDims?: NxAttributeDimValues;
    /** Attribute expression values. */
    qAttrExps?: NxAttributeExpressionValues;
    /** The text version of the value, if available. */
    qText?: string;
    /** Value of the cell.
  Is set to NaN , if the value is not a number. */
    qValue?: number;
    [key: string]: any;
};
export type NxTrendline = {
    /** Coefficent c0..cN depending on the trendline type. */
    qCoeff?: Array<number>;
    /** Inner Dim elem no */
    qElemNo?: number;
    /** This parameter is optional and is displayed in case of error. */
    qError?: NxValidationError;
    /** Trendline expression */
    qExpression?: string;
    /** R2 score. Value between 0..1 that shows the correlation between the trendline and the data. Higher value means higher correlation. */
    qR2?: number;
    /** Type of trendline
  
  One of:
  
  • AVERAGE or Average
  
  • LINEAR or Linear
  
  • POLYNOMIAL2 or Polynomial2
  
  • POLYNOMIAL3 or Polynomial3
  
  • POLYNOMIAL4 or Polynomial4
  
  • EXPONENTIAL or Exponential
  
  • POWER or Power
  
  • LOG or Logarithmic */
    qType?: 'Average' | 'Linear' | 'Polynomial2' | 'Polynomial3' | 'Polynomial4' | 'Exponential' | 'Power' | 'Logarithmic' | string;
    [key: string]: any;
};
export type NxTrendlineDef = {
    /** Set to true to calulatate the R2 score */
    qCalcR2?: boolean;
    /** Set if the numerical value of x axis dimension should be used
  
  One of:
  
  • Never or CONTINUOUS_NEVER
  
  • Possible or CONTINUOUS_IF_POSSIBLE
  
  • Time or CONTINUOUS_IF_TIME
  @defaultValue "CONTINUOUS_NEVER" */
    qContinuousXAxis?: 'CONTINUOUS_NEVER' | 'CONTINUOUS_IF_POSSIBLE' | 'CONTINUOUS_IF_TIME' | string;
    /** If you have a hypercube with two dimensions and qXColIx refers to a dimension
  This determines if you get one trendline of each value in the other dimension or
  Or trendline based on the sum of the value in the other dimension
  The sum variant is only supported when qXColIx is 0 and qMode (on the hypercube) is K or T
  
  One of:
  
  • Multi or TRENDLINE_MULTILINE
  
  • Sum or TRENDLINE_SUM
  @defaultValue "TRENDLINE_MULTILINE" */
    qMultiDimMode?: 'TRENDLINE_MULTILINE' | 'TRENDLINE_SUM' | string;
    /** The type of trendline to calculate
  
  One of:
  
  • AVERAGE or Average
  
  • LINEAR or Linear
  
  • POLYNOMIAL2 or Polynomial2
  
  • POLYNOMIAL3 or Polynomial3
  
  • POLYNOMIAL4 or Polynomial4
  
  • EXPONENTIAL or Exponential
  
  • POWER or Power
  
  • LOG or Logarithmic */
    qType?: 'Average' | 'Linear' | 'Polynomial2' | 'Polynomial3' | 'Polynomial4' | 'Exponential' | 'Power' | 'Logarithmic' | string;
    /** The column in the hypercube to be used as x axis. Can point to either a dimension (numeric or text) or a measure
  @defaultValue -1 */
    qXColIx?: number;
    [key: string]: any;
};
export type NxTrendlineMode = {
    [key: string]: any;
};
export type NxValidationError = {
    /** Context related to the error, from the user app domain.
  It can be the identifier of an object, a field name, a table name.
  This parameter is optional. */
    qContext?: string;
    /** Error code.
  This parameter is always displayed in case of error. */
    qErrorCode?: number;
    /** Internal information from the server.
  This parameter is optional. */
    qExtendedMessage?: string;
    [key: string]: any;
};
export type NxVariableListItem = {
    /** Data. */
    qData?: JsonObject;
    /** Definition of the variable. It can be a value or an expression. */
    qDefinition?: string;
    /** Description of the variable. */
    qDescription?: string;
    /** Identifier and type of the object.
  This parameter is mandatory. */
    qInfo?: NxInfo;
    /** If set to true, it means that the variable is a system variable.
  A system variable provides information about the system and is set by the engine. The content cannot be changed by the user.
  This parameter is optional.
  The default value is false. */
    qIsConfig?: boolean;
    /** If set to true, it means that the variable is reserved.
  The default value is false.
  This parameter is optional.
  Examples:
  
  • ScriptError is a reserved variable, set by the engine.
  
  • DayNames is a reserved variable, set by the user. */
    qIsReserved?: boolean;
    /** If set to true, it means that the variable was defined via script. */
    qIsScriptCreated?: boolean;
    /** Information about publishing and permissions.
  This parameter is optional. */
    qMeta?: NxMeta;
    /** Name of the variable. */
    qName?: string;
    [key: string]: any;
};
export type NxVariableProperties = {
    /** Set this property to true to update the variable when applying a bookmark.
  The value of a variable can affect the state of the selections.
  The default value is false. */
    qIncludeInBookmark?: boolean;
    /** Name of the variable. */
    qName?: string;
    /** Defines the format of the value of a variable. */
    qNumberPresentation?: FieldAttributes;
    /** List of enumerations.
  This property is used if qUsePredefListedValues is set to true. */
    qPreDefinedList?: Array<string>;
    /** The value of a variable can be an enumeration.
  Set this property to true to reflect the predefined values in an enumeration. */
    qUsePredefListedValues?: boolean;
    [key: string]: any;
};
export type NxViewPort = {
    /** Height of the canvas in pixels. */
    qHeight?: number;
    /** Width of the canvas in pixels. */
    qWidth?: number;
    /** Zoom level. */
    qZoomLevel?: number;
    [key: string]: any;
};
export type ObjectInterface = {
    /** Object ID. */
    qGenericId?: string;
    /** The type of the object. */
    qGenericType?: string;
    /** The handle used to connect to object. */
    qHandle?: number;
    /** The native type of the object. */
    qType?: string;
    [key: string]: any;
};
export type OdbcDsn = {
    /** Is set to true if the version of ODBC is 32-bit.
  This parameter is optional. Default is false. */
    qBit32?: boolean;
    /** Description of the ODBC connection. */
    qDescription?: string;
    /** Name of the ODBC connection. */
    qName?: string;
    /** Is set to true if the connection is User DSN. The connection works only for a specific user.
  Default is false.
  This parameter is optional. */
    qUserOnly?: boolean;
    [key: string]: any;
};
export type OleDbProvider = {
    /** Is set to true if the version of the OLEDB provider is 32-bit.
  Default is false.
  This parameter is optional. */
    qBit32?: boolean;
    /** Description of the OLEDB provider. */
    qDescription?: string;
    /** Name of the OLEDB provider. */
    qName?: string;
    [key: string]: any;
};
export type OtherLimitMode = {
    [key: string]: any;
};
export type OtherMode = {
    [key: string]: any;
};
export type OtherSortMode = {
    [key: string]: any;
};
export type OtherTotalSpecProp = {
    /** Set this parameter to true to allow the calculation of Others even if the engine detects some potential mistakes.
  For example the country Russia is part of the continent Europe and Asia. If you have an hypercube with two dimensions Country and Continent and one measure Population, the engine can detect that the population of Russia is included in both the continent Asia and Europe.
  The default value is true.
  @defaultValue true */
    qApplyEvenWhenPossiblyWrongResult?: boolean;
    /** This parameter is used when qOtherMode is set to:
  
  • OTHER_ABS_LIMITED
  
  • OTHER_REL_LIMITED
  
  • OTHER_ABS_ACC_TARGET
  OTHER_REL_ACC_TARGET
  
  and when the dimension values include not numeric values.
  Set this parameter to true to include text values in the returned values.
  The default value is true.
  @defaultValue true */
    qForceBadValueKeeping?: boolean;
    /** This parameter applies to inner dimensions.
  If this parameter is set to true, the restrictions are calculated on the selected dimension only. All previous dimensions are ignored.
  The default value is false. */
    qGlobalOtherGrouping?: boolean;
    /** If set to true, it collapses the inner dimensions (if any) in the group Others .
  The default value is false. */
    qOtherCollapseInnerDimensions?: boolean;
    /** Number of values to display. The number of values can be entered as a calculated formula.
  This parameter is used when qOtherMode is set to OTHER_COUNTED . */
    qOtherCounted?: ValueExpr;
    /** Value used to limit the dimension values. The limit can be entered as a calculated formula.
  This parameter is used when qOtherMode is set to:
  
  • OTHER_ABS_LIMITED
  
  • OTHER_REL_LIMITED
  
  • OTHER_ABS_ACC_TARGET
  OTHER_REL_ACC_TARGET */
    qOtherLimit?: ValueExpr;
    /** Sets the limit for the Others mode.
  This parameter is used when qOtherMode is set to:
  
  • OTHER_ABS_LIMITED
  
  • OTHER_REL_LIMITED
  
  • OTHER_ABS_ACC_TARGET
  OTHER_REL_ACC_TARGET
  
  One of:
  
  • OTHER_GE_LIMIT
  
  • OTHER_LE_LIMIT
  
  • OTHER_GT_LIMIT
  
  • OTHER_LT_LIMIT
  @defaultValue "OTHER_GT_LIMIT" */
    qOtherLimitMode?: 'OTHER_GE_LIMIT' | 'OTHER_LE_LIMIT' | 'OTHER_GT_LIMIT' | 'OTHER_LT_LIMIT' | string;
    /** Determines how many dimension values are displayed.
  The default value is OTHER_OFF .
  
  One of:
  
  • OTHER_OFF
  
  • OTHER_COUNTED
  
  • OTHER_ABS_LIMITED
  
  • OTHER_ABS_ACC_TARGET
  
  • OTHER_REL_LIMITED
  
  • OTHER_REL_ACC_TARGET
  @defaultValue "OTHER_OFF" */
    qOtherMode?: 'OTHER_OFF' | 'OTHER_COUNTED' | 'OTHER_ABS_LIMITED' | 'OTHER_ABS_ACC_TARGET' | 'OTHER_REL_LIMITED' | 'OTHER_REL_ACC_TARGET' | string;
    /** Defines the sort order of the dimension values.
  The default value is OTHER_SORT_DESCENDING .
  
  One of:
  
  • OTHER_SORT_DEFAULT
  
  • OTHER_SORT_DESCENDING
  
  • OTHER_SORT_ASCENDING
  @defaultValue "OTHER_SORT_DESCENDING" */
    qOtherSortMode?: 'OTHER_SORT_DEFAULT' | 'OTHER_SORT_DESCENDING' | 'OTHER_SORT_ASCENDING' | string;
    /** This parameter applies when there are several measures.
  Name of the measure to use for the calculation of Others for a specific dimension. */
    qReferencedExpression?: StringExpr;
    /** If set to true, the group Others is not displayed as a dimension value.
  The default value is false. */
    qSuppressOther?: boolean;
    /** If set to TOTAL_EXPR , the total of the dimension values is returned.
  The default value is TOTAL_OFF .
  
  One of:
  
  • TOTAL_OFF
  
  • TOTAL_EXPR
  @defaultValue "TOTAL_OFF" */
    qTotalMode?: 'TOTAL_OFF' | 'TOTAL_EXPR' | string;
    [key: string]: any;
};
export type Point = {
    /** x-coordinate in pixels.
  The origin is the top left of the screen. */
    qx?: number;
    /** y-coordinate in pixels.
  The origin is the top left of the screen. */
    qy?: number;
    [key: string]: any;
};
export type PositionMark = {
    qDimName?: string;
    qElemNo?: Array<number>;
    qElemValues?: Array<Blob>;
    [key: string]: any;
};
export type ProgressData = {
    /** This property is not used. */
    qCompleted?: number;
    /** Information about the error messages that occur during the script execution. */
    qErrorData?: Array<ErrorData>;
    /** True if the request is finished. */
    qFinished?: boolean;
    /** This property is not used. */
    qKB?: number;
    /** Request duration in milliseconds. */
    qMillisecs?: number;
    /** A progress message is persistent when it informs about the start or end of a statement. For example, it can inform about the total number of lines fetched from a data source or tell that the app was saved. All persistent progress messages between two *GetProgress* calls are summarized in this string. Contrarily to *qPersistentProgressMessages*, the content of the localized message string is displayed (not its message code). */
    qPersistentProgress?: string;
    /** List of persistent progress messages. */
    qPersistentProgressMessages?: Array<ProgressMessage>;
    /** True if the request is started. */
    qStarted?: boolean;
    /** This property is not used. */
    qTotal?: number;
    /** A progress message is transient when it informs about the progress of an ongoing statement. For example, it can tell how many lines are currently fetched from a data source. All transient progress messages between two *GetProgress* calls are summarized in this string. Contrarily to *qTransientProgressMessage*, the content of the localized message string is displayed (not its message code). */
    qTransientProgress?: string;
    /** Transient progress message. */
    qTransientProgressMessage?: ProgressMessage;
    /** True when the engine pauses the script execution and waits for a user interaction. */
    qUserInteractionWanted?: boolean;
    [key: string]: any;
};
export type ProgressMessage = {
    /** Code number to the corresponding localized message string. */
    qMessageCode?: number;
    /** Parameters to be inserted in the localized message string. */
    qMessageParameters?: Array<string>;
    [key: string]: any;
};
export type Range = {
    /** Highest value in the range */
    qMax?: number;
    /** If set to true, the range includes the highest value in the range of selections (Equals to ). [bn(50500)]
  Example:
  The range is [1,10]. If qMinInclEq is set to true it means that 10 is included in the range of selections. */
    qMaxInclEq?: boolean;
    /** Lowest value in the range */
    qMin?: number;
    /** If set to true, the range includes the lowest value in the range of selections (Equals to ). [bn(50500)]
  Example:
  The range is [1,10]. If qMinInclEq is set to true it means that 1 is included in the range of selections. */
    qMinInclEq?: boolean;
    [key: string]: any;
};
export type RangeSelectInfo = {
    /** Label of the measure. */
    qMeasure?: string;
    /** Highest value in the range.
  @defaultValue -1e+300 */
    qRangeHi?: number;
    /** Lowest value in the range.
  @defaultValue -1e+300 */
    qRangeLo?: number;
    [key: string]: any;
};
export type Rect = {
    /** Number of rows or elements in the page. The indexing of the rows may vary depending on whether the cells are expanded or not (parameter qAlwaysFullyExpanded in HyperCubeDef ). */
    qHeight?: number;
    /** Position from the left.
  Corresponds to the first column. */
    qLeft?: number;
    /** Position from the top.
  Corresponds to the first row. */
    qTop?: number;
    /** Number of columns in the page. The indexing of the columns may vary depending on whether the cells are expanded or not (parameter qAlwaysFullyExpanded in HyperCubeDef ). */
    qWidth?: number;
    [key: string]: any;
};
export type SampleResult = {
    /** Name of field or column. */
    qFieldOrColumn?: FieldOrColumn;
    /** Matched values part of the sample. */
    qValues?: Array<FieldValue>;
    [key: string]: any;
};
export type ScriptSyntaxError = {
    /** Position of the erroneous text from the beginning of the line. */
    qColInLine?: number;
    /** Length of the word where the error is located. */
    qErrLen?: number;
    /** Line number in the section where the error is located. */
    qLineInTab?: number;
    /** The default value is false. */
    qSecondaryFailure?: boolean;
    /** Number of the faulty section. */
    qTabIx?: number;
    /** Position of the erroneous text from the beginning of the script. */
    qTextPos?: number;
    [key: string]: any;
};
export type ScrollPosition = {
    qPos?: Point;
    qUsePosition?: boolean;
    [key: string]: any;
};
export type SearchAssociationResult = {
    /** Information about the fields containing search hits. */
    qFieldDictionaries?: Array<SearchFieldDictionary>;
    /** List of the fields that contains search associations. */
    qFieldNames?: Array<string>;
    /** List of the search terms. */
    qSearchTerms?: Array<string>;
    /** List of search results.
  The maximum number of search results in this list is set by qPage/qCount . */
    qSearchTermsMatched?: Array<SearchMatchCombinations>;
    /** Total number of search results.
  This number is not limited by qPage/qCount . */
    qTotalSearchResults?: number;
    [key: string]: any;
};
export type SearchAttribute = {
    /** String corresponding to SearchObjectOptions.qAttributes. It will be qProperty for SearchObjectOptions. */
    qKey?: string;
    /** String corresponding to qKey for the current SearchGroupItemMatch. For example, if the match is Make by Price found in the title of a generic object, qValue will be qMetaDef/title. */
    qValue?: string;
    [key: string]: any;
};
export type SearchCharRange = {
    /** Length of the match in the search result. */
    qCharCount?: number;
    /** Starting position of the match in the search result, starting from 0. */
    qCharPos?: number;
    /** Position of the term in the list of search terms, starting from 0. */
    qTerm?: number;
    [key: string]: any;
};
export type SearchCombinationOptions = {
    /** Optional.
  
  • For SearchSuggest method, this array is empty.
  
  • For SearchObjects method, this array is empty or contain qProperty .
  
  • For SearchResults method, this array is empty, or contains qNum and/or qElemNum . It allows the user to request details in the outputted SearchGroupItemMatch . For more information, see SearchGroupItemMatch. */
    qAttributes?: Array<string>;
    /** Encoding used to compute qRanges of type SearchCharRange.
  Only affects the computation of the ranges. It does not impact the encoding of the text.
  
  One of:
  
  • Utf8 or CHAR_ENCODING_UTF8
  
  • Utf16 or CHAR_ENCODING_UTF16
  @defaultValue "CHAR_ENCODING_UTF8" */
    qCharEncoding?: 'CHAR_ENCODING_UTF8' | 'CHAR_ENCODING_UTF16' | string;
    /** Search context.
  The default value is LockedFieldsOnly .
  
  One of:
  
  • Cleared or CONTEXT_CLEARED
  
  • LockedFieldsOnly or CONTEXT_LOCKED_FIELDS_ONLY
  
  • CurrentSelections or CONTEXT_CURRENT_SELECTIONS
  @defaultValue "CONTEXT_LOCKED_FIELDS_ONLY" */
    qContext?: 'CONTEXT_CLEARED' | 'CONTEXT_LOCKED_FIELDS_ONLY' | 'CONTEXT_CURRENT_SELECTIONS' | string;
    /** List of the search fields.
  If empty, the search is performed in all fields of the app. */
    qSearchFields?: Array<string>;
    [key: string]: any;
};
export type SearchContextType = {
    [key: string]: any;
};
export type SearchFieldDictionary = {
    /** Position of the field in the list of fields, starting from 0.
  The list of fields is defined in qResults/qFieldNames and contains the search associations. */
    qField?: number;
    /** List of the matching values.
  The maximum number of values in this list is set by qMaxNbrFieldMatches . */
    qResult?: Array<SearchTermResult>;
    [key: string]: any;
};
export type SearchFieldMatch = {
    /** Position of the field in the list of fields, starting from 0.
  The list of fields is defined in qResults/qFieldNames and contains the search associations. */
    qField?: number;
    /** Number of search hits in the field.
  The number of values in qValues and the value of qNoOfMatches are equal if qMaxNbrFieldMatches is -1. */
    qNoOfMatches?: number;
    /** Positions of the search terms, starting from 0. */
    qTerms?: Array<number>;
    /** Positions of the matching values in the search results.
  The maximum number of values in this list is defined by qMaxNbrFieldMatches . */
    qValues?: Array<number>;
    [key: string]: any;
};
export type SearchFieldMatchType = {
    [key: string]: any;
};
export type SearchFieldMatchesItem = {
    qElemNo?: number;
    qSearchTermsMatched?: Array<number>;
    qText?: string;
    [key: string]: any;
};
export type SearchFieldSelectionMode = {
    [key: string]: any;
};
export type SearchFieldValueItem = {
    /** Field name of matches. */
    qFieldName?: string;
    /** List of search matches. */
    qValues?: Array<SearchFieldMatchesItem>;
    [key: string]: any;
};
export type SearchGroup = {
    /** Type of the search group.
  
  One of:
  
  • DatasetType or DATASET_GROUP
  
  • GenericObjectsType or GENERIC_OBJECTS_GROUP */
    qGroupType?: 'DATASET_GROUP' | 'GENERIC_OBJECTS_GROUP' | string;
    /** Identifier of the search group. */
    qId?: number;
    /** List of items in the search group.
  The group items are numbered from the value of SearchGroupOptions.qOffset to the value of SearchGroupOptions.qOffset \+ SearchGroupOptions.qCount */
    qItems?: Array<SearchGroupItem>;
    /** Indexes of the search terms that are included in the group. These search terms are related to the list of terms defined in SearchResult.qSearchTerms . */
    qSearchTermsMatched?: Array<number>;
    /** Total number of distinct items in the search group. */
    qTotalNumberOfItems?: number;
    [key: string]: any;
};
export type SearchGroupItem = {
    /** Identifier of the item.
  It corresponds to:
  
  • The name of the field, if the type of the search group is data set.
  
  • The id of the generic object if the type of the search group is generic object. */
    qIdentifier?: string;
    /** List of matches in the search group item.
  The group item matches are numbered from the value of SearchGroupItemOptions.qOffset to the value of SearchGroupItemOptions.qOffset \+ SearchGroupItemOptions.qCount . */
    qItemMatches?: Array<SearchGroupItemMatch>;
    /** Type of the group item.
  
  One of:
  
  • Field or FIELD
  
  • GenericObject or GENERIC_OBJECT */
    qItemType?: 'FIELD' | 'GENERIC_OBJECT' | string;
    /** Match type applied in this result group.
  
  One of:
  
  • FieldMatchNone or FM_NONE
  
  • FieldMatchSubString or FM_SUBSTRING
  
  • FieldMatchWord or FM_WORD
  
  • FieldMatchExact or FM_EXACT
  
  • FieldMatchLast or FM_LAST */
    qMatchType?: 'FM_NONE' | 'FM_SUBSTRING' | 'FM_WORD' | 'FM_EXACT' | 'FM_LAST' | string;
    /** Indexes of the search terms that are included in the group item. These search terms are related to the list of terms defined in SearchResult.qSearchTerms . */
    qSearchTermsMatched?: Array<number>;
    /** Total number of distinct matches in the search group item. */
    qTotalNumberOfMatches?: number;
    [key: string]: any;
};
export type SearchGroupItemMatch = {
    /** Provides detail of the match as requested by the user in SearchObjectsOptions.qAttributes or SearchCombinationOptions.qAttributes
  If the user requests SearchObjects or SearchResults with an empty qAttributes option, the outputted qAttributes is returned empty.
  For SearchObjects requested with qProperty , the SearchGroupItemMatch.qAttributes return value contains [“qProperty”, "qMetaDef/title”] if the match has been found in the title of the item. For dimension values, the returned qProperty will be “*” .
  For SearchResults requested with qNum , the SearchGroupItemMatch.qAttributes return value contains ["qNum", N] where N is the numeric value of the element or NaN if the value is not numeric.
  For SearchResults requested with qElemNum , the SearchGroupItemMatch.qAttributes return value contains ["qElemNum", N] where N is the value index of the element. */
    qAttributes?: Array<SearchAttribute>;
    /** Selection mode of a field.
  Suppressed by default. One and always one field value is selected when set to OneAndOnlyOne. */
    qFieldSelectionMode?: 'ONE_AND_ONLY_ONE' | string;
    /** List of ranges.
  For example, if the search terms are Price and Make, and the search group item value is Make by Price vs Mileage, then there are two ranges: one for Price and one for Make. */
    qRanges?: Array<SearchCharRange>;
    /** Search match value.
  Value of the search group item.
  If the match is found in a field, it corresponds to the value of the field.
  If the match is found in a generic object property, it corresponds to the property value. */
    qText?: string;
    [key: string]: any;
};
export type SearchGroupItemOptions = {
    /** Maximum number of matches per item (in qItemMatches[ ] ).
  The default value is -1: all values are returned.
  @defaultValue -1 */
    qCount?: number;
    /** Type of the group item. Can be:
  
  • GenericObject: the type of the search group item is a generic object. Group items have this type when you are calling SearchObjects .
  
  • Field: the type of the search group item is a field. Group items have this type when you are calling SearchResults .
  
  One of:
  
  • Field or FIELD
  
  • GenericObject or GENERIC_OBJECT */
    qGroupItemType?: 'FIELD' | 'GENERIC_OBJECT' | string;
    /** Position starting from 0.
  The default value is 0. */
    qOffset?: number;
    [key: string]: any;
};
export type SearchGroupItemType = {
    [key: string]: any;
};
export type SearchGroupOptions = {
    /** Maximum number of items per group (in qItems[ ] ).
  The default value is -1; all values are returned.
  @defaultValue -1 */
    qCount?: number;
    /** Type of the group. Can be:
  
  • GenericObjectType: the type of the search group item is a generic object. Groups have this type when you are calling SearchObjects .
  
  • DatasetType: type of the search group item is a dataset association. Groups have this type when you are calling SearchResults .
  
  One of:
  
  • DatasetType or DATASET_GROUP
  
  • GenericObjectsType or GENERIC_OBJECTS_GROUP */
    qGroupType?: 'DATASET_GROUP' | 'GENERIC_OBJECTS_GROUP' | string;
    /** Position starting from 0.
  The default value is 0. */
    qOffset?: number;
    [key: string]: any;
};
export type SearchGroupType = {
    [key: string]: any;
};
export type SearchMatchCombination = {
    /** Information about the search matches. */
    qFieldMatches?: Array<SearchFieldMatch>;
    /** Index of the search result, starting from 0. */
    qId?: number;
    [key: string]: any;
};
export type SearchMatchCombinations = Array<SearchMatchCombination>;
export type SearchObjectOptions = {
    /** This array is either empty or contains qProperty . */
    qAttributes?: Array<string>;
    /** Encoding used to compute qRanges of type SearchCharRange.
  Only affects the computation of the ranges. It does not impact the encoding of the text.
  
  One of:
  
  • Utf8 or CHAR_ENCODING_UTF8
  
  • Utf16 or CHAR_ENCODING_UTF16
  @defaultValue "CHAR_ENCODING_UTF8" */
    qCharEncoding?: 'CHAR_ENCODING_UTF8' | 'CHAR_ENCODING_UTF16' | string;
    [key: string]: any;
};
export type SearchPage = {
    /** Number of search groups to return (in qSearchGroupArray ). */
    qCount?: number;
    /** Options of the search group items.
  If this property is not set, all values are returned.
  This property is to be used with the SearchResults method or the SearchObjects method. */
    qGroupItemOptions?: Array<SearchGroupItemOptions>;
    /** Options of the search groups.
  If this property is not set, all values are returned.
  This property is to be used with the SearchResults method or the SearchObjects method. */
    qGroupOptions?: Array<SearchGroupOptions>;
    /** Maximum number of matching values to return per search result.
  The default value is -1; all values are returned.
  This property is to be used with the SearchAssociations method.
  @defaultValue -1 */
    qMaxNbrFieldMatches?: number;
    /** Position from the top, starting from 0.
  If the offset is set to 0, the first search result to be returned is at position 0. */
    qOffset?: number;
    [key: string]: any;
};
export type SearchResult = {
    /** List of search groups.
  The groups are numbered from the value of SearchPage.qOffset to the value of SearchPage.qOffset + SearchPage.qCount . */
    qSearchGroupArray?: Array<SearchGroup>;
    /** List of the search terms. */
    qSearchTerms?: Array<string>;
    /** Total number of groups. */
    qTotalNumberOfGroups?: number;
    [key: string]: any;
};
export type SearchSuggestItem = {
    /** Index of the suggestion value.
  The indexing starts from 0 and from the left. */
    qTerm?: number;
    /** Value of the suggestion. */
    qValue?: string;
    [key: string]: any;
};
export type SearchSuggestionResult = {
    /** List of field names that contain search hits. */
    qFieldNames?: Array<string>;
    /** List of suggestions. */
    qSuggestions?: Array<SearchSuggestItem>;
    [key: string]: any;
};
export type SearchTermResult = {
    /** Element number of the associated value. */
    qElemNumber?: number;
    /** List of ranges.
  For example, if the user searches the term read and the associative value is Reading , then the corresponding range would be Read in Reading . */
    qRanges?: Array<SearchCharRange>;
    /** Text of the associated value. */
    qText?: string;
    [key: string]: any;
};
export type SearchValueOptions = {
    /** List of the search fields.
  If empty, the search is performed in all fields of the app. */
    qSearchFields?: Array<string>;
    [key: string]: any;
};
export type SearchValuePage = {
    /** Number of search fields to return */
    qCount?: number;
    /** Maximum number of matching values to return per search result.
  @defaultValue -1 */
    qMaxNbrFieldMatches?: number;
    /** Position from the top, starting from 0.
  If the offset is set to 0, the first search result to be returned is at position 0. */
    qOffset?: number;
    [key: string]: any;
};
export type SearchValueResult = {
    /** List of search groups.
  The groups are numbered from the value of SearchPage.qOffset to the value of SearchPage.qOffset + SearchPage.qCount . */
    qFieldMatches?: Array<SearchFieldValueItem>;
    /** List of the search terms. */
    qSearchTerms?: Array<string>;
    [key: string]: any;
};
export type SelectInfo = {
    /** List of information about ranges for selections. */
    qContinuousRangeInfo?: Array<Range>;
    /** Gives information about the formatting of the range.
  This parameter is used when performing range selections or text searches in dimensions. */
    qNumberFormat?: FieldAttributes;
    /** Highest value of the search range.
  This parameter is used when performing range selections or text searches in dimensions.
  Default is Null.
  @defaultValue -1e+300 */
    qRangeHi?: number;
    /** This parameter is used when performing range selections or text searches in measures.
  Gives information about the range of selections. */
    qRangeInfo?: Array<RangeSelectInfo>;
    /** Lower value of the search range.
  This parameter is used when performing range selections or text searches in dimensions.
  Default is Null.
  @defaultValue -1e+300 */
    qRangeLo?: number;
    /** This parameter is true if the TextSearch is a result of a Select Field operation. */
    qSelectFieldSearch?: boolean;
    /** Set to true to ignore locks; in that case, locked fields can be selected.
  The default value is false. */
    qSoftLock?: boolean;
    /** Text search string.
  Everything that matches the text is selected.
  This parameter is optional. */
    qTextSearch?: string;
    [key: string]: any;
};
export type SelectionObject = {
    /** Number of steps back. */
    qBackCount?: number;
    /** Number of steps forward. */
    qForwardCount?: number;
    /** Lists the fields that are selected. */
    qSelections?: Array<NxCurrentSelectionItem>;
    /** Name of the alternate state.
  Default is current selections $ . */
    qStateName?: string;
    [key: string]: any;
};
export type SelectionObjectDef = {
    /** Name of the alternate state.
  Default is current selections $ . */
    qStateName?: string;
    [key: string]: any;
};
export type Size = {
    /** Number of pixels on the x axis. */
    qcx?: number;
    /** Number of pixels on the y axis. */
    qcy?: number;
    [key: string]: any;
};
export type SortCriteria = {
    /** Sort by expression. */
    qExpression?: ValueExpr;
    /** Sorts the field by alphabetical order. */
    qSortByAscii?: number;
    /** Sorts the field by expression. */
    qSortByExpression?: number;
    /** Sorts the field values by frequency (number of occurrences in the field). */
    qSortByFrequency?: number;
    qSortByGreyness?: number;
    /** Sorts the field values by the initial load order. */
    qSortByLoadOrder?: number;
    /** Sorts the field values by numeric value. */
    qSortByNumeric?: number;
    /** Sorts the field values according to their logical state (selected, optional, alternative or excluded). */
    qSortByState?: number;
    [key: string]: any;
};
export type SourceKeyRecord = {
    /** Name of the key field. */
    qKeyFields?: Array<string>;
    /** Table the key belongs to. */
    qTables?: Array<string>;
    [key: string]: any;
};
export type StateEnumType = {
    [key: string]: any;
};
export type StaticContentList = {
    /** Information about the list of content files. */
    qItems?: Array<StaticContentListItem>;
    [key: string]: any;
};
export type StaticContentListItem = {
    /** Relative path to the content file. The URL is static.
  In Qlik Sense Enterprise, content files located:
  
  • In the /content/ <content library name>/ folder are part of a global content library.
  
  • In the /appcontent/ folder are part of the app specific library.
  The content files are never embedded in the qvf file.
  In Qlik Sense Desktop, content files located:
  
  • In the /content/default/ folder are outside the qvf file.
  
  • In the /media/ folder are embedded in the qvf file. */
    qUrl?: string;
    /** Relative path to the content file. The URL is static.
  In Qlik Sense Enterprise, content files located:
  
  • In the /content/ <content library name>/ folder are part of a global content library.
  
  • In the /appcontent/ folder are part of the app specific library.
  The content files are never embedded in the qvf file.
  In Qlik Sense Desktop, content files located:
  
  • In the /content/default/ folder are outside the qvf file.
  
  • In the /media/ folder are embedded in the qvf file. */
    qUrlDef?: string;
    [key: string]: any;
};
export type StaticContentUrl = {
    /** Relative path of the thumbnail. */
    qUrl?: string;
    [key: string]: any;
};
export type StaticContentUrlDef = {
    /** Relative path of the thumbnail. */
    qUrl?: string;
    [key: string]: any;
};
export type StoreTempSelectionStateReturn = {
    qId?: string;
    qReturn?: boolean;
    [key: string]: any;
};
export type StringExpr = {
    /** Expression evaluated to string. */
    qv?: string;
    [key: string]: any;
};
export type StringExpression = {
    qExpr?: string;
    [key: string]: any;
};
export type SymbolFrequency = {
    /** Frequency of the above symbol in the field */
    qFrequency?: number;
    /** Symbol. Either string and NaN or number alone */
    qSymbol?: SymbolValue;
    [key: string]: any;
};
export type SymbolValue = {
    /** Numeric value of the symbol. NaN otherwise. */
    qNumber?: number;
    /** String value of the symbol. This parameter is optional and present only if Symbol is a string. */
    qText?: string;
    [key: string]: any;
};
export type TableProfilingData = {
    /** Field values profiling info */
    qFieldProfiling?: Array<FieldInTableProfilingData>;
    /** Number of rows in the table. */
    qNoOfRows?: number;
    [key: string]: any;
};
export type TableRecord = {
    /** Comment related to the table. */
    qComment?: string;
    /** Information about the fields in the table. */
    qFields?: Array<FieldInTableData>;
    /** If set to true, Direct Discovery is used.
  Direct Discovery fields are not loaded into memory and remain in the external database. */
    qIsDirectDiscovery?: boolean;
    /** This property is set to true if the table contains a synthetic key. */
    qIsSynthetic?: boolean;
    /** This property is set to true if the table is loose. */
    qLoose?: boolean;
    /** Name of the table. */
    qName?: string;
    /** Number of rows in the table. */
    qNoOfRows?: number;
    /** Information about the position of the table. */
    qPos?: Point;
    /** Profiling information of the table. */
    qProfilingData?: TableProfilingData;
    /** List of tags related to the table. */
    qTableTags?: Array<string>;
    [key: string]: any;
};
export type TableRow = {
    /** Array of field values. */
    qValue?: Array<FieldValue>;
    [key: string]: any;
};
export type TableViewBroomPointSaveInfo = {
    /** List of fields in the table. */
    qFields?: Array<string>;
    /** Information about the position of the broom point. */
    qPos?: Point;
    /** Name of the table. */
    qTable?: string;
    [key: string]: any;
};
export type TableViewConnectionPointSaveInfo = {
    /** List of the fields in the table. */
    qFields?: Array<string>;
    /** Information about the position of the connection point. */
    qPos?: Point;
    [key: string]: any;
};
export type TableViewCtlSaveInfo = {
    /** Internal view mode. */
    qInternalView?: TableViewSaveInfo;
    /** Source view mode. */
    qSourceView?: TableViewSaveInfo;
    [key: string]: any;
};
export type TableViewDlgSaveInfo = {
    /** Set of data for internal and source view modes. */
    qCtlInfo?: TableViewCtlSaveInfo;
    /** View mode to display when opening Qlik Sense data model viewer.
  One of:
  
  • 0 for internal view mode.
  
  • 1 for source view mode. */
    qMode?: number;
    /** Information about the position of the dialog window.
  Not used in Qlik Sense. */
    qPos?: Rect;
    [key: string]: any;
};
export type TableViewSaveInfo = {
    /** List of the broom points in the database model viewer.
  Not used in Qlik Sense. */
    qBroomPoints?: Array<TableViewBroomPointSaveInfo>;
    /** List of connection points in the database model viewer.
  Not used in Qlik Sense. */
    qConnectionPoints?: Array<TableViewConnectionPointSaveInfo>;
    /** List of the tables in the database model viewer. */
    qTables?: Array<TableViewTableWinSaveInfo>;
    /** Zoom factor in the database model viewer.
  The default value is 1.0.
  @defaultValue 1 */
    qZoomFactor?: number;
    [key: string]: any;
};
export type TableViewTableWinSaveInfo = {
    /** Table name. */
    qCaption?: string;
    /** Information about the position of the table. */
    qPos?: Rect;
    [key: string]: any;
};
export type TextMacro = {
    /** Variable value. */
    qDisplayString?: string;
    /** Is set to true if the variable is a reserved variable. */
    qIsReserved?: boolean;
    /** Is set to true if the variable is a system variable. */
    qIsSystem?: boolean;
    /** Order in which the variable was referenced during the script execution.
  The same number sequence is used for both qRefSeqNo and qSetSeqNo . */
    qRefSeqNo?: number;
    /** Order in which the variable was updated during the script execution.
  The same number sequence is used for both qRefSeqNo and qSetSeqNo . */
    qSetSeqNo?: number;
    /** Name of the variable. */
    qTag?: string;
    [key: string]: any;
};
export type TotalMode = {
    [key: string]: any;
};
export type TransformAppParameters = {
    /** The name (title) of the application */
    qName?: string;
    /** Prefix to be used on inserted ScriptParameters, only applicable for template apps */
    qScriptParameterPrefix?: string;
    /** ID of the space where the app is to be created. Empty value implies Personal space */
    qSpaceId?: string;
    [key: string]: any;
};
export type TransformAppResult = {
    /** ID of created App */
    qAppId?: string;
    [key: string]: any;
};
export type TreeData = {
    /** The message displayed if calculation condition is not fulfilled. */
    qCalcCondMsg?: string;
    /** Information on the dimension. */
    qDimensionInfo?: Array<NxTreeDimensionInfo>;
    /** Defines the order of the dimenion levels/columns in the TreeData object.
  Column numbers are separated by a comma.
  Example: [1,0,2] means that the first level in the tree structure is dimension 1, followed by dimension 0 and dimension 2. */
    qEffectiveInterColumnSortOrder?: Array<number>;
    /** This parameter is optional and is displayed in case of error. */
    qError?: NxValidationError;
    /** True if other row exists. */
    qHasOtherValues?: boolean;
    /** Position of the last expended cell.
  This property is optional. */
    qLastExpandedPos?: NxCellPosition;
    /** Information on the measures calculated on the whole tree. */
    qMeasureInfo?: Array<NxMeasureInfo>;
    /** The total number of nodes on each dimension. */
    qNodesOnDim?: Array<number>;
    /** Name of the alternate state.
  Default is current selections $ . */
    qStateName?: string;
    /** Title of the TreeData object, for example the title of a chart. */
    qTitle?: string;
    /** Set of data.
  Is empty if nothing has been defined in qInitialDataFetch in TreeDataDef. */
    qTreeDataPages?: Array<NxTreeNode>;
    [key: string]: any;
};
export type TreeDataDef = {
    /** Specifies a calculation condition object.
  If CalcCondition.Cond is not fulfilled, the TreeData is excluded from the calculation and CalcCondition.Msg is evaluated.
  By default, there is no calculation condition.
  This property is optional. */
    qCalcCondition?: NxCalcCond;
    /** Set Expression valid for the whole cube. Used to limit computations to the set specified. */
    qContextSetExpression?: string;
    /** Array of dimensions. */
    qDimensions?: Array<NxTreeDimensionDef>;
    /** Expansion state per dimension. */
    qExpansionState?: Array<ExpansionData>;
    /** Initial data set.
  This property is optional. */
    qInitialDataFetch?: Array<NxTreeDataOption>;
    /** Defines the order of the dimension levels/columns in the TreeData object.
  Column numbers are separated by a comma.
  Example: [1,0,2] means that the first level in the tree structure is dimension 1, followed by dimension 0 and dimension 2.
  The default sort order is the order in which the dimensions and measures have been defined in the TreeDataDef. */
    qInterColumnSortOrder?: Array<number>;
    /** If this property is set to true, the cells are opened expanded. The default value is false. */
    qOpenFullyExpanded?: boolean;
    /** If this property is set to true, the missing symbols (if any) are replaced by 0 if the value is a numeric and by an empty string if the value is a string.
  The default value is false. */
    qPopulateMissing?: boolean;
    /** Name of the alternate state.
  Default is current selections $ . */
    qStateName?: string;
    /** Removes missing values. */
    qSuppressMissing?: boolean;
    /** Removes zero values. */
    qSuppressZero?: boolean;
    /** Title of the TreeData object, for example the title of a chart. */
    qTitle?: StringExpr;
    /** List of measures to calculate on the whole tree. */
    qValueExprs?: Array<NxMeasure>;
    [key: string]: any;
};
export type UndoInfo = {
    /** Number of possible redos. */
    qRedoCount?: number;
    /** Number of possible undos. */
    qUndoCount?: number;
    [key: string]: any;
};
export type UndoInfoDef = {
    [key: string]: any;
};
export type ValueExpr = {
    /** Expression evaluated to dual. */
    qv?: string;
    [key: string]: any;
};
export type ValueExpression = {
    qExpr?: string;
    [key: string]: any;
};
/**
  @param qGenericId - Object ID.
  @param qGenericType - The type of the object.
  @param qHandle - The handle used to connect to object.
  @param qType - The native type of the object.
  @param auth - Auth object used to make requests
 */
export declare class Variable {
    session: RpcSession;
    auth: Auth;
    qGenericId?: string;
    qGenericType?: string;
    qHandle?: number;
    qType?: string;
    [key: string]: any;
    constructor({ qGenericId, qGenericType, qHandle, qType, ...rest }: {
        qGenericId?: string;
        qGenericType?: string;
        qHandle?: number;
        qType?: string;
    }, session: RpcSession, auth?: Auth);
    /**    Returns the calculated value of a variable.
      @deprecated
  
    */
    getContent(): Promise<AlfaNumString>;
    /**    Returns the raw value of a variable.
      @deprecated
  
    */
    getRawContent(): Promise<string>;
    /**    Sets a value to a variable.
      @deprecated
      @param qContent - Value of the variable.
      @param qUpdateMRU - If set to true, the value is added to the Most Recently Used (MRU) list.
    */
    setContent(qContent: string, qUpdateMRU: boolean): Promise<boolean>;
    /**    Sets the value of a dual variable overriding any input constraints.
      @deprecated
      @param qs - String representation of a dual value.
  Set this parameter to "", if the string representation is to be Null.
      @param qd - Numeric representation of a dual value.
    */
    forceContent(qs: string, qd: number): Promise<object>;
    /**    Gets the properties of a variable.
      @deprecated
  
    */
    getNxProperties(): Promise<NxVariableProperties>;
    /**    Sets some properties to a variable.
      @deprecated
      @param qProperties - Information about the properties of the variable
    */
    setNxProperties({ qNumberPresentation: { qType, qnDec, ...restQNumberPresentation }, ...rest }?: NxVariableProperties): Promise<object>;
    on(event: EventTypes, listener: EventListener): void;
    once(event: EventTypes, listener: EventListener): void;
}
export type VariableList = {
    /** List of the variables. */
    qItems?: Array<NxVariableListItem>;
    /** Should be set to create an object that is linked to another object. Enter the identifier of the linking object (i.e the object you want to link to).
  If you do not want to link your object, set this parameter to an empty string. */
    qExtendsId?: string;
    qInfo?: NxInfo;
    /** Used to collect meta data.
  
  Properties
  Semantic type with an empty structure. */
    qMetaDef?: object;
    /** Name of the alternate state.
  Default is current selections _$_ . Default:$
  @defaultValue "$" */
    qStateName?: string;
    /** Defines the list of variables in an app. */
    qVariableListDef?: VariableListQVariableListDef;
    [key: string]: any;
};
export type VariableListDef = {
    /** Data */
    qData?: VariableListQVariableListDefQData;
    /** Shows the system variables if set to true.
  @defaultValue true */
    qShowConfig?: boolean;
    /** Shows the reserved variables if set to true.
  @defaultValue true */
    qShowReserved?: boolean;
    /** Shows the session variables if set to true. */
    qShowSession?: boolean;
    /** Type of variables to include in the list.
  @defaultValue "variable" */
    qType?: string;
    [key: string]: any;
};
export declare class Qix extends Global {
    session: RpcSession;
}
