import Auth from "../auth/auth.js";
class Extension {
  constructor({
    author,
    bundle,
    bundled,
    checksum,
    createdAt,
    dependencies,
    deprecated,
    description,
    file,
    homepage,
    icon,
    id,
    keywords,
    license,
    name,
    preview,
    qextFilename,
    qextVersion,
    repository,
    supernova,
    supplier,
    tags,
    tenantId,
    type,
    updateAt,
    userId,
    version,
    ...rest
  }, auth) {
    this.auth = auth;
    this.author = author;
    if (bundle !== void 0 && bundle !== null) {
      this.bundle = bundle;
    }
    this.bundled = bundled;
    this.checksum = checksum;
    this.createdAt = createdAt;
    this.dependencies = dependencies;
    this.deprecated = deprecated;
    this.description = description;
    this.file = file;
    this.homepage = homepage;
    this.icon = icon;
    this.id = id;
    this.keywords = keywords;
    this.license = license;
    this.name = name;
    this.preview = preview;
    this.qextFilename = qextFilename;
    this.qextVersion = qextVersion;
    this.repository = repository;
    this.supernova = supernova;
    this.supplier = supplier;
    this.tags = tags;
    this.tenantId = tenantId;
    this.type = type;
    this.updateAt = updateAt;
    this.userId = userId;
    this.version = version;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
  /**
    Downloads a file from the extension archive.
  
      @param filepath - Path to the file archive for the specified extension archive. Folders separated with forward slashes.
    */
  async getFileByFilepath(filepath) {
    await this.auth.rest(
      "/extensions/{id}/file/{filepath}".replace("{filepath}", filepath).replace("{id}", this.id ?? ""),
      {
        method: "GET"
      }
    );
  }
  /**
    Downloads the extension as an archive.
  
    */
  async getFile() {
    await this.auth.rest(
      "/extensions/{id}/file".replace("{id}", this.id ?? ""),
      {
        method: "GET"
      }
    );
  }
  /**
    Deletes a specific extension.
  
    */
  async delete() {
    await this.auth.rest(
      "/extensions/{id}".replace("{id}", this.id ?? ""),
      {
        method: "DELETE"
      }
    );
  }
  /**
    Updates a specific extension with provided data. If a file is provided, the data field is not required.
  
      @param data -
      @param file - Extension archive.
    */
  async patch(data, file) {
    const formData = new FormData();
    if (file !== void 0) {
      formData.append("file", new Blob([file], { type: "application/octet-stream" }));
    }
    if (data !== void 0) {
      formData.append("data", JSON.stringify(data));
    }
    const response = await this.auth.rest(
      "/extensions/{id}".replace("{id}", this.id ?? ""),
      {
        method: "PATCH",
        body: formData
      }
    );
    const responseJson = await response.json();
    Object.keys(responseJson).forEach((key) => {
      if (this[key]) {
        this[key] = responseJson[key];
      }
    });
    return this;
  }
}
class ExtensionsClass {
  constructor({
    data,
    ...rest
  }, auth) {
    this.auth = auth;
    if (data !== void 0 && data !== null) {
      this.data = data;
      if (data?.length > 0 && !(data[0] instanceof Extension)) {
        this.data = data.map((element) => new Extension(element, this.auth));
      }
    }
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class Extensions {
  constructor(config) {
    this.config = config instanceof Auth ? config.config : config;
    this.auth = config instanceof Auth ? config : new Auth(config);
  }
  /**
    Returns a specific extension.
  
      @param id - Extension identifier or its qextFilename.
    */
  async get(id) {
    const response = await this.auth.rest(
      "/extensions/{id}".replace("{id}", id),
      {
        method: "GET"
      }
    );
    const responseJson = await response.json();
    return new Extension(responseJson, this.auth);
  }
  /**
    Lists all extensions.
  
    */
  async getExtensions() {
    const response = await this.auth.rest(
      "/extensions",
      {
        method: "GET"
      }
    );
    const responseJson = await response.json();
    return new ExtensionsClass(responseJson, this.auth);
  }
  /**
    Creates a new extension. If a file is provided, the data field is not required.
  
      @param data -
      @param file - Extension archive.
    */
  async create(data, file) {
    const formData = new FormData();
    if (file !== void 0) {
      formData.append("file", new Blob([file], { type: "application/octet-stream" }));
    }
    if (data !== void 0) {
      formData.append("data", JSON.stringify(data));
    }
    const response = await this.auth.rest(
      "/extensions",
      {
        method: "POST",
        body: formData
      }
    );
    const responseJson = await response.json();
    return new Extension(responseJson, this.auth);
  }
}
export {
  Extension,
  Extensions,
  ExtensionsClass
};
