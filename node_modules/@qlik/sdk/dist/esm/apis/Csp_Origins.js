import Auth from "../auth/auth.js";
import ListableResource from "../listable.js";
class CSPEntry {
  constructor({
    id,
    childSrc,
    connectSrc,
    connectSrcWSS,
    createdDate,
    description,
    fontSrc,
    formAction,
    frameAncestors,
    frameSrc,
    imgSrc,
    mediaSrc,
    modifiedDate,
    name,
    objectSrc,
    origin,
    scriptSrc,
    styleSrc,
    workerSrc,
    ...rest
  }, auth) {
    this.auth = auth;
    this.id = id;
    this.childSrc = childSrc;
    this.connectSrc = connectSrc;
    this.connectSrcWSS = connectSrcWSS;
    this.createdDate = createdDate;
    this.description = description;
    this.fontSrc = fontSrc;
    this.formAction = formAction;
    this.frameAncestors = frameAncestors;
    this.frameSrc = frameSrc;
    this.imgSrc = imgSrc;
    this.mediaSrc = mediaSrc;
    this.modifiedDate = modifiedDate;
    this.name = name;
    this.objectSrc = objectSrc;
    this.origin = origin;
    this.scriptSrc = scriptSrc;
    this.styleSrc = styleSrc;
    this.workerSrc = workerSrc;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
  /**
    Deletes a specific CSP entry
  
    */
  async delete() {
    await this.auth.rest(
      "/csp-origins/{id}".replace("{id}", this.id ?? ""),
      {
        method: "DELETE"
      }
    );
  }
  /**
    Updates a CSP entry
  
      @param data -
    */
  async set(data) {
    const response = await this.auth.rest(
      "/csp-origins/{id}".replace("{id}", this.id ?? ""),
      {
        method: "PUT",
        body: JSON.stringify(data)
      }
    );
    const responseJson = await response.json();
    Object.keys(responseJson).forEach((key) => {
      if (this[key]) {
        this[key] = responseJson[key];
      }
    });
    return this;
  }
}
class CspOrigins {
  constructor(config) {
    this.config = config instanceof Auth ? config.config : config;
    this.auth = config instanceof Auth ? config : new Auth(config);
  }
  /**
    Retrieves the CSP header for a tenant
  
    */
  async generateHeader() {
    const response = await this.auth.rest(
      "/csp-origins/actions/generate-header",
      {
        method: "GET"
      }
    );
    return response.json();
  }
  /**
    Returns details for a specific CSP entry
  
      @param id - The CSP entry's unique identifier.
    */
  async get(id) {
    const response = await this.auth.rest(
      "/csp-origins/{id}".replace("{id}", id),
      {
        method: "GET"
      }
    );
    const responseJson = await response.json();
    return new CSPEntry(responseJson, this.auth);
  }
  /**
    Retrieves all CSP entries for a tenant
  
      @param childSrc - Filter resources by directive 'childSrc', true/false.
      @param connectSrc - Filter resources by directive 'connectSrc', true/false.
      @param connectSrcWSS - Filter resources by directive 'connectSrcWSS', true/false.
      @param fontSrc - Filter resources by directive 'fontSrc', true/false.
      @param formAction - Filter resources by directive 'formAction', true/false.
      @param frameAncestors - Filter resources by directive 'frameAncestors', true/false.
      @param frameSrc - Filter resources by directive 'frameSrc', true/false.
      @param imgSrc - Filter resources by directive 'imgSrc', true/false.
      @param limit - Maximum number of CSP-Origins to retrieve.
      @param mediaSrc - Filter resources by directive 'mediaSrc', true/false.
      @param name - Filter resources by name (wildcard and case insensitive).
      @param next - Cursor to the next page.
      @param objectSrc - Filter resources by directive 'objectSrc', true/false.
      @param origin - Filter resources by origin (wildcard and case insensitive).
      @param prev - Cursor to previous next page.
      @param scriptSrc - Filter resources by directive 'scriptSrc', true/false.
      @param sort - Field to sort by, prefix with -/+ to indicate order.
      @param styleSrc - Filter resources by directive 'styleSrc', true/false.
      @param workerSrc - Filter resources by directive 'workerSrc', true/false.
    */
  async getCspOrigins(queryParams = { limit: 20 }) {
    const response = await this.auth.rest(
      `/csp-origins?${new URLSearchParams(Object.entries(queryParams).filter(([, v]) => v !== void 0).map(([k, v]) => [k, v.toString()])).toString()}`,
      {
        method: "GET"
      }
    );
    const responseJson = await response.json();
    return new ListableResource(responseJson, this.auth, CSPEntry, queryParams);
  }
  /**
    Creates a new CSP entry
  
      @param data -
    */
  async create(data) {
    const response = await this.auth.rest(
      "/csp-origins",
      {
        method: "POST",
        body: JSON.stringify(data)
      }
    );
    const responseJson = await response.json();
    return new CSPEntry(responseJson, this.auth);
  }
}
export {
  CSPEntry,
  CspOrigins
};
