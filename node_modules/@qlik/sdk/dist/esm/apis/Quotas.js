import Auth from "../auth/auth.js";
class Quotas {
  constructor(config) {
    this.config = config instanceof Auth ? config.config : config;
    this.auth = config instanceof Auth ? config : new Auth(config);
  }
  /**
    Returns a specific quota item for the tenant (provided in JWT).
  
      @param id - The unique identifier of the quota item. For example, "app_mem_size", "app_upload_disk_size", or "shared_spaces".
      @param reportUsage - The Boolean flag indicating whether quota usage shall be part of the response. The default value is false (usage not included).
    */
  async gets(id, queryParams = {}) {
    const response = await this.auth.rest(
      `${"/quotas/{id}".replace("{id}", id)}?${new URLSearchParams(Object.entries(queryParams).filter(([, v]) => v !== void 0).map(([k, v]) => [k, v.toString()])).toString()}`,
      {
        method: "GET"
      }
    );
    return response.json();
  }
  /**
    Returns all quota items for the tenant (provided in JWT).
  
      @param reportUsage - The Boolean flag indicating whether quota usage shall be part of the response. The default value is false (only limits returned).
    */
  async getQuotas(queryParams = {}) {
    const response = await this.auth.rest(
      `/quotas?${new URLSearchParams(Object.entries(queryParams).filter(([, v]) => v !== void 0).map(([k, v]) => [k, v.toString()])).toString()}`,
      {
        method: "GET"
      }
    );
    return response.json();
  }
}
export {
  Quotas
};
