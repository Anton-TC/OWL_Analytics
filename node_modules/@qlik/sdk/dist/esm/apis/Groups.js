import Auth from "../auth/auth.js";
import ListableResource from "../listable.js";
class Group {
  constructor({
    assignedRoles,
    createdAt,
    id,
    idpId,
    lastUpdatedAt,
    links,
    name,
    status,
    tenantId,
    ...rest
  }, auth) {
    this.auth = auth;
    if (assignedRoles !== void 0 && assignedRoles !== null) {
      this.assignedRoles = assignedRoles;
    }
    this.createdAt = createdAt;
    this.id = id;
    this.idpId = idpId;
    this.lastUpdatedAt = lastUpdatedAt;
    this.links = links;
    this.name = name;
    this.status = status;
    this.tenantId = tenantId;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
  /**
    Delete group by id
  
    */
  async delete() {
    await this.auth.rest(
      "/groups/{groupId}".replace("{groupId}", this.id ?? ""),
      {
        method: "DELETE"
      }
    );
  }
  /**
    Update group by id
  
      @param data - An array of JSON Patches for a group.
    */
  async patch(data) {
    await this.auth.rest(
      "/groups/{groupId}".replace("{groupId}", this.id ?? ""),
      {
        method: "PATCH",
        body: JSON.stringify(data)
      }
    );
  }
}
class Groups {
  constructor(config) {
    this.config = config instanceof Auth ? config.config : config;
    this.auth = config instanceof Auth ? config : new Auth(config);
  }
  /**    Retrieves a list of groups matching the filter using advanced query string.
    Filter groups
  
      @param limit - The number of user entries to retrieve.
      @param next - Get users with IDs that are higher than the target user ID. Cannot be used in conjunction with prev.
      @param prev - Get users with IDs that are lower than the target user ID. Cannot be used in conjunction with next.
      @param sort - The field to sort by, with +/- prefix indicating sort order
      @param data - An advanced query filter to be used for complex user querying in the tenant.
    */
  async filter(data, queryParams = { limit: 20, sort: "+name" }) {
    const response = await this.auth.rest(
      `/groups/actions/filter?${new URLSearchParams(Object.entries(queryParams).filter(([, v]) => v !== void 0).map(([k, v]) => [k, v.toString()])).toString()}`,
      {
        method: "POST",
        body: JSON.stringify(data)
      }
    );
    const responseJson = await response.json();
    return new ListableResource(responseJson, this.auth, Group, queryParams);
  }
  /**    Returns the active tenant's group settings.
    Get group settings
  
    */
  async getSettings() {
    const response = await this.auth.rest(
      "/groups/settings",
      {
        method: "GET"
      }
    );
    return response.json();
  }
  /**
    Update group settings
  
      @param data - An array of JSON Patches for the groups settings.
    */
  async patchSettings(data) {
    await this.auth.rest(
      "/groups/settings",
      {
        method: "PATCH",
        body: JSON.stringify(data)
      }
    );
  }
  /**    Returns the requested group.
    Get group by id
  
      @param groupId - The group's unique identifier
    */
  async get(groupId) {
    const response = await this.auth.rest(
      "/groups/{groupId}".replace("{groupId}", groupId),
      {
        method: "GET"
      }
    );
    const responseJson = await response.json();
    return new Group(responseJson, this.auth);
  }
  /**    Returns a list of groups with cursor-based pagination.
    List groups.
  
      @param filter - The advanced filtering to use for the query. Refer to RFC 7644 https://datatracker.ietf.org/doc/rfc7644/ for the syntax. Cannot be combined with any of the fields marked as deprecated. All conditional statements within this query parameter are case insensitive.
      @param limit - The number of groups to retrieve.
      @param next - The next page cursor.
      @param prev - The previous page cursor.
      @param sort - Optional resource field name to sort on, eg. name. Can be prefixed with +/- to determine order, defaults to (+) ascending.
      @param systemGroups - Return system groups (e.g. Everyone) instead of regular groups. Cannot be combined with any other query parameters.
      @param totalResults - Whether to return a total match count in the result. Defaults to false.
    */
  async getGroups(queryParams = { limit: 20 }) {
    const response = await this.auth.rest(
      `/groups?${new URLSearchParams(Object.entries(queryParams).filter(([, v]) => v !== void 0).map(([k, v]) => [k, v.toString()])).toString()}`,
      {
        method: "GET"
      }
    );
    const responseJson = await response.json();
    return new ListableResource(responseJson, this.auth, Group, queryParams);
  }
  /**    Creates a group. The maximum number of groups a tenant can have is 10,000.
    Create group.
  
      @param data -
    */
  async create(data) {
    const response = await this.auth.rest(
      "/groups",
      {
        method: "POST",
        body: JSON.stringify(data)
      }
    );
    const responseJson = await response.json();
    return new Group(responseJson, this.auth);
  }
}
export {
  Group,
  Groups
};
