/**
This is spectacularly generated code by spectacular based on
Qlik Cloud Services APIs
*/
import Auth from '../auth/auth.js';
import ListableResource from '../listable.js';
import type { Config } from '../types/types.js';
export type EventExtensions = {
    /** Specifies the entity performing the action on behalf of another party listed as triggering the action. */
    actor?: {
        sub?: string;
        subType?: string;
    };
    /** Id of the owner of the resource affected by the eventContext. */
    ownerId?: string;
    /** Id of the space related to the action performed on the eventContext. */
    spaceId?: string;
    /** If the event originated from a sub resource the topLevelResourceId contains the id of the top level resource associated with the sub resource. */
    topLevelResourceId?: string;
    /** Might be present if the action is of type "updated" and should contain information about the changes made to the resource. */
    updates?: any;
    [key: string]: any;
};
export type GetArchiveResult = {
    /** List of archived events. The structure of the events depend on their type and version. */
    data?: Array<object>;
    [key: string]: any;
};
export type GetByIDResult = {
    /** The type that content is encoded in, always "application/json". */
    contentType?: string;
    /** Additional information about the event's details. The structure depends on the type and version of the event. */
    data?: object;
    /** The event's unique identifier. */
    eventId?: string;
    /** The RFC3339 datetime when the event happened. */
    eventTime?: string;
    /** The type of event that describes committed action. */
    eventType?: string;
    /** The version of the event type. */
    eventTypeVersion?: string;
    /** The availability of the properties depends on the event and the context it was triggered in. */
    extensions?: EventExtensions;
    /** The resource item's unique identifier. */
    id?: string;
    links?: GetLinks;
    /** The source of the event message, usually the producing service. */
    source?: string;
    /** The ID of the tenant that owns the item. This is populated using the JWT. */
    tenantId?: string;
    /** The ID of the user who performed the action that triggered the event. */
    userId?: string;
    [key: string]: any;
};
export type GetLinks = {
    Self?: HrefDeprecated;
    self?: Href;
    [key: string]: any;
};
export type GetObjectsResult = {
    /** List of requested resources. */
    data?: Array<string>;
    links?: ListLinks;
    [key: string]: any;
};
export type GetSettingsResult = {
    /** Server configuration options. */
    data?: {
        ArchiveEnabled?: boolean;
        EventTTL?: number;
    };
    [key: string]: any;
};
export type Href = {
    href?: string;
    [key: string]: any;
};
export type HrefDeprecated = {
    Href?: string;
    [key: string]: any;
};
export type ListLinks = {
    Next?: HrefDeprecated;
    Prev?: HrefDeprecated;
    Self?: HrefDeprecated;
    next?: Href;
    prev?: Href;
    self?: Href;
    [key: string]: any;
};
export declare class Audits {
    auth: Auth;
    config: Config;
    constructor(config: Config | Auth);
    /**    Finds and returns audit events from the archive, formatted as a JSON array, for the given date and tenant (in JWT).
    Retrieves audit events from long term storage.
  
      @param date - Date to be used as filter and criteria during extraction.
    */
    getArchives(queryParams: {
        date: string;
    }): Promise<GetArchiveResult>;
    /**    It includes options that represent the server configuration state and parameters that were used to run the server with certain functionality.
    Returns the server configuration options.
  
    */
    getSettings(): Promise<GetSettingsResult>;
    /**
    Finds and returns the distinct list of unique event sources.
  
    */
    getSources(): Promise<GetObjectsResult>;
    /**
    Finds and returns the distinct list of unique event types.
  
    */
    getTypes(): Promise<GetObjectsResult>;
    /**
    Finds and returns the persisted audit events for the given tenant.
  
      @param id - The audit item's unique identifier.
    */
    gets(id: string): Promise<GetByIDResult>;
    /**
    Finds and returns the persisted audit events for the given tenant.
  
      @param eventTime - The start/end time interval formatted in ISO 8601 to search by eventTime. For example, "?eventTime=2021-07-14T18:41:15.00Z/2021-07-14T18:41:15.99Z".
      @param eventType - The case-sensitive string used to search by eventType.
      @param id - The comma separated list of audit unique identifiers.
      @param limit - The maximum number of resources to return for a request. The limit must be an integer between 1 and 100 (inclusive).
      @param next - The cursor to the next page of resources. Provide either the next or prev cursor, but not both.
      @param prev - The cursor to the previous page of resources. Provide either the next or prev cursor, but not both.
      @param sort - The property of a resource to sort on (default sort is -eventTime). The supported properties are source, eventType, and eventTime. A property must be prefixed by + or - to indicate ascending or descending sort order respectively.
      @param source - The case-sensitive string used to search by source.
      @param userId - The case-sensitive string used to search by userId.
    */
    getAudits(queryParams?: {
        eventTime?: string;
        eventType?: string;
        id?: string;
        limit?: number;
        next?: string;
        prev?: string;
        sort?: string;
        source?: string;
        userId?: string;
    }): Promise<ListableResource<GetByIDResult>>;
}
