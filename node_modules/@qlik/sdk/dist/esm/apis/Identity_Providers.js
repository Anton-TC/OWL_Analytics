import Auth from "../auth/auth.js";
import ListableResource from "../listable.js";
class IdentityProviders {
  constructor(config) {
    this.config = config instanceof Auth ? config.config : config;
    this.auth = config instanceof Auth ? config : new Auth(config);
  }
  /**    This endpoint retrieves identity providers' metadata.
    Returns identity providers' metadata
  
    */
  async getWellKnownMetadataJson() {
    const response = await this.auth.rest(
      "/identity-providers/.well-known/metadata.json",
      {
        method: "GET"
      }
    );
    return response.json();
  }
  /**    This endpoint retrieves IdP metadata.
    Returns the active interactive IdP metadata
  
    */
  async getMeMeta() {
    const response = await this.auth.rest(
      "/identity-providers/me/meta",
      {
        method: "GET"
      }
    );
    return response.json();
  }
  /**    This endpoint retrieves the status of IdP configurations. Requires TenantAdmin role.
    Returns the current status of IdP configurations
  
    */
  async getStatus() {
    const response = await this.auth.rest(
      "/identity-providers/status",
      {
        method: "GET"
      }
    );
    return response.json();
  }
  /**    This endpoint deletes an identity provider from the service. It returns a valid 204 when the IdP is deleted. Only a user with the role of TenantAdmin and tenant access can delete an associated IdP. Edge-auth service can also delete.
    Deletes the IdP with the specified ID
  
      @param id - The identity provider ID.
    */
  async delete(id) {
    await this.auth.rest(
      "/identity-providers/{id}".replace("{id}", id),
      {
        method: "DELETE"
      }
    );
  }
  /**    This endpoint is used to retrieve an identity provider from the service. It returns a valid 200 OK response when the IdP exists and the user (TenantAdmin) or service (edge-auth) is authorized to view the contents. Additionally, returns a header "QLIK-IDP-POPTS" (A unique string representing a hash of the current configuration being tested). It returns a 404 Not Found if the criteria is not met.
    Returns the IdP with the specified ID
  
      @param id - The identity provider ID.
    */
  async get(id) {
    const response = await this.auth.rest(
      "/identity-providers/{id}".replace("{id}", id),
      {
        method: "GET"
      }
    );
    return response.json();
  }
  /**    This endpoint patches an identity provider from the service. It returns a valid 204 when the IdP is patched. Only an edge-auth service request or a user with the role of TenantAdmin can patch an associated IdP. Partial failure is treated as complete failure and returns an error.
    Updates the IdP with the specified ID
  
      @param id - The identity provider ID.
      @param QLIK-IDP-POPTS-MATCH - A unique string representing a hash that should map to an IdP's hash representation of the current configuration being tested.
      @param data - Attributes that the user wants to patially update for an identity provider resource.
    */
  async patch(id, data) {
    await this.auth.rest(
      "/identity-providers/{id}".replace("{id}", id),
      {
        method: "PATCH",
        body: JSON.stringify(data)
      }
    );
  }
  /**    This endpoint retrieves one or more identity providers from the service. The tenantID in the JWT will be used to fetch the identity provider.
    Retrieves one or more IdPs for a specified tenantId.
  
      @param active - If provided, filters the results by the active field.
      @param limit - The number of IdP entries to retrieve.
      @param next - The next page cursor.
      @param prev - The previous page cursor.
    */
  async getIdentityProviders(queryParams = { limit: 20 }) {
    const response = await this.auth.rest(
      `/identity-providers?${new URLSearchParams(Object.entries(queryParams).filter(([, v]) => v !== void 0).map(([k, v]) => [k, v.toString()])).toString()}`,
      {
        method: "GET"
      }
    );
    const responseJson = await response.json();
    return new ListableResource(responseJson, this.auth, null, queryParams);
  }
  /**    This endpoint creates an identity provider resource. It returns a 201 Created when creation is successful with a header "QLIK-IDP-POPTS" (A unique string representing a hash of the current configuration being tested), returns a 403 Forbidden for a non TenantAdmin user JWT or if the tenantID in the JWT does not match with any of the tenantIDs in the payload. An IdP can be created with Pending Options or options depending whether the IdP is interactive or not.
    Creates a new IdP
  
      @param data - Attributes that the user wants to set for a new identity provider resource.
    */
  async create(data) {
    const response = await this.auth.rest(
      "/identity-providers",
      {
        method: "POST",
        body: JSON.stringify(data)
      }
    );
    return response.json();
  }
}
export {
  IdentityProviders
};
