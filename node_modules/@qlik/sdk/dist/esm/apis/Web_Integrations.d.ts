/**
This is spectacularly generated code by spectacular based on
Qlik Cloud Services APIs
*/
import Auth from '../auth/auth.js';
import ListableResource from '../listable.js';
import type { Config } from '../types/types.js';
/**
  A web integration object.
  @param created - The time the web integration was created.
  @param createdBy - The user that created the web integration.
  @param id - The unique web integration identifier.
  @param lastUpdated - The time the web integration was last updated.
  @param name - The name of the web integration.
  @param tenantId - The tenant that the web integration belongs to.
  @param validOrigins - The origins that are allowed to make requests to the tenant.
  @param auth - Auth object used to make requests
 */
export declare class WebIntegration {
    auth: Auth;
    created?: string;
    createdBy?: string;
    id?: string;
    lastUpdated?: string;
    name?: string;
    tenantId?: string;
    validOrigins?: Array<string>;
    [key: string]: any;
    constructor({ created, createdBy, id, lastUpdated, name, tenantId, validOrigins, ...rest }: {
        created?: string;
        createdBy?: string;
        id?: string;
        lastUpdated?: string;
        name?: string;
        tenantId?: string;
        validOrigins?: Array<string>;
    }, auth?: Auth);
    /**    Deletes a single web integration by ID.
    Delete web integration by ID
  
    */
    delete(): Promise<void>;
    /**    Updates a single web integration by ID.
    Update web integration by ID
  
      @param data - Properties that the user wants to update for the web integration.
    */
    patch(data: WebIntegrationPatchSchema): Promise<void>;
}
export type WebIntegrationPatch = {
    /** The operation to be performed. */
    op: 'replace' | string;
    /** A JSON Pointer. */
    path: '/name' | '/validOrigins' | string;
    /** New value to be used for this operation. */
    value: string;
    [key: string]: any;
};
export type WebIntegrationPatchSchema = Array<WebIntegrationPatch>;
export type WebIntegrationPost = {
    /** The time the web integration was created. */
    created?: string;
    /** The user that created the web integration. */
    createdBy?: string;
    /** The unique web integration identifier. */
    id?: string;
    /** The time the web integration was last updated. */
    lastUpdated?: string;
    /** Pagination links */
    links?: {
        self: {
            href: string;
        };
    };
    /** The name of the newly created web integration.
  @example "My Web Integration" */
    name?: string;
    /** The tenant that the web integration belongs to. */
    tenantId?: string;
    /** The origins that are allowed to make requests to the tenant.
  @example ["https://thirdPartyApp.com"] */
    validOrigins?: Array<string>;
    [key: string]: any;
};
export type WebIntegrationPostSchema = {
    /** The name of the web integration to create.
  @example "My Web Integration" */
    name: string;
    /** The origins that are allowed to make requests to the tenant.
  @example ["https://thirdPartyApp.com"] */
    validOrigins?: Array<string>;
    [key: string]: any;
};
export declare class WebIntegrations {
    auth: Auth;
    config: Config;
    constructor(config: Config | Auth);
    /**    Retrieves a single web integration by ID.
    Get web integration by ID
  
      @param id - The ID of the web integration to retrieve.
    */
    get(id: string): Promise<WebIntegration>;
    /**    Retrieves web integrations matching the query.
    List web integrations
  
      @param endingBefore - The target web integration ID to start looking before for web integrations. Cannot be used in conjunction with startingAfter.
      @param limit - The number of web integration entries to retrieve.
      @param sort - The field to sort by. Prefix with +/- to indicate ascending/descending order.
      @param startingAfter - The target web integration ID to start looking after for web integrations. Cannot be used in conjunction with endingBefore.
      @param tenantId - The tenant ID to filter by.
    */
    getWebIntegrations(queryParams?: {
        endingBefore?: string;
        limit?: number;
        sort?: 'name' | '+name' | '-name';
        startingAfter?: string;
        tenantId?: string;
    }): Promise<ListableResource<WebIntegration>>;
    /**    Creates a web integration.
    Create web integration
  
      @param data - Properties that the user wants to set for the web integration.
    */
    create(data: WebIntegrationPostSchema): Promise<WebIntegrationPost>;
}
