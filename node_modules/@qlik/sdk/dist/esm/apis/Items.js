import Auth from "../auth/auth.js";
import ListableResource from "../listable.js";
class CollectionMetaResponseBody {
  constructor({
    items,
    ...rest
  }, auth) {
    this.auth = auth;
    if (items !== void 0 && items !== null) {
      if (items instanceof ItemsResultResponseBody) {
        this.items = items;
      } else {
        this.items = new ItemsResultResponseBody(items, this.auth);
      }
    }
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class CollectionResultResponseBody {
  constructor({
    createdAt,
    creatorId,
    description,
    id,
    itemCount,
    links,
    meta,
    name,
    tenantId,
    type,
    updatedAt,
    updaterId,
    ...rest
  }, auth) {
    this.auth = auth;
    this.createdAt = createdAt;
    this.creatorId = creatorId;
    this.description = description;
    this.id = id;
    this.itemCount = itemCount;
    this.links = links;
    if (meta !== void 0 && meta !== null) {
      if (meta instanceof CollectionMetaResponseBody) {
        this.meta = meta;
      } else {
        this.meta = new CollectionMetaResponseBody(meta, this.auth);
      }
    }
    this.name = name;
    this.tenantId = tenantId;
    this.type = type;
    this.updatedAt = updatedAt;
    this.updaterId = updaterId;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class ItemResultResponseBody {
  constructor({
    actions,
    collectionIds,
    createdAt,
    creatorId,
    description,
    id,
    isFavorited,
    itemViews,
    links,
    meta,
    name,
    ownerId,
    resourceAttributes,
    resourceCreatedAt,
    resourceCustomAttributes,
    resourceId,
    resourceLink,
    resourceReloadEndTime,
    resourceReloadStatus,
    resourceSize,
    resourceSubType,
    resourceType,
    resourceUpdatedAt,
    spaceId,
    tenantId,
    thumbnailId,
    updatedAt,
    updaterId,
    ...rest
  }, auth) {
    this.auth = auth;
    this.actions = actions;
    this.collectionIds = collectionIds;
    this.createdAt = createdAt;
    this.creatorId = creatorId;
    this.description = description;
    this.id = id;
    this.isFavorited = isFavorited;
    if (itemViews !== void 0 && itemViews !== null) {
      this.itemViews = itemViews;
    }
    this.links = links;
    this.meta = meta;
    this.name = name;
    this.ownerId = ownerId;
    this.resourceAttributes = resourceAttributes;
    this.resourceCreatedAt = resourceCreatedAt;
    this.resourceCustomAttributes = resourceCustomAttributes;
    this.resourceId = resourceId;
    this.resourceLink = resourceLink;
    this.resourceReloadEndTime = resourceReloadEndTime;
    this.resourceReloadStatus = resourceReloadStatus;
    if (resourceSize !== void 0 && resourceSize !== null) {
      this.resourceSize = resourceSize;
    }
    this.resourceSubType = resourceSubType;
    this.resourceType = resourceType;
    this.resourceUpdatedAt = resourceUpdatedAt;
    this.spaceId = spaceId;
    this.tenantId = tenantId;
    this.thumbnailId = thumbnailId;
    this.updatedAt = updatedAt;
    this.updaterId = updaterId;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
  /**    Finds and returns the collections of an item. This endpoint does not return the user's favorites collection.
  
    Returns the collections of an item.
  
      @param limit - The maximum number of resources to return for a request. The limit must be an integer between 1 and 100 (inclusive).
      @param name - The case-sensitive string used to search for a collection by name.
      @param next - The cursor to the next page of resources. Provide either the next or prev cursor, but not both.
      @param prev - The cursor to the previous page of resources. Provide either the next or prev cursor, but not both.
      @param query - The case-insensitive string used to search for a resource by name or description.
      @param sort - The property of a resource to sort on (default sort is +createdAt). The supported properties are createdAt, updatedAt, and name. A property must be prefixed by + or   - to indicate ascending or descending sort order respectively.
      @param type - The case-sensitive string used to search for a collection by type.
    */
  async getCollections(queryParams = {}) {
    const response = await this.auth.rest(
      `${"/items/{itemId}/collections".replace("{itemId}", this.id ?? "")}?${new URLSearchParams(Object.entries(queryParams).filter(([, v]) => v !== void 0).map(([k, v]) => [k, v.toString()])).toString()}`,
      {
        method: "GET"
      }
    );
    const responseJson = await response.json();
    return new ListableResource(responseJson, this.auth, CollectionResultResponseBody, queryParams);
  }
  /**    Finds and returns the published items for a given item.
  
    Returns published items for a given item.
  
      @param limit - The maximum number of resources to return for a request. The limit must be an integer between 1 and 100 (inclusive).
      @param next - The cursor to the next page of resources. Provide either the next or prev cursor, but not both.
      @param prev - The cursor to the previous page of resources. Provide either the next or prev cursor, but not both.
      @param resourceType - The case-sensitive string used to search for an item by resourceType.
      @param sort - The property of a resource to sort on (default sort is +createdAt). The supported properties are createdAt, updatedAt, and name. A property must be prefixed by + or   - to indicate ascending or descending sort order respectively.
    */
  async getPublisheditems(queryParams = {}) {
    const response = await this.auth.rest(
      `${"/items/{itemId}/publisheditems".replace("{itemId}", this.id ?? "")}?${new URLSearchParams(Object.entries(queryParams).filter(([, v]) => v !== void 0).map(([k, v]) => [k, v.toString()])).toString()}`,
      {
        method: "GET"
      }
    );
    const responseJson = await response.json();
    return new ListableResource(responseJson, this.auth, CollectionResultResponseBody, queryParams);
  }
  /**    Deletes an item and removes the item from all collections.
  
    Deletes an item.
  
    */
  async delete() {
    await this.auth.rest(
      "/items/{itemId}".replace("{itemId}", this.id ?? ""),
      {
        method: "DELETE"
      }
    );
  }
  /**    Updates an item. Omitted and unsupported fields are ignored. To unset a field, provide the field's zero value.
  
    Updates an item.
  
      @param data -
    */
  async set(data) {
    const response = await this.auth.rest(
      "/items/{itemId}".replace("{itemId}", this.id ?? ""),
      {
        method: "PUT",
        body: JSON.stringify(data)
      }
    );
    const responseJson = await response.json();
    Object.keys(responseJson).forEach((key) => {
      if (this[key]) {
        this[key] = responseJson[key];
      }
    });
    return this;
  }
}
class ItemsResultResponseBody {
  constructor({
    data,
    links,
    ...rest
  }, auth) {
    this.auth = auth;
    this.data = data;
    if (data?.length > 0 && !(data[0] instanceof ItemResultResponseBody)) {
      this.data = data.map((element) => new ItemResultResponseBody(element, this.auth));
    }
    this.links = links;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class Items {
  constructor(config) {
    this.config = config instanceof Auth ? config.config : config;
    this.auth = config instanceof Auth ? config : new Auth(config);
  }
  /**    Finds and returns the settings for the current tenant.
  
    Returns tenant specific settings.
  
    */
  async getSettings() {
    const response = await this.auth.rest(
      "/items/settings",
      {
        method: "GET"
      }
    );
    return response.json();
  }
  /**    Updates the settings provided in the patch body.
    Patches tenant specific settings.
  
      @param data -
    */
  async patchSettings(data) {
    const response = await this.auth.rest(
      "/items/settings",
      {
        method: "PATCH",
        body: JSON.stringify(data)
      }
    );
    return response.json();
  }
  /**    Finds and returns an item.
  
    Returns an item.
  
      @param itemId - The item's unique identifier
    */
  async get(itemId) {
    const response = await this.auth.rest(
      "/items/{itemId}".replace("{itemId}", itemId),
      {
        method: "GET"
      }
    );
    const responseJson = await response.json();
    return new ItemResultResponseBody(responseJson, this.auth);
  }
  /**    Finds and returns items that the user has access to.
  
    Retrieves items that the user has access to.
  
      @param collectionId - The collection's unique identifier.
      @param createdByUserId - User's unique identifier.
      @param id - The item's unique identifier.
      @param limit - The maximum number of resources to return for a request. The limit must be an integer between 1 and 100 (inclusive).
      @param name - The case-insensitive string used to search for a resource by name.
      @param next - The cursor to the next page of resources. Provide either the next or prev cursor, but not both.
      @param notCreatedByUserId - User's unique identifier.
      @param notOwnerId - Owner identifier.
      @param ownerId - Owner identifier.
      @param prev - The cursor to the previous page of resources. Provide either the next or prev cursor, but not both.
      @param query - The case-insensitive string used to search for a resource by name or description.
      @param resourceId - The case-sensitive string used to search for an item by resourceId. If resourceId is provided, then resourceType must be provided. Provide either the resourceId or resourceLink, but not both.
      @param resourceIds - The case-sensitive strings used to search for an item by resourceIds. The maximum number of resourceIds it supports is 100. If resourceIds is provided, then resourceType must be provided. For example '?resourceIds=appId1,appId2'
      @param resourceLink - The case-sensitive string used to search for an item by resourceLink. If resourceLink is provided, then resourceType must be provided. Provide either the resourceId or resourceLink, but not both.
      @param resourceSubType - the case-sensitive string used to filter items by resourceSubType(s). For example '?resourceSubType=chart-monitoring,qix-df,qvd'
      @param resourceType - The case-sensitive string used to filter items by resourceType(s). For example '?resourceType=app,qvapp'
      @param shared - Whether or not to return items in a shared space.
      @param sort - The property of a resource to sort on (default sort is +createdAt). The supported properties are createdAt, updatedAt, and name. A property must be prefixed by + or   - to indicate ascending or descending sort order respectively.
      @param spaceId - The space's unique identifier (supports \'personal\' as spaceId).
      @param noActions - If set to true, the user's available actions for each item will not be evaluated meaning the actions-array will be omitted from the response (reduces response time).
  
    */
  async getItems(queryParams = {}) {
    const response = await this.auth.rest(
      `/items?${new URLSearchParams(Object.entries(queryParams).filter(([, v]) => v !== void 0).map(([k, v]) => [k, v.toString()])).toString()}`,
      {
        method: "GET"
      }
    );
    const responseJson = await response.json();
    return new ListableResource(responseJson, this.auth, ItemResultResponseBody, queryParams);
  }
}
export {
  CollectionMetaResponseBody,
  CollectionResultResponseBody,
  ItemResultResponseBody,
  Items,
  ItemsResultResponseBody
};
