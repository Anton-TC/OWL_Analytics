import Auth from "../auth/auth.js";
import ListableResource from "../listable.js";
class Questions {
  constructor(config) {
    this.config = config instanceof Auth ? config.config : config;
    this.auth = config instanceof Auth ? config : new Auth(config);
  }
  /**
    Returns the generated response for parsed chat queries, if no app was specified nor present in conversation context, suggests matching apps.
  
      @param qlik-web-integration-id - This header is only required for external clients or mashups for QCS, this value of this property should be the id of the web integration set up for the external client/mashup
      @param data -
    */
  async ask(data) {
    const response = await this.auth.rest(
      "/questions/actions/ask",
      {
        method: "POST",
        body: JSON.stringify(data)
      }
    );
    return response.json();
  }
  /**
    Returns NL metrics based on provided app IDs the user has access to.
  
      @param limit - The preferred number of entries returned
      @param page - A cursor pointing to the page of data to retrieve.
      @param sort - A single field from the data model on which to sort the response. The '+' or '-' operator may be used to specify ascending or desending order.
  
      @param data -
    */
  async filter(data, queryParams = { limit: 100, sort: "+createdAt" }) {
    const response = await this.auth.rest(
      `/questions/actions/filter?${new URLSearchParams(Object.entries(queryParams).filter(([, v]) => v !== void 0).map(([k, v]) => [k, v.toString()])).toString()}`,
      {
        method: "POST",
        body: JSON.stringify(data)
      }
    );
    const responseJson = await response.json();
    return new ListableResource(responseJson, this.auth, null, queryParams);
  }
}
export {
  Questions
};
