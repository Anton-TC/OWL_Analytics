/**
This is spectacularly generated code by spectacular based on
Qlik Cloud Services APIs
*/
import Auth from '../auth/auth.js';
import ListableResource from '../listable.js';
import type { Config } from '../types/types.js';
export type Href = {
    /** @example "http://example.com" */
    href?: string;
    [key: string]: any;
};
/**
  @param appId - The ID of the app.
  @param creationTime - The time the reload job was created.
  @param endTime - The time the reload job finished.
  @param engineTime - The timestamp returned from the Sense engine upon successful reload.
  @param id - The ID of the reload.
  @param links -
  @param log - The log describing the result of the reload request.
  @param partial - The boolean value used to present the reload is partial or not
  @param startTime - The time the reload job was consumed from the queue.
  @param status - The status of the reload. There are seven statuses. `QUEUED`, `RELOADING`, `CANCELING` are the active statuses. `SUCCEEDED`, `FAILED`,`CANCELED`,`EXCEEDED_LIMIT` are the end statuses.
  @param tenantId - The ID of the tenant who owns the reload.
  @param type - What initiated the reload: hub = one-time reload manually triggered in hub, chronos = time based scheduled reload triggered by chronos, external = reload triggered via external API request, automations = reload triggered in automation, data-refresh = reload triggered by refresh of data.
  @param userId - The ID of the user who created the reload.
  @param auth - Auth object used to make requests
 */
export declare class Reload {
    auth: Auth;
    appId: string;
    creationTime: string;
    endTime?: string;
    engineTime?: string;
    id: string;
    links?: ReloadLinks;
    log?: string;
    partial?: boolean;
    startTime?: string;
    status: 'QUEUED' | 'RELOADING' | 'CANCELING' | 'SUCCEEDED' | 'FAILED' | 'CANCELED' | 'EXCEEDED_LIMIT' | string;
    tenantId: string;
    type: 'hub' | 'chronos' | 'external' | 'automations' | 'data-refresh' | string;
    userId: string;
    [key: string]: any;
    constructor({ appId, creationTime, endTime, engineTime, id, links, log, partial, startTime, status, tenantId, type, userId, ...rest }: {
        appId: string;
        creationTime: string;
        endTime?: string;
        engineTime?: string;
        id: string;
        links?: ReloadLinks;
        log?: string;
        partial?: boolean;
        startTime?: string;
        status: 'QUEUED' | 'RELOADING' | 'CANCELING' | 'SUCCEEDED' | 'FAILED' | 'CANCELED' | 'EXCEEDED_LIMIT' | string;
        tenantId: string;
        type: 'hub' | 'chronos' | 'external' | 'automations' | 'data-refresh' | string;
        userId: string;
    }, auth?: Auth);
    /**    Cancels a reload that is in progress or has been queued
    Cancels a reload
  
    */
    cancel(): Promise<void>;
}
export type ReloadLinks = {
    self?: Href;
    [key: string]: any;
};
export type ReloadRequest = {
    /** The ID of the app to be reloaded.
  @example "116dbfae-7fb9-4983-8e23-5ccd8c508722" */
    appId: string;
    /** The boolean value used to present the reload is partial or not */
    partial?: boolean;
    [key: string]: any;
};
export declare class Reloads {
    auth: Auth;
    config: Config;
    constructor(config: Config | Auth);
    /**    Finds and returns a reload record
    Get reload record
  
      @param reloadId - The unique identifier of the reload.
    */
    get(reloadId: string): Promise<Reload>;
    /**
    Finds and returns the reloads that the user has access to.
  
      @param appId - The UUID formatted string used to search for an app's reload history entries. TenantAdmin users may omit this parameter to list all reload history in the tenant.
      @param limit - The maximum number of resources to return for a request. The limit must be an integer between 1 and 100 (inclusive).
      @param next - The cursor to the next page of resources. Provide either the next or prev cursor, but not both.
      @param partial - The boolean value used to search for a reload is partial or not.
      @param prev - The cursor to the previous page of resources. Provide either the next or prev cursor, but not both.
    */
    getReloads(queryParams: {
        appId: string;
        limit?: number;
        next?: string;
        partial?: boolean;
        prev?: string;
    }): Promise<ListableResource<Reload>>;
    /**
    Reloads an app specified by an app ID.
  
      @param data - Request body specifying ID of app to be reloaded.
    */
    create(data: ReloadRequest): Promise<Reload>;
}
