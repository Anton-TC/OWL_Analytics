export declare class GenericError extends Error {
    constructor(error: string | any);
}
/**
 * @remarks
 * AuthenticationError is an error that occured during a request
 */
export declare class AuthenticationError extends GenericError {
}
export declare enum AuthenticationErrorMsg {
    FAILED_AUTH_API_KEY = "Failed to authenticate host using api-key",
    UNAUTHENTICATED = "Unauthenticated access"
}
/**
 * @remarks
 * ConnectionError is an error that occured during creating a request
 */
export declare class ConnectionError extends GenericError {
}
export declare enum ConnectionErrorMsg {
    NO_RESPONSE = "Connection Error"
}
/**
 * @remarks
 * CustomError is an error that occured during setup
 */
export declare class CustomError extends GenericError {
}
export declare enum CustomErrorMsg {
    EMPTY_HOST = "Empty host in config",
    MISSING_REQUIRED_PROPERTY = "Missing required property",
    UNSUPPORTED_AUTH_TYPE = "Unsupported authType",
    UNSUPPORTED_PROPERTY = "Unsupported property",
    NOT_IMPLEMENTED = "Not implemented",
    MISSING_FETCH = "Missing fetch function",
    NOT_FOUND = "Requested resource not found or lacking access permissions"
}
/**
 * @remarks
 * AuthorizationError is an error that occured during OAuth authorization
 */
export declare class AuthorizationError extends GenericError {
}
export declare enum AuthorizationErrorMsg {
    FAILED_AUTH_OAUTH = "Failed to authorize using OAuth"
}
/**
 * NotFoundError is an error that is thrown when the requested resource was not found
 * or lacking access permissions
 */
export declare class NotFoundError extends GenericError {
}
/**
 * @remarks
 * EngineCloseError is an error that occured during web-socket connection
 */
export declare class EngineCloseError extends GenericError {
    closeCode?: number;
    closeMsg?: string;
    constructor(closeCode: number, closeMsg: string);
}
export declare class EngineMessageError extends GenericError {
    errorCode?: number;
    errorMessage?: string;
    parameter?: string;
    constructor(errorCode: number, errorMsg: string, parameter: string);
}
