class GenericError extends Error {
  constructor(error) {
    switch (typeof error) {
      case "string":
        super(error);
        break;
      case "object":
        super(error?.error);
        Object.assign(this, error);
        break;
      default:
        super("UnkownError");
    }
    this.name = this.constructor.name;
  }
}
class AuthenticationError extends GenericError {
}
var AuthenticationErrorMsg = /* @__PURE__ */ ((AuthenticationErrorMsg2) => {
  AuthenticationErrorMsg2["FAILED_AUTH_API_KEY"] = "Failed to authenticate host using api-key";
  AuthenticationErrorMsg2["UNAUTHENTICATED"] = "Unauthenticated access";
  return AuthenticationErrorMsg2;
})(AuthenticationErrorMsg || {});
class ConnectionError extends GenericError {
}
var ConnectionErrorMsg = /* @__PURE__ */ ((ConnectionErrorMsg2) => {
  ConnectionErrorMsg2["NO_RESPONSE"] = "Connection Error";
  return ConnectionErrorMsg2;
})(ConnectionErrorMsg || {});
class CustomError extends GenericError {
}
var CustomErrorMsg = /* @__PURE__ */ ((CustomErrorMsg2) => {
  CustomErrorMsg2["EMPTY_HOST"] = "Empty host in config";
  CustomErrorMsg2["MISSING_REQUIRED_PROPERTY"] = "Missing required property";
  CustomErrorMsg2["UNSUPPORTED_AUTH_TYPE"] = "Unsupported authType";
  CustomErrorMsg2["UNSUPPORTED_PROPERTY"] = "Unsupported property";
  CustomErrorMsg2["NOT_IMPLEMENTED"] = "Not implemented";
  CustomErrorMsg2["MISSING_FETCH"] = "Missing fetch function";
  CustomErrorMsg2["NOT_FOUND"] = "Requested resource not found or lacking access permissions";
  return CustomErrorMsg2;
})(CustomErrorMsg || {});
class AuthorizationError extends GenericError {
}
var AuthorizationErrorMsg = /* @__PURE__ */ ((AuthorizationErrorMsg2) => {
  AuthorizationErrorMsg2["FAILED_AUTH_OAUTH"] = "Failed to authorize using OAuth";
  return AuthorizationErrorMsg2;
})(AuthorizationErrorMsg || {});
class NotFoundError extends GenericError {
}
class EngineCloseError extends GenericError {
  constructor(closeCode, closeMsg) {
    super(`Engine close error: ${closeCode}, ${closeMsg}`);
    this.closeCode = closeCode;
    this.closeMsg = closeMsg;
  }
}
class EngineMessageError extends GenericError {
  constructor(errorCode, errorMsg, parameter) {
    super(`Engine message error: ${errorCode}, ${errorMsg}, ${parameter}`);
    this.errorCode = errorCode;
    this.errorMessage = errorMsg;
    this.parameter = parameter;
  }
}
export {
  AuthenticationError,
  AuthenticationErrorMsg,
  AuthorizationError,
  AuthorizationErrorMsg,
  ConnectionError,
  ConnectionErrorMsg,
  CustomError,
  CustomErrorMsg,
  EngineCloseError,
  EngineMessageError,
  GenericError,
  NotFoundError
};
