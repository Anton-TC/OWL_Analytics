import Auth from "../auth/auth.js";
import ListableResource from "../listable.js";
class OauthTokens {
  constructor(config) {
    this.config = config instanceof Auth ? config.config : config;
    this.auth = config instanceof Auth ? config : new Auth(config);
  }
  /**
    Revoke an OAuth token by ID
  
      @param tokenId - The ID of the token to revoke.
    */
  async delete(tokenId) {
    await this.auth.rest(
      "/oauth-tokens/{tokenId}".replace("{tokenId}", tokenId),
      {
        method: "DELETE"
      }
    );
  }
  /**
    List OAuth tokens
  
      @param limit - The maximum number of tokens to return.
      @param page - The target page.
      @param sort - The field to sort by.
      @param userId - The ID of the user to limit results to.
    */
  async getOauthTokens(queryParams = { sort: "userId" }) {
    const response = await this.auth.rest(
      `/oauth-tokens?${new URLSearchParams(Object.entries(queryParams).filter(([, v]) => v !== void 0).map(([k, v]) => [k, v.toString()])).toString()}`,
      {
        method: "GET"
      }
    );
    const responseJson = await response.json();
    return new ListableResource(responseJson, this.auth, null, queryParams);
  }
}
export {
  OauthTokens
};
