import Auth from "../auth/auth.js";
import ListableResource from "../listable.js";
class Roles {
  constructor(config) {
    this.config = config instanceof Auth ? config.config : config;
    this.auth = config instanceof Auth ? config : new Auth(config);
  }
  /**    Returns the requested role.
    Get role by ID
  
      @param id - The role's unique identifier
    */
  async get(id) {
    const response = await this.auth.rest(
      "/roles/{id}".replace("{id}", id),
      {
        method: "GET"
      }
    );
    return response.json();
  }
  /**    Returns a list of roles using cursor-based pagination.
    List roles
  
      @param filter - The advanced filtering to use for the query. Refer to RFC 7644 https://datatracker.ietf.org/doc/rfc7644/ for the syntax. All conditional statements within this query parameter are case insensitive.
      @param limit - The number of roles to retrieve.
      @param next - The next page cursor.
      @param prev - The previous page cursor.
      @param sort - Optional resource field name to sort on, eg. name. Can be prefixed with +/- to determine order, defaults to (+) ascending.
      @param totalResults - Determines wether to return a count of the total records matched in the query. Defaults to false.
    */
  async getRoles(queryParams = { limit: 20 }) {
    const response = await this.auth.rest(
      `/roles?${new URLSearchParams(Object.entries(queryParams).filter(([, v]) => v !== void 0).map(([k, v]) => [k, v.toString()])).toString()}`,
      {
        method: "GET"
      }
    );
    const responseJson = await response.json();
    return new ListableResource(responseJson, this.auth, null, queryParams);
  }
}
export {
  Roles
};
