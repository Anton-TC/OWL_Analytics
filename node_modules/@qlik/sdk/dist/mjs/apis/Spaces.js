import Auth from "../auth/auth.js";
import ListableResource from "../listable.js";
class Space {
  constructor({
    createdAt,
    createdBy,
    description,
    id,
    links,
    meta,
    name,
    ownerId,
    tenantId,
    type,
    updatedAt,
    ...rest
  }, auth) {
    this.auth = auth;
    this.createdAt = createdAt;
    this.createdBy = createdBy;
    this.description = description;
    this.id = id;
    this.links = links;
    if (meta !== void 0 && meta !== null) {
      this.meta = meta;
    }
    this.name = name;
    this.ownerId = ownerId;
    this.tenantId = tenantId;
    this.type = type;
    this.updatedAt = updatedAt;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
  /**
    Deletes an assignment.
  
      @param assignmentId - The ID of the assignment to delete.
    */
  async deleteAssignment(assignmentId) {
    await this.auth.rest(
      "/spaces/{spaceId}/assignments/{assignmentId}".replace("{assignmentId}", assignmentId).replace("{spaceId}", this.id ?? ""),
      {
        method: "DELETE"
      }
    );
  }
  /**
    Retrieves a single assignment by ID.
  
      @param assignmentId - The ID of the assignment to retrieve.
    */
  async getAssignment(assignmentId) {
    const response = await this.auth.rest(
      "/spaces/{spaceId}/assignments/{assignmentId}".replace("{assignmentId}", assignmentId).replace("{spaceId}", this.id ?? ""),
      {
        method: "GET"
      }
    );
    return response.json();
  }
  /**
    Updates a single assignment by ID. The complete list of roles must be provided.
  
      @param assignmentId - The ID of the assignment to update.
      @param data - Attributes that the user wants to update for the specified assignment.
    */
  async setAssignment(assignmentId, data) {
    const response = await this.auth.rest(
      "/spaces/{spaceId}/assignments/{assignmentId}".replace("{assignmentId}", assignmentId).replace("{spaceId}", this.id ?? ""),
      {
        method: "PUT",
        body: JSON.stringify(data)
      }
    );
    return response.json();
  }
  /**
    Retrieves the assignments of the space matching the query.
  
      @param limit - Maximum number of assignments to return.
      @param next - The next page cursor. Next links make use of this.
      @param prev - The previous page cursor. Previous links make use of this.
    */
  async getAssignments(queryParams = { limit: 10 }) {
    const response = await this.auth.rest(
      `${"/spaces/{spaceId}/assignments".replace("{spaceId}", this.id ?? "")}?${new URLSearchParams(Object.entries(queryParams).filter(([, v]) => v !== void 0).map(([k, v]) => [k, v.toString()])).toString()}`,
      {
        method: "GET"
      }
    );
    const responseJson = await response.json();
    return new ListableResource(responseJson, this.auth, null, queryParams);
  }
  /**
    Creates an assignment.
  
      @param data - Attributes that the user wants to set for the assignment for the space.
    */
  async createAssignment(data) {
    const response = await this.auth.rest(
      "/spaces/{spaceId}/assignments".replace("{spaceId}", this.id ?? ""),
      {
        method: "POST",
        body: JSON.stringify(data)
      }
    );
    return response.json();
  }
  /**
    Deletes a space.
  
    */
  async delete() {
    await this.auth.rest(
      "/spaces/{spaceId}".replace("{spaceId}", this.id ?? ""),
      {
        method: "DELETE"
      }
    );
  }
  /**
    Patches (updates) a space (partially).
  
      @param data - Attribute that the user wants to patch (update) for the specified space.
    */
  async patch(data) {
    const response = await this.auth.rest(
      "/spaces/{spaceId}".replace("{spaceId}", this.id ?? ""),
      {
        method: "PATCH",
        body: JSON.stringify(data)
      }
    );
    const responseJson = await response.json();
    Object.keys(responseJson).forEach((key) => {
      if (this[key]) {
        this[key] = responseJson[key];
      }
    });
    return this;
  }
  /**
    Updates a space.
  
      @param data - Attributes that the user wants to update for the specified space.
    */
  async set(data) {
    const response = await this.auth.rest(
      "/spaces/{spaceId}".replace("{spaceId}", this.id ?? ""),
      {
        method: "PUT",
        body: JSON.stringify(data)
      }
    );
    const responseJson = await response.json();
    Object.keys(responseJson).forEach((key) => {
      if (this[key]) {
        this[key] = responseJson[key];
      }
    });
    return this;
  }
}
class Spaces {
  constructor(config) {
    this.config = config instanceof Auth ? config.config : config;
    this.auth = config instanceof Auth ? config : new Auth(config);
  }
  /**
    Gets a list of distinct space types.
  
    */
  async getTypes() {
    const response = await this.auth.rest(
      "/spaces/types",
      {
        method: "GET"
      }
    );
    return response.json();
  }
  /**
    Retrieves a single space by ID.
  
      @param spaceId - The ID of the space to retrieve.
    */
  async get(spaceId) {
    const response = await this.auth.rest(
      "/spaces/{spaceId}".replace("{spaceId}", spaceId),
      {
        method: "GET"
      }
    );
    const responseJson = await response.json();
    return new Space(responseJson, this.auth);
  }
  /**
    Retrieves spaces that the current user has access to and match the query.
  
      @param action - Action on space. Supports only "?action=publish".
      @param filter - Exact match filtering on space name using SCIM. Case insensitive on attribute name. For example ?filter=name eq "MySpace" and ?filter=NAME eq "MySpace" is both valid.
      @param limit - Maximum number of spaces to return.
      @param name - Space name to search and filter for. Case-insensitive open search with wildcards both as prefix and suffix. For example, "?name=fin" will get "finance", "Final" and "Griffin".
      @param next - The next page cursor. Next links make use of this.
      @param ownerId - Space ownerId to filter by. For example, "?ownerId=123".
      @param prev - The previous page cursor. Previous links make use of this.
      @param sort - Field to sort by. Prefix with +/- to indicate asc/desc. For example, "?sort=+name" to sort ascending on Name. Supported fields are "type", "name" and "createdAt".
      @param type - Type(s) of space to filter. For example, "?type=managed,shared".
    */
  async getSpaces(queryParams = { limit: 10 }) {
    const response = await this.auth.rest(
      `/spaces?${new URLSearchParams(Object.entries(queryParams).filter(([, v]) => v !== void 0).map(([k, v]) => [k, v.toString()])).toString()}`,
      {
        method: "GET"
      }
    );
    const responseJson = await response.json();
    return new ListableResource(responseJson, this.auth, Space, queryParams);
  }
  /**
    Creates a space.
  
      @param data - Attributes that the user wants to set for a new space.
    */
  async create(data) {
    const response = await this.auth.rest(
      "/spaces",
      {
        method: "POST",
        body: JSON.stringify(data)
      }
    );
    const responseJson = await response.json();
    return new Space(responseJson, this.auth);
  }
}
export {
  Space,
  Spaces
};
