import Auth from "../auth/auth.js";
import ListableResource from "../listable.js";
class Webhook {
  constructor({
    createdAt,
    createdByUserId,
    description,
    disabledReason,
    disabledReasonCode,
    enabled,
    eventTypes,
    filter,
    headers,
    id,
    level = "tenant",
    name,
    ownerId,
    secret,
    updatedAt,
    updatedByUserId,
    url,
    ...rest
  }, auth) {
    this.auth = auth;
    this.createdAt = createdAt;
    this.createdByUserId = createdByUserId;
    this.description = description;
    this.disabledReason = disabledReason;
    this.disabledReasonCode = disabledReasonCode;
    this.enabled = enabled;
    this.eventTypes = eventTypes;
    this.filter = filter;
    this.headers = headers;
    this.id = id;
    this.level = level;
    this.name = name;
    this.ownerId = ownerId;
    this.secret = secret;
    this.updatedAt = updatedAt;
    this.updatedByUserId = updatedByUserId;
    this.url = url;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
  /**
    Resend the delivery with the same payload
  
      @param deliveryId - The delivery's unique identifier.
    */
  async resend(deliveryId) {
    const response = await this.auth.rest(
      "/webhooks/{id}/deliveries/{deliveryId}/actions/resend".replace("{deliveryId}", deliveryId).replace("{id}", this.id ?? ""),
      {
        method: "POST"
      }
    );
    return response.json();
  }
  /**
    Returns details for a specific delivery
  
      @param deliveryId - The delivery's unique identifier.
    */
  async getDeliverie(deliveryId) {
    const response = await this.auth.rest(
      "/webhooks/{id}/deliveries/{deliveryId}".replace("{deliveryId}", deliveryId).replace("{id}", this.id ?? ""),
      {
        method: "GET"
      }
    );
    return response.json();
  }
  /**
    Returns deliveries for a specific webhook
  
      @param eventType - Filter resources by event-type
      @param limit - Maximum number of deliveries to retrieve
      @param next - Cursor to the next page
      @param prev - Cursor to previous next page
      @param sort - Field to sort by, prefix with -/+ to indicate order
      @param status - Filter resources by status (success or fail)
    */
  async getDeliveries(queryParams = { limit: 20, sort: "-triggeredAt" }) {
    const response = await this.auth.rest(
      `${"/webhooks/{id}/deliveries".replace("{id}", this.id ?? "")}?${new URLSearchParams(Object.entries(queryParams).filter(([, v]) => v !== void 0).map(([k, v]) => [k, v.toString()])).toString()}`,
      {
        method: "GET"
      }
    );
    const responseJson = await response.json();
    return new ListableResource(responseJson, this.auth, null, queryParams);
  }
  /**
    Deletes a specific webhook
  
    */
  async delete() {
    await this.auth.rest(
      "/webhooks/{id}".replace("{id}", this.id ?? ""),
      {
        method: "DELETE"
      }
    );
  }
  /**
    Patches a webhook
  
      @param WebhookPatchData -
    */
  async patch(WebhookPatchData) {
    await this.auth.rest(
      "/webhooks/{id}".replace("{id}", this.id ?? ""),
      {
        method: "PATCH",
        body: JSON.stringify(WebhookPatchData)
      }
    );
  }
  /**
    Updates a webhook
  
      @param data -
    */
  async set(data) {
    const response = await this.auth.rest(
      "/webhooks/{id}".replace("{id}", this.id ?? ""),
      {
        method: "PUT",
        body: JSON.stringify(data)
      }
    );
    const responseJson = await response.json();
    Object.keys(responseJson).forEach((key) => {
      if (this[key]) {
        this[key] = responseJson[key];
      }
    });
    return this;
  }
}
class Webhooks {
  constructor(config) {
    this.config = config instanceof Auth ? config.config : config;
    this.auth = config instanceof Auth ? config : new Auth(config);
  }
  /**
    List of event-types that are possible to subscribe to.
  
    */
  async getEventTypes() {
    const response = await this.auth.rest(
      "/webhooks/event-types",
      {
        method: "GET"
      }
    );
    return response.json();
  }
  /**
    Returns details for a specific webhook
  
      @param id - The webhook's unique identifier.
    */
  async get(id) {
    const response = await this.auth.rest(
      "/webhooks/{id}".replace("{id}", id),
      {
        method: "GET"
      }
    );
    const responseJson = await response.json();
    return new Webhook(responseJson, this.auth);
  }
  /**
    Retrieves all webhooks entries for a tenant
  
      @param createdByUserId - Filter resources by user that created it
      @param enabled - Filter resources by enabled true/false
      @param eventType - Filter resources by event-type
      @param level - Filter resources by level that user has access to (either user or level)
      @param limit - Maximum number of webhooks to retrieve
      @param name - Filter resources by name (wildcard and case insensitive)
      @param next - Cursor to the next page
      @param ownerId - Filter resources by user that owns it, only applicable for user level webhooks
      @param prev - Cursor to previous next page
      @param sort - Field to sort by, prefix with -/+ to indicate order
      @param updatedByUserId - Filter resources by user that last updated the webhook
      @param url - Filter resources by url (wildcard and case insensitive)
    */
  async getWebhooks(queryParams = { limit: 20, sort: "-createdAt" }) {
    const response = await this.auth.rest(
      `/webhooks?${new URLSearchParams(Object.entries(queryParams).filter(([, v]) => v !== void 0).map(([k, v]) => [k, v.toString()])).toString()}`,
      {
        method: "GET"
      }
    );
    const responseJson = await response.json();
    return new ListableResource(responseJson, this.auth, Webhook, queryParams);
  }
  /**
    Creates a new webhook
  
      @param data -
    */
  async create(data) {
    const response = await this.auth.rest(
      "/webhooks",
      {
        method: "POST",
        body: JSON.stringify(data)
      }
    );
    const responseJson = await response.json();
    return new Webhook(responseJson, this.auth);
  }
}
export {
  Webhook,
  Webhooks
};
