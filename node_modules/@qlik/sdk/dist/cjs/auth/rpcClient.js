var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var rpcClient_exports = {};
__export(rpcClient_exports, {
  default: () => RpcClient
});
module.exports = __toCommonJS(rpcClient_exports);
var import_enigma = __toESM(require("enigma.js"));
var import_types = require("../types/types.js");
var import_restClient = __toESM(require("./restClient.js"));
var import_utils = require("../utils/utils.js");
var import_errors = require("../errors.js");
const WS = true ? require("ws") : WebSocket;
function use(intercept) {
  const interceptArr = Array.isArray(intercept) ? intercept : [intercept];
  this.handlers = this.handlers.concat(interceptArr);
}
class RpcClient {
  constructor(config, rest) {
    /** object storing the interceptors */
    this.interceptors = {
      request: {
        handlers: [],
        use
      },
      response: {
        handlers: [],
        use
      }
    };
    this.sessions = {};
    this.config = config;
    this.rest = rest ?? new import_restClient.default(config).restClientInstance;
    const errorInterceptor = {
      onFulfilled: (session, req, res) => {
        if ("error" in res) {
          const { error } = res;
          throw new import_errors.EngineMessageError(error.code, error.message, error.parameter);
        }
        return res;
      }
    };
    this.interceptors.response.use(errorInterceptor);
  }
  async rpc(appId, rpcConfig = { delta: true }) {
    const apiResponseInterceptor = {
      onFulfilled: (session, req, res) => {
        const qReturn = res?.result?.qReturn;
        if (qReturn && qReturn.qHandle && qReturn.qType) {
          res.result.qReturn.id = qReturn.qGenericId;
          res.result.qReturn.handle = qReturn.qHandle;
          res.result.qReturn.type = qReturn.qType;
          res.result.qReturn.genericType = qReturn.qGenericType;
        }
        if (qReturn && qReturn.qHandle === null && qReturn.qType === null) {
          const code = -2;
          throw new import_errors.NotFoundError({ error: "Object not found", code });
        }
        return res;
      }
    };
    const { url, createSocket } = await this.buildUrlAndCreateSocket(appId);
    const createSession = () => {
      const session = import_enigma.default.create({
        schema: {
          structs: {
            Global: {},
            Doc: {},
            GenericMeasure: {},
            GenericVariable: {},
            GenericBookmark: {},
            GenericDimension: {},
            GenericObject: {},
            Field: {}
          }
        },
        url,
        createSocket,
        protocol: { delta: rpcConfig.delta }
      });
      this.interceptors.response.use(session.intercept.response[1]);
      this.interceptors.response.use(apiResponseInterceptor);
      session.intercept.response = this.interceptors.response.handlers;
      this.interceptors.request.use(session.intercept.request[0]);
      session.intercept.request = this.interceptors.request.handlers;
      session.on("closed", (data) => {
        if (this.sessions[session.config?.url]?.eventListeners) {
          Object.values(this.sessions[session.config?.url]?.eventListeners)?.forEach((handle) => {
            handle?.closed?.forEach(
              (listener) => {
                listener(data);
              }
            );
          });
        }
        if (data?.code && data.code >= 4e3) {
          session.onRpcError(new import_errors.EngineCloseError(data.code, data.reason));
        }
        delete this.sessions[session.config?.url];
      });
      return session;
    };
    this.sessions[url.toString()] = this.sessions[url.toString()] || createSession();
    this.sessions[url.toString()].on("traffic:*", (direction, msg) => {
      if ("handle" in msg) {
        this.sessions[url.toString()]?.eventListeners?.[msg.handle]?.[`traffic:${direction}`]?.forEach(async (listener) => {
          await listener(msg);
        });
        this.sessions[url.toString()]?.eventListeners?.[msg.handle]?.["traffic:*"]?.forEach(async (listener) => {
          await listener(msg);
        });
      }
      if ("change" in msg) {
        msg.change.forEach((qHandle) => {
          this.sessions[url.toString()]?.eventListeners?.[qHandle]?.changed?.forEach(
            async (listener) => {
              await listener(msg);
            }
          );
        });
      }
      if ("close" in msg) {
        msg.close.forEach((qHandle) => {
          this.sessions[url.toString()]?.eventListeners?.[qHandle]?.closed?.forEach(
            async (listener) => {
              await listener(msg);
            }
          );
        });
      }
    });
    return this.sessions[url.toString()];
  }
  /**
  * @param appId - the application Id
  * @param config - required configuration
  */
  async buildUrlAndCreateSocket(appId) {
    const url = await (0, import_utils.generateWebsocketUrl)(appId, this.rest, this.config);
    let createSocket;
    if (this.config.authType === import_types.AuthType.APIKey || this.config.authType === import_types.AuthType.OAuth2 && !import_utils.isBrowser) {
      createSocket = (wsUrl) => new WS(wsUrl, {
        headers: { Authorization: `Bearer ${this.config.apiKey}` }
      });
    } else {
      createSocket = (wsUrl) => new WS(wsUrl);
    }
    return { url, createSocket };
  }
}
