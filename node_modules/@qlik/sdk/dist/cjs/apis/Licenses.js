var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var Licenses_exports = {};
__export(Licenses_exports, {
  Licenses: () => Licenses
});
module.exports = __toCommonJS(Licenses_exports);
var import_auth = __toESM(require("../auth/auth.js"));
var import_listable = __toESM(require("../listable.js"));
class Licenses {
  constructor(config) {
    this.config = config instanceof import_auth.default ? config.config : config;
    this.auth = config instanceof import_auth.default ? config : new import_auth.default(config);
  }
  /**
    Assigns license access to the given users
  
      @param data - List of subjects to allocate assignments for.
    */
  async add(data) {
    const response = await this.auth.rest(
      "/licenses/assignments/actions/add",
      {
        method: "POST",
        body: JSON.stringify(data)
      }
    );
    return response.json();
  }
  /**
    Removes license access for the given users
  
      @param data - List of assignments to delete.
    */
  async delete(data) {
    const response = await this.auth.rest(
      "/licenses/assignments/actions/delete",
      {
        method: "POST",
        body: JSON.stringify(data)
      }
    );
    return response.json();
  }
  /**
    Updates license access for the given users
  
      @param data - List of assignments to update.
    */
  async update(data) {
    const response = await this.auth.rest(
      "/licenses/assignments/actions/update",
      {
        method: "POST",
        body: JSON.stringify(data)
      }
    );
    return response.json();
  }
  /**
    Retrieves assignments for the current tenant
  
      @param filter - The filter for finding entries.
      @param limit - The preferred number of entries to return.
      @param page - The requested page.
      @param sort - The field to sort on; can be prefixed with +/- for ascending/descending sort order.
    */
  async getAssignments(queryParams = { limit: 20 }) {
    const response = await this.auth.rest(
      `/licenses/assignments?${new URLSearchParams(Object.entries(queryParams).filter(([, v]) => v !== void 0).map(([k, v]) => [k, v.toString()])).toString()}`,
      {
        method: "GET"
      }
    );
    const responseJson = await response.json();
    return new import_listable.default(responseJson, this.auth, null, queryParams);
  }
  /**
    Retrieves license consumption for the current tenant
  
      @param filter - The filter for finding entries.
      @param limit - The preferred number of entries to return.
      @param page - The requested page.
      @param sort - The field to sort on; can be prefixed with +/- for ascending/descending sort order.
    */
  async getConsumptions(queryParams = { limit: 200 }) {
    const response = await this.auth.rest(
      `/licenses/consumption?${new URLSearchParams(Object.entries(queryParams).filter(([, v]) => v !== void 0).map(([k, v]) => [k, v.toString()])).toString()}`,
      {
        method: "GET"
      }
    );
    const responseJson = await response.json();
    return new import_listable.default(responseJson, this.auth, null, queryParams);
  }
  /**
    Gets the general information of the license applied to the current tenant
  
    */
  async getOverview() {
    const response = await this.auth.rest(
      "/licenses/overview",
      {
        method: "GET"
      }
    );
    return response.json();
  }
  /**
    Get auto assign settings for tenant.
  
    */
  async getSettings() {
    const response = await this.auth.rest(
      "/licenses/settings",
      {
        method: "GET"
      }
    );
    return response.json();
  }
  /**
    Set auto assign settings for tenant
  
      @param data - Dynamic assignment settings for professional and analyzer users. If professional users and analyzer users are both set, professional users will be automatically assigned, if available. Otherwise, analyzer users will be assigned. If neither of those users are available, analyzer capacity will be assigned, if available.
    */
  async setSettings(data) {
    const response = await this.auth.rest(
      "/licenses/settings",
      {
        method: "PUT",
        body: JSON.stringify(data)
      }
    );
    return response.json();
  }
  /**
    Gets the license status information of the current tenant
  
    */
  async getStatus() {
    const response = await this.auth.rest(
      "/licenses/status",
      {
        method: "GET"
      }
    );
    return response.json();
  }
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  Licenses
});
