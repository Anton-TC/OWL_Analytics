var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var Api_Keys_exports = {};
__export(Api_Keys_exports, {
  ApiKey: () => ApiKey,
  ApiKeys: () => ApiKeys
});
module.exports = __toCommonJS(Api_Keys_exports);
var import_auth = __toESM(require("../auth/auth.js"));
var import_listable = __toESM(require("../listable.js"));
class ApiKey {
  constructor({
    created,
    createdByUser,
    description,
    expiry,
    id,
    lastUpdated,
    status,
    sub,
    subType,
    tenantId,
    ...rest
  }, auth) {
    this.auth = auth;
    this.created = created;
    this.createdByUser = createdByUser;
    this.description = description;
    this.expiry = expiry;
    this.id = id;
    this.lastUpdated = lastUpdated;
    this.status = status;
    this.sub = sub;
    this.subType = subType;
    this.tenantId = tenantId;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
  /**    When the owner of the API key sends the request, the key will be removed. When a TenantAdmin sends the request, the key will be revoked.
    Deletes or revokes an API key.
  
    */
  async delete() {
    await this.auth.rest(
      "/api-keys/{id}".replace("{id}", this.id ?? ""),
      {
        method: "DELETE"
      }
    );
  }
  /**
    Updates an API key for a given ID.
  
      @param data - Properties that the user wants to update for the API key.
    */
  async patch(data) {
    await this.auth.rest(
      "/api-keys/{id}".replace("{id}", this.id ?? ""),
      {
        method: "PATCH",
        body: JSON.stringify(data)
      }
    );
  }
}
class ApiKeys {
  constructor(config) {
    this.config = config instanceof import_auth.default ? config.config : config;
    this.auth = config instanceof import_auth.default ? config : new import_auth.default(config);
  }
  /**
    Gets the API keys configuration for a given tenant ID.
  
      @param tenantId - The tenant ID of the API keys configuration to be retrieved.
    */
  async getConfig(tenantId) {
    const response = await this.auth.rest(
      "/api-keys/configs/{tenantId}".replace("{tenantId}", tenantId),
      {
        method: "GET"
      }
    );
    return response.json();
  }
  /**
    Updates the API keys configuration for a given tenant ID.
  
      @param tenantId - The tenant ID of the API keys configuration to be retrieved.
      @param data - Configurations that the user wants to update for API keys.
    */
  async patchConfig(tenantId, data) {
    await this.auth.rest(
      "/api-keys/configs/{tenantId}".replace("{tenantId}", tenantId),
      {
        method: "PATCH",
        body: JSON.stringify(data)
      }
    );
  }
  /**
    Gets the API key for a given ID.
  
      @param id - The ID of the API key resource to be retrieved.
    */
  async get(id) {
    const response = await this.auth.rest(
      "/api-keys/{id}".replace("{id}", id),
      {
        method: "GET"
      }
    );
    const responseJson = await response.json();
    return new ApiKey(responseJson, this.auth);
  }
  /**
    Lists API keys for a given tenant ID.
  
      @param createdByUser - The user ID that created the API key.
      @param endingBefore - Get resources with IDs that are lower than the target resource ID. Cannot be used in conjunction with startingAfter.
      @param limit - Maximum number of API keys to retrieve.
      @param sort - The field to sort by, with +/- prefix indicating sort order
      @param startingAfter - Get resources with IDs that are higher than the target resource ID. Cannot be used in conjunction with endingBefore.
      @param status - The status of the API key.
      @param sub - The ID of the subject.
    */
  async getApiKeys(queryParams = { limit: 20, sort: "-created" }) {
    const response = await this.auth.rest(
      `/api-keys?${new URLSearchParams(Object.entries(queryParams).filter(([, v]) => v !== void 0).map(([k, v]) => [k, v.toString()])).toString()}`,
      {
        method: "GET"
      }
    );
    const responseJson = await response.json();
    return new import_listable.default(responseJson, this.auth, ApiKey, queryParams);
  }
  /**
    Creates an API key resource.
  
      @param data - Properties that the user wants to set for the API key.
    */
  async create(data) {
    const response = await this.auth.rest(
      "/api-keys",
      {
        method: "POST",
        body: JSON.stringify(data)
      }
    );
    return response.json();
  }
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  ApiKey,
  ApiKeys
});
