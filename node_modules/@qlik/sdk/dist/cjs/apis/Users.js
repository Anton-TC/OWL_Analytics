var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var Users_exports = {};
__export(Users_exports, {
  User: () => User,
  Users: () => Users
});
module.exports = __toCommonJS(Users_exports);
var import_auth = __toESM(require("../auth/auth.js"));
var import_listable = __toESM(require("../listable.js"));
class User {
  constructor({
    assignedGroups,
    assignedRoles,
    created,
    createdAt,
    email,
    id,
    inviteExpiry,
    lastUpdated,
    lastUpdatedAt,
    links,
    locale,
    name,
    picture,
    preferredLocale,
    preferredZoneinfo,
    roles,
    status,
    subject,
    tenantId,
    zoneinfo,
    ...rest
  }, auth) {
    this.auth = auth;
    if (assignedGroups !== void 0 && assignedGroups !== null) {
      this.assignedGroups = assignedGroups;
    }
    if (assignedRoles !== void 0 && assignedRoles !== null) {
      this.assignedRoles = assignedRoles;
    }
    this.created = created;
    this.createdAt = createdAt;
    this.email = email;
    this.id = id;
    this.inviteExpiry = inviteExpiry;
    this.lastUpdated = lastUpdated;
    this.lastUpdatedAt = lastUpdatedAt;
    if (links !== void 0 && links !== null) {
      this.links = links;
    }
    this.locale = locale;
    this.name = name;
    this.picture = picture;
    this.preferredLocale = preferredLocale;
    this.preferredZoneinfo = preferredZoneinfo;
    this.roles = roles;
    this.status = status;
    this.subject = subject;
    this.tenantId = tenantId;
    this.zoneinfo = zoneinfo;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
  /**    Deletes the requested user.
    Delete user by ID
  
    */
  async delete() {
    await this.auth.rest(
      "/users/{userId}".replace("{userId}", this.id ?? ""),
      {
        method: "DELETE"
      }
    );
  }
  /**    Updates fields for a user resource
    Update user by ID
  
      @param data - An array of JSON Patch documents
    */
  async patch(data) {
    await this.auth.rest(
      "/users/{userId}".replace("{userId}", this.id ?? ""),
      {
        method: "PATCH",
        body: JSON.stringify(data)
      }
    );
  }
}
class Users {
  constructor(config) {
    this.config = config instanceof import_auth.default ? config.config : config;
    this.auth = config instanceof import_auth.default ? config : new import_auth.default(config);
  }
  /**    Returns the number of users in a given tenant
    Count users
  
      @param tenantId - The tenant ID to filter by.
    */
  async count(queryParams = {}) {
    const response = await this.auth.rest(
      `/users/actions/count?${new URLSearchParams(Object.entries(queryParams).filter(([, v]) => v !== void 0).map(([k, v]) => [k, v.toString()])).toString()}`,
      {
        method: "GET"
      }
    );
    return response.json();
  }
  /**    Retrieves a list of users matching the filter using an advanced query string.
    Filter users
  
      @param fields - A comma-delimited string of the requested fields per entity. If the 'links' value is omitted, then the entity HATEOAS link will also be omitted.
      @param limit - The number of user entries to retrieve.
      @param next - Get users with IDs that are higher than the target user ID. Cannot be used in conjunction with prev.
      @param prev - Get users with IDs that are lower than the target user ID. Cannot be used in conjunction with next.
      @param sort - The field to sort by, with +/- prefix indicating sort order
      @param data - An advanced query filter to be used for complex user querying in the tenant.
    */
  async filter(data, queryParams = { limit: 20, sort: "+name" }) {
    const response = await this.auth.rest(
      `/users/actions/filter?${new URLSearchParams(Object.entries(queryParams).filter(([, v]) => v !== void 0).map(([k, v]) => [k, v.toString()])).toString()}`,
      {
        method: "POST",
        body: JSON.stringify(data)
      }
    );
    const responseJson = await response.json();
    return new import_listable.default(responseJson, this.auth, User, queryParams);
  }
  /**
    Invite one or more users by email address.
  
      @param data -
    */
  async invite(data) {
    const response = await this.auth.rest(
      "/users/actions/invite",
      {
        method: "POST",
        body: JSON.stringify(data)
      }
    );
    return response.json();
  }
  /**    Redirects to retrieve the user resource associated with the JWT claims.
    Get my user
  
    */
  async getMe() {
    const response = await this.auth.rest(
      "/users/me",
      {
        method: "GET"
      }
    );
    const responseJson = await response.json();
    return new User(responseJson, this.auth);
  }
  /**    Returns the metadata with regard to the user configuration. Deprecated, use GET /v1/roles instead.
    Get configuration metadata
      @deprecated
  
    */
  async getMetadata() {
    const response = await this.auth.rest(
      "/users/metadata",
      {
        method: "GET"
      }
    );
    return response.json();
  }
  /**    Returns the requested user.
    Get user by ID
  
      @param userId - The user's unique identifier
    */
  async get(userId) {
    const response = await this.auth.rest(
      "/users/{userId}".replace("{userId}", userId),
      {
        method: "GET"
      }
    );
    const responseJson = await response.json();
    return new User(responseJson, this.auth);
  }
  /**    Returns a list of users using cursor-based pagination.
    List users
  
      @param fields - A comma-delimited string of the requested fields per entity. If the 'links' value is omitted, then the entity HATEOAS link will also be omitted.
      @param filter - The advanced filtering to use for the query. Refer to RFC 7644 https://datatracker.ietf.org/doc/rfc7644/ for the syntax. Cannot be combined with any of the fields marked as deprecated. All conditional statements within this query parameter are case insensitive.
  
  The following fields support the `eq` operator: `id`, `subject`, `name`, `email`, `status`, `clientId`, `assignedRoles.id` `assignedRoles.name`, `assignedGroups.id`, `assignedGroupsAssignedRoles.name`
  
  Additionally, the following fields support the `co` operator: `name`, `email`, `subject`
  
  Queries may be rate limited if they differ greatly from these examples:
  
  ```
  (id eq "62716ab404a7bd8626af9bd6" or id eq "62716ac4c7e500e13ff5fa22") and (status eq "active" or status eq "disabled")
  ```
  
  ```
  name co "query" or email co "query" or subject co "query" or id eq "query" or assignedRoles.name eq "query"
  ```
  
  Any filters for status must be grouped together and applied to the whole query.
  
  Valid:
  
  ```
  (name eq "Bob" or name eq "Alice") and (status eq "active" or status eq "disabled")
  ```
  
  Invalid:
  
  ```
  name eq "Bob" or name eq "Alice" and (status eq "active" or status eq "disabled")
  ```
  
      @param limit - The number of user entries to retrieve.
      @param next - Get users that come after this cursor value when sorted. Cannot be used in conjunction with `prev`.
      @param prev - Get users that come before this cursor value when sorted. Cannot be used in conjunction with `next`.
      @param sort - The field to sort by, with +/- prefix indicating sort order
      @param email - The email to filter by. Deprecated. Use the new `filter` parameter to provide an advanced query filter.
      @param endingBefore - Get users with IDs that are lower than the target user ID. Cannot be used in conjunction with startingAfter. Deprecated. Use `prev` instead.
      @param role - The role to filter by. Deprecated.
      @param sortBy - The user parameter to sort by. Deprecated. Use `sort` instead.
      @param sortOrder - The sort order, either ascending or descending. Deprecated. Use `sort` instead.
      @param startingAfter - Get users with IDs that are higher than the target user ID. Cannot be used in conjunction with endingBefore. Deprecated. Use `next` instead.
      @param status - The status to filter by. Supports multiple values delimited by commas. Deprecated. Use the new `filter` parameter to provide an advanced query filter.
      @param subject - The subject to filter by. Deprecated. Use the new `filter` parameter to provide an advanced query filter.
      @param tenantId - The tenant ID to filter by. Deprecated.
    */
  async getUsers(queryParams = {
    limit: 20,
    sort: "+name",
    sortBy: "name",
    sortOrder: "asc",
    status: "active"
  }) {
    const response = await this.auth.rest(
      `/users?${new URLSearchParams(Object.entries(queryParams).filter(([, v]) => v !== void 0).map(([k, v]) => [k, v.toString()])).toString()}`,
      {
        method: "GET"
      }
    );
    const responseJson = await response.json();
    return new import_listable.default(responseJson, this.auth, User, queryParams);
  }
  /**    Creates an invited user.
    Create user
  
      @param data -
    */
  async create(data) {
    const response = await this.auth.rest(
      "/users",
      {
        method: "POST",
        body: JSON.stringify(data)
      }
    );
    const responseJson = await response.json();
    return new User(responseJson, this.auth);
  }
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  User,
  Users
});
