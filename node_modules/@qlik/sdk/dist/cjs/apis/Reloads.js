var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var Reloads_exports = {};
__export(Reloads_exports, {
  Reload: () => Reload,
  Reloads: () => Reloads
});
module.exports = __toCommonJS(Reloads_exports);
var import_auth = __toESM(require("../auth/auth.js"));
var import_listable = __toESM(require("../listable.js"));
class Reload {
  constructor({
    appId,
    creationTime,
    endTime,
    engineTime,
    id,
    links,
    log,
    partial,
    startTime,
    status,
    tenantId,
    type,
    userId,
    ...rest
  }, auth) {
    this.auth = auth;
    this.appId = appId;
    this.creationTime = creationTime;
    this.endTime = endTime;
    this.engineTime = engineTime;
    this.id = id;
    if (links !== void 0 && links !== null) {
      this.links = links;
    }
    this.log = log;
    this.partial = partial;
    this.startTime = startTime;
    this.status = status;
    this.tenantId = tenantId;
    this.type = type;
    this.userId = userId;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
  /**    Cancels a reload that is in progress or has been queued
    Cancels a reload
  
    */
  async cancel() {
    await this.auth.rest(
      "/reloads/{reloadId}/actions/cancel".replace("{reloadId}", this.id ?? ""),
      {
        method: "POST"
      }
    );
  }
}
class Reloads {
  constructor(config) {
    this.config = config instanceof import_auth.default ? config.config : config;
    this.auth = config instanceof import_auth.default ? config : new import_auth.default(config);
  }
  /**    Finds and returns a reload record
    Get reload record
  
      @param reloadId - The unique identifier of the reload.
    */
  async get(reloadId) {
    const response = await this.auth.rest(
      "/reloads/{reloadId}".replace("{reloadId}", reloadId),
      {
        method: "GET"
      }
    );
    const responseJson = await response.json();
    return new Reload(responseJson, this.auth);
  }
  /**
    Finds and returns the reloads that the user has access to.
  
      @param appId - The UUID formatted string used to search for an app's reload history entries. TenantAdmin users may omit this parameter to list all reload history in the tenant.
      @param limit - The maximum number of resources to return for a request. The limit must be an integer between 1 and 100 (inclusive).
      @param next - The cursor to the next page of resources. Provide either the next or prev cursor, but not both.
      @param partial - The boolean value used to search for a reload is partial or not.
      @param prev - The cursor to the previous page of resources. Provide either the next or prev cursor, but not both.
    */
  async getReloads(queryParams) {
    const response = await this.auth.rest(
      `/reloads?${new URLSearchParams(Object.entries(queryParams).filter(([, v]) => v !== void 0).map(([k, v]) => [k, v.toString()])).toString()}`,
      {
        method: "GET"
      }
    );
    const responseJson = await response.json();
    return new import_listable.default(responseJson, this.auth, Reload, queryParams);
  }
  /**
    Reloads an app specified by an app ID.
  
      @param data - Request body specifying ID of app to be reloaded.
    */
  async create(data) {
    const response = await this.auth.rest(
      "/reloads",
      {
        method: "POST",
        body: JSON.stringify(data)
      }
    );
    const responseJson = await response.json();
    return new Reload(responseJson, this.auth);
  }
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  Reload,
  Reloads
});
