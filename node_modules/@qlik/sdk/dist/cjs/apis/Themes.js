var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var Themes_exports = {};
__export(Themes_exports, {
  Theme: () => Theme,
  Themes: () => Themes,
  ThemesClass: () => ThemesClass
});
module.exports = __toCommonJS(Themes_exports);
var import_auth = __toESM(require("../auth/auth.js"));
class Theme {
  constructor({
    author,
    createdAt,
    dependencies,
    description,
    file,
    homepage,
    icon,
    id,
    keywords,
    license,
    name,
    qextFilename,
    qextVersion,
    repository,
    supplier,
    tags,
    tenantId,
    type,
    updateAt,
    userId,
    version,
    ...rest
  }, auth) {
    this.auth = auth;
    this.author = author;
    this.createdAt = createdAt;
    this.dependencies = dependencies;
    this.description = description;
    this.file = file;
    this.homepage = homepage;
    this.icon = icon;
    this.id = id;
    this.keywords = keywords;
    this.license = license;
    this.name = name;
    this.qextFilename = qextFilename;
    this.qextVersion = qextVersion;
    this.repository = repository;
    this.supplier = supplier;
    this.tags = tags;
    this.tenantId = tenantId;
    this.type = type;
    this.updateAt = updateAt;
    this.userId = userId;
    this.version = version;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
  /**
    Downloads a file from the theme archive.
  
      @param filepath - Path to the file archive for the specified theme archive. Folders separated with forward slashes.
    */
  async getFileByFilepath(filepath) {
    await this.auth.rest(
      "/themes/{id}/file/{filepath}".replace("{filepath}", filepath).replace("{id}", this.id ?? ""),
      {
        method: "GET"
      }
    );
  }
  /**
    Downloads the theme as an archive.
  
    */
  async getFile() {
    await this.auth.rest(
      "/themes/{id}/file".replace("{id}", this.id ?? ""),
      {
        method: "GET"
      }
    );
  }
  /**
    Deletes a specific theme.
  
    */
  async delete() {
    await this.auth.rest(
      "/themes/{id}".replace("{id}", this.id ?? ""),
      {
        method: "DELETE"
      }
    );
  }
  /**
    Updates a specific theme with provided data. If a file is provided, the data field is not required.
  
      @param data -
      @param file - Theme archive.
    */
  async patches(data, file) {
    const formData = new FormData();
    if (file !== void 0) {
      formData.append("file", new Blob([file], { type: "application/octet-stream" }));
    }
    if (data !== void 0) {
      formData.append("data", JSON.stringify(data));
    }
    const response = await this.auth.rest(
      "/themes/{id}".replace("{id}", this.id ?? ""),
      {
        method: "PATCH",
        body: formData
      }
    );
    const responseJson = await response.json();
    return new ThemesClass(responseJson, this.auth);
  }
}
class ThemesClass {
  constructor({
    data,
    ...rest
  }, auth) {
    this.auth = auth;
    if (data !== void 0 && data !== null) {
      this.data = data;
      if (data?.length > 0 && !(data[0] instanceof Theme)) {
        this.data = data.map((element) => new Theme(element, this.auth));
      }
    }
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class Themes {
  constructor(config) {
    this.config = config instanceof import_auth.default ? config.config : config;
    this.auth = config instanceof import_auth.default ? config : new import_auth.default(config);
  }
  /**
    Returns a specific theme.
  
      @param id - Theme identifier or its qextFilename
    */
  async get(id) {
    const response = await this.auth.rest(
      "/themes/{id}".replace("{id}", id),
      {
        method: "GET"
      }
    );
    const responseJson = await response.json();
    return new Theme(responseJson, this.auth);
  }
  /**
    Lists all themes.
  
    */
  async getThemes() {
    const response = await this.auth.rest(
      "/themes",
      {
        method: "GET"
      }
    );
    const responseJson = await response.json();
    return new ThemesClass(responseJson, this.auth);
  }
  /**
    Creates a new theme. If a file is provided, the data field is not required.
  
      @param data -
      @param file - Theme archive.
    */
  async create(data, file) {
    const formData = new FormData();
    if (file !== void 0) {
      formData.append("file", new Blob([file], { type: "application/octet-stream" }));
    }
    if (data !== void 0) {
      formData.append("data", JSON.stringify(data));
    }
    const response = await this.auth.rest(
      "/themes",
      {
        method: "POST",
        body: formData
      }
    );
    const responseJson = await response.json();
    return new Theme(responseJson, this.auth);
  }
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  Theme,
  Themes,
  ThemesClass
});
