var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var Audits_exports = {};
__export(Audits_exports, {
  Audits: () => Audits
});
module.exports = __toCommonJS(Audits_exports);
var import_auth = __toESM(require("../auth/auth.js"));
var import_listable = __toESM(require("../listable.js"));
class Audits {
  constructor(config) {
    this.config = config instanceof import_auth.default ? config.config : config;
    this.auth = config instanceof import_auth.default ? config : new import_auth.default(config);
  }
  /**    Finds and returns audit events from the archive, formatted as a JSON array, for the given date and tenant (in JWT).
    Retrieves audit events from long term storage.
  
      @param date - Date to be used as filter and criteria during extraction.
    */
  async getArchives(queryParams) {
    const response = await this.auth.rest(
      `/audits/archive?${new URLSearchParams(Object.entries(queryParams).filter(([, v]) => v !== void 0).map(([k, v]) => [k, v.toString()])).toString()}`,
      {
        method: "GET"
      }
    );
    return response.json();
  }
  /**    It includes options that represent the server configuration state and parameters that were used to run the server with certain functionality.
    Returns the server configuration options.
  
    */
  async getSettings() {
    const response = await this.auth.rest(
      "/audits/settings",
      {
        method: "GET"
      }
    );
    return response.json();
  }
  /**
    Finds and returns the distinct list of unique event sources.
  
    */
  async getSources() {
    const response = await this.auth.rest(
      "/audits/sources",
      {
        method: "GET"
      }
    );
    return response.json();
  }
  /**
    Finds and returns the distinct list of unique event types.
  
    */
  async getTypes() {
    const response = await this.auth.rest(
      "/audits/types",
      {
        method: "GET"
      }
    );
    return response.json();
  }
  /**
    Finds and returns the persisted audit events for the given tenant.
  
      @param id - The audit item's unique identifier.
    */
  async gets(id) {
    const response = await this.auth.rest(
      "/audits/{id}".replace("{id}", id),
      {
        method: "GET"
      }
    );
    return response.json();
  }
  /**
    Finds and returns the persisted audit events for the given tenant.
  
      @param eventTime - The start/end time interval formatted in ISO 8601 to search by eventTime. For example, "?eventTime=2021-07-14T18:41:15.00Z/2021-07-14T18:41:15.99Z".
      @param eventType - The case-sensitive string used to search by eventType.
      @param id - The comma separated list of audit unique identifiers.
      @param limit - The maximum number of resources to return for a request. The limit must be an integer between 1 and 100 (inclusive).
      @param next - The cursor to the next page of resources. Provide either the next or prev cursor, but not both.
      @param prev - The cursor to the previous page of resources. Provide either the next or prev cursor, but not both.
      @param sort - The property of a resource to sort on (default sort is -eventTime). The supported properties are source, eventType, and eventTime. A property must be prefixed by + or - to indicate ascending or descending sort order respectively.
      @param source - The case-sensitive string used to search by source.
      @param userId - The case-sensitive string used to search by userId.
    */
  async getAudits(queryParams = { limit: 10, sort: "-eventTime" }) {
    const response = await this.auth.rest(
      `/audits?${new URLSearchParams(Object.entries(queryParams).filter(([, v]) => v !== void 0).map(([k, v]) => [k, v.toString()])).toString()}`,
      {
        method: "GET"
      }
    );
    const responseJson = await response.json();
    return new import_listable.default(responseJson, this.auth, null, queryParams);
  }
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  Audits
});
