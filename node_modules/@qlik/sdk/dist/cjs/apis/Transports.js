var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var Transports_exports = {};
__export(Transports_exports, {
  Transports: () => Transports
});
module.exports = __toCommonJS(Transports_exports);
var import_auth = __toESM(require("../auth/auth.js"));
class Transports {
  constructor(config) {
    this.config = config instanceof import_auth.default ? config.config : config;
    this.auth = config instanceof import_auth.default ? config : new import_auth.default(config);
  }
  /**
    Send a test mail with the supplied email info (subject, body, recipient). Email config from database is used for the connection.
  
      @param data -
    */
  async sendTestEmail(data) {
    const response = await this.auth.rest(
      "/transports/email-config/actions/send-test-email",
      {
        method: "POST",
        body: JSON.stringify(data)
      }
    );
    return response.json();
  }
  /**
    Returns the isValid value for the email configuration for the tenant. Will return false if no email configuration exists.
  
    */
  async validate() {
    const response = await this.auth.rest(
      "/transports/email-config/actions/validate",
      {
        method: "POST"
      }
    );
    return response.json();
  }
  /**
    Verifies connection to email server for tenant provided via JWT
  
    */
  async verifyConnection() {
    const response = await this.auth.rest(
      "/transports/email-config/actions/verify-connection",
      {
        method: "POST"
      }
    );
    return response.json();
  }
  /**
    Deletes email configuration for a given tenant id (retrieved from JWT).
  
    */
  async deleteEmailConfig() {
    await this.auth.rest(
      "/transports/email-config",
      {
        method: "DELETE"
      }
    );
  }
  /**
    Returns the email configuration for a given tenant id (retrieved from JWT).
  
    */
  async getEmailConfig() {
    const response = await this.auth.rest(
      "/transports/email-config",
      {
        method: "GET"
      }
    );
    return response.json();
  }
  /**
    Patch the email configuration for a given tenant id (retrieved from JWT).
  
      @param data -
    */
  async patchEmailConfig(data) {
    await this.auth.rest(
      "/transports/email-config",
      {
        method: "PATCH",
        body: JSON.stringify(data)
      }
    );
  }
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  Transports
});
