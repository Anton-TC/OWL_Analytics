var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var Quotas_exports = {};
__export(Quotas_exports, {
  Quotas: () => Quotas
});
module.exports = __toCommonJS(Quotas_exports);
var import_auth = __toESM(require("../auth/auth.js"));
class Quotas {
  constructor(config) {
    this.config = config instanceof import_auth.default ? config.config : config;
    this.auth = config instanceof import_auth.default ? config : new import_auth.default(config);
  }
  /**
    Returns a specific quota item for the tenant (provided in JWT).
  
      @param id - The unique identifier of the quota item. For example, "app_mem_size", "app_upload_disk_size", or "shared_spaces".
      @param reportUsage - The Boolean flag indicating whether quota usage shall be part of the response. The default value is false (usage not included).
    */
  async gets(id, queryParams = {}) {
    const response = await this.auth.rest(
      `${"/quotas/{id}".replace("{id}", id)}?${new URLSearchParams(Object.entries(queryParams).filter(([, v]) => v !== void 0).map(([k, v]) => [k, v.toString()])).toString()}`,
      {
        method: "GET"
      }
    );
    return response.json();
  }
  /**
    Returns all quota items for the tenant (provided in JWT).
  
      @param reportUsage - The Boolean flag indicating whether quota usage shall be part of the response. The default value is false (only limits returned).
    */
  async getQuotas(queryParams = {}) {
    const response = await this.auth.rest(
      `/quotas?${new URLSearchParams(Object.entries(queryParams).filter(([, v]) => v !== void 0).map(([k, v]) => [k, v.toString()])).toString()}`,
      {
        method: "GET"
      }
    );
    return response.json();
  }
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  Quotas
});
