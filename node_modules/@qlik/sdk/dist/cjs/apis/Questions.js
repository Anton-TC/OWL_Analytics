var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var Questions_exports = {};
__export(Questions_exports, {
  Questions: () => Questions
});
module.exports = __toCommonJS(Questions_exports);
var import_auth = __toESM(require("../auth/auth.js"));
var import_listable = __toESM(require("../listable.js"));
class Questions {
  constructor(config) {
    this.config = config instanceof import_auth.default ? config.config : config;
    this.auth = config instanceof import_auth.default ? config : new import_auth.default(config);
  }
  /**
    Returns the generated response for parsed chat queries, if no app was specified nor present in conversation context, suggests matching apps.
  
      @param qlik-web-integration-id - This header is only required for external clients or mashups for QCS, this value of this property should be the id of the web integration set up for the external client/mashup
      @param data -
    */
  async ask(data) {
    const response = await this.auth.rest(
      "/questions/actions/ask",
      {
        method: "POST",
        body: JSON.stringify(data)
      }
    );
    return response.json();
  }
  /**
    Returns NL metrics based on provided app IDs the user has access to.
  
      @param limit - The preferred number of entries returned
      @param page - A cursor pointing to the page of data to retrieve.
      @param sort - A single field from the data model on which to sort the response. The '+' or '-' operator may be used to specify ascending or desending order.
  
      @param data -
    */
  async filter(data, queryParams = { limit: 100, sort: "+createdAt" }) {
    const response = await this.auth.rest(
      `/questions/actions/filter?${new URLSearchParams(Object.entries(queryParams).filter(([, v]) => v !== void 0).map(([k, v]) => [k, v.toString()])).toString()}`,
      {
        method: "POST",
        body: JSON.stringify(data)
      }
    );
    const responseJson = await response.json();
    return new import_listable.default(responseJson, this.auth, null, queryParams);
  }
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  Questions
});
