var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var Web_Integrations_exports = {};
__export(Web_Integrations_exports, {
  WebIntegration: () => WebIntegration,
  WebIntegrations: () => WebIntegrations
});
module.exports = __toCommonJS(Web_Integrations_exports);
var import_auth = __toESM(require("../auth/auth.js"));
var import_listable = __toESM(require("../listable.js"));
class WebIntegration {
  constructor({
    created,
    createdBy,
    id,
    lastUpdated,
    name,
    tenantId,
    validOrigins,
    ...rest
  }, auth) {
    this.auth = auth;
    this.created = created;
    this.createdBy = createdBy;
    this.id = id;
    this.lastUpdated = lastUpdated;
    this.name = name;
    this.tenantId = tenantId;
    this.validOrigins = validOrigins;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
  /**    Deletes a single web integration by ID.
    Delete web integration by ID
  
    */
  async delete() {
    await this.auth.rest(
      "/web-integrations/{id}".replace("{id}", this.id ?? ""),
      {
        method: "DELETE"
      }
    );
  }
  /**    Updates a single web integration by ID.
    Update web integration by ID
  
      @param data - Properties that the user wants to update for the web integration.
    */
  async patch(data) {
    await this.auth.rest(
      "/web-integrations/{id}".replace("{id}", this.id ?? ""),
      {
        method: "PATCH",
        body: JSON.stringify(data)
      }
    );
  }
}
class WebIntegrations {
  constructor(config) {
    this.config = config instanceof import_auth.default ? config.config : config;
    this.auth = config instanceof import_auth.default ? config : new import_auth.default(config);
  }
  /**    Retrieves a single web integration by ID.
    Get web integration by ID
  
      @param id - The ID of the web integration to retrieve.
    */
  async get(id) {
    const response = await this.auth.rest(
      "/web-integrations/{id}".replace("{id}", id),
      {
        method: "GET"
      }
    );
    const responseJson = await response.json();
    return new WebIntegration(responseJson, this.auth);
  }
  /**    Retrieves web integrations matching the query.
    List web integrations
  
      @param endingBefore - The target web integration ID to start looking before for web integrations. Cannot be used in conjunction with startingAfter.
      @param limit - The number of web integration entries to retrieve.
      @param sort - The field to sort by. Prefix with +/- to indicate ascending/descending order.
      @param startingAfter - The target web integration ID to start looking after for web integrations. Cannot be used in conjunction with endingBefore.
      @param tenantId - The tenant ID to filter by.
    */
  async getWebIntegrations(queryParams = { limit: 10, sort: "+name" }) {
    const response = await this.auth.rest(
      `/web-integrations?${new URLSearchParams(Object.entries(queryParams).filter(([, v]) => v !== void 0).map(([k, v]) => [k, v.toString()])).toString()}`,
      {
        method: "GET"
      }
    );
    const responseJson = await response.json();
    return new import_listable.default(responseJson, this.auth, WebIntegration, queryParams);
  }
  /**    Creates a web integration.
    Create web integration
  
      @param data - Properties that the user wants to set for the web integration.
    */
  async create(data) {
    const response = await this.auth.rest(
      "/web-integrations",
      {
        method: "POST",
        body: JSON.stringify(data)
      }
    );
    return response.json();
  }
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  WebIntegration,
  WebIntegrations
});
