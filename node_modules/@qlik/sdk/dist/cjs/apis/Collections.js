var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var Collections_exports = {};
__export(Collections_exports, {
  CollectionResultResponseBody: () => CollectionResultResponseBody,
  Collections: () => Collections
});
module.exports = __toCommonJS(Collections_exports);
var import_auth = __toESM(require("../auth/auth.js"));
var import_listable = __toESM(require("../listable.js"));
class CollectionResultResponseBody {
  constructor({
    createdAt,
    creatorId,
    description,
    id,
    itemCount,
    links,
    meta,
    name,
    tenantId,
    type,
    updatedAt,
    updaterId,
    ...rest
  }, auth) {
    this.auth = auth;
    this.createdAt = createdAt;
    this.creatorId = creatorId;
    this.description = description;
    this.id = id;
    this.itemCount = itemCount;
    this.links = links;
    if (meta !== void 0 && meta !== null) {
      this.meta = meta;
    }
    this.name = name;
    this.tenantId = tenantId;
    this.type = type;
    this.updatedAt = updatedAt;
    this.updaterId = updaterId;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
  /**    Removes an item from a collection.
  
    Removes an item from a collection.
  
      @param itemId - The item's unique identifier.
    */
  async deleteItem(itemId) {
    await this.auth.rest(
      "/collections/{collectionId}/items/{itemId}".replace("{collectionId}", this.id ?? "").replace("{itemId}", itemId),
      {
        method: "DELETE"
      }
    );
  }
  /**    Finds and returns an item. See GET /items/{id}
  
    Returns an item in a specific collection.
  
      @param itemId - The item's unique identifier.
    */
  async getItem(itemId) {
    const response = await this.auth.rest(
      "/collections/{collectionId}/items/{itemId}".replace("{collectionId}", this.id ?? "").replace("{itemId}", itemId),
      {
        method: "GET"
      }
    );
    return response.json();
  }
  /**    Finds and returns items from a collection that the user has access to.
  
    Retrieves items in a collection.
  
      @param limit - The maximum number of resources to return for a request. The limit must be an integer between 1 and 100 (inclusive).
      @param name - The case-insensitive string used to search for a resource by name.
      @param next - The cursor to the next page of resources. Provide either the next or prev cursor, but not both.
      @param prev - The cursor to the previous page of resources. Provide either the next or prev cursor, but not both.
      @param query - The case-insensitive string used to search for a resource by name or description.
      @param resourceId - The case-sensitive string used to search for an item by resourceId. If resourceId is provided, then resourceType must be provided. Provide either the resourceId or resourceLink, but not both.
      @param resourceLink - The case-sensitive string used to search for an item by resourceLink. If resourceLink is provided, then resourceType must be provided. Provide either the resourceId or resourceLink, but not both.
      @param resourceType - The case-sensitive string used to search for an item by resourceType.
      @param shared - Whether or not to return items in a shared space.
      @param sort - The property of a resource to sort on (default sort is +createdAt). The supported properties are createdAt, updatedAt, and name. A property must be prefixed by + or   - to indicate ascending or descending sort order respectively.
      @param spaceId - The space's unique identifier (supports \'personal\' as spaceId).
      @param noActions - If set to true, the user's available actions for each item will not be evaluated meaning the actions-array will be omitted from the response (reduces response time).
  
    */
  async getItems(queryParams = { limit: 10 }) {
    const response = await this.auth.rest(
      `${"/collections/{collectionId}/items".replace("{collectionId}", this.id ?? "")}?${new URLSearchParams(Object.entries(queryParams).filter(([, v]) => v !== void 0).map(([k, v]) => [k, v.toString()])).toString()}`,
      {
        method: "GET"
      }
    );
    return response.json();
  }
  /**    Adds an item to a collection and returns the item.
  
    Adds an item to a collection.
  
      @param data -
    */
  async createItem(data) {
    const response = await this.auth.rest(
      "/collections/{collectionId}/items".replace("{collectionId}", this.id ?? ""),
      {
        method: "POST",
        body: JSON.stringify(data)
      }
    );
    return response.json();
  }
  /**    Deletes a collection and removes all items from the collection.
  
    Deletes a collection.
  
    */
  async delete() {
    await this.auth.rest(
      "/collections/{collectionId}".replace("{collectionId}", this.id ?? ""),
      {
        method: "DELETE"
      }
    );
  }
  /**    Updates a collection and returns the new collection. Omitted and unsupported fields are ignored. To unset a field, provide the field's zero value.
  
    Updates a collection.
  
      @param data -
    */
  async set(data) {
    const response = await this.auth.rest(
      "/collections/{collectionId}".replace("{collectionId}", this.id ?? ""),
      {
        method: "PUT",
        body: JSON.stringify(data)
      }
    );
    const responseJson = await response.json();
    Object.keys(responseJson).forEach((key) => {
      if (this[key]) {
        this[key] = responseJson[key];
      }
    });
    return this;
  }
}
class Collections {
  constructor(config) {
    this.config = config instanceof import_auth.default ? config.config : config;
    this.auth = config instanceof import_auth.default ? config : new import_auth.default(config);
  }
  /**    Finds and returns the user's favorites collection.
  
    Retrieves the user's favorites collection.
  
    */
  async getFavorite() {
    const response = await this.auth.rest(
      "/collections/favorites",
      {
        method: "GET"
      }
    );
    return response.json();
  }
  /**    Finds and returns a collection.
  
    Returns a collection.
  
      @param collectionId - The collection's unique identifier.
    */
  async get(collectionId) {
    const response = await this.auth.rest(
      "/collections/{collectionId}".replace("{collectionId}", collectionId),
      {
        method: "GET"
      }
    );
    const responseJson = await response.json();
    return new CollectionResultResponseBody(responseJson, this.auth);
  }
  /**    Finds and returns the collections that the user can access. This endpoint does not return the user's favorites collection.
  
    Retrieves collections that the user has access to.
  
      @param creatorId - The case-sensitive string used to search for a resource by creatorId.
      @param id - The collection's unique identifier.
      @param includeItems - Includes the list of items belonging to the collections. Supported parameters are 'limit', 'sort' and 'resourceType'. Supported formats are json formatted string or deep object style using square brackets.
      @param limit - The maximum number of resources to return for a request. The limit must be an integer between 1 and 100 (inclusive).
      @param name - The case-sensitive string used to search for a collection by name.
      @param next - The cursor to the next page of resources. Provide either the
  next or prev cursor, but not both.
  
      @param prev - The cursor to the previous page of resources. Provide either the next or prev cursor, but not both.
      @param query - The case-insensitive string used to search for a resource by name or description.
      @param sort - The property of a resource to sort on (default sort is +createdAt).
  The supported properties are createdAt, updatedAt, and name. A property
  must be prefixed by + or - to indicate ascending or descending sort order
  respectively.
  
      @param type - The case-sensitive string used to search for a collection by type.
    */
  async getCollections(queryParams = {}) {
    const response = await this.auth.rest(
      `/collections?${new URLSearchParams(Object.entries(queryParams).filter(([, v]) => v !== void 0).map(([k, v]) => [k, v.toString()])).toString()}`,
      {
        method: "GET"
      }
    );
    const responseJson = await response.json();
    return new import_listable.default(responseJson, this.auth, CollectionResultResponseBody, queryParams);
  }
  /**    Creates and returns a new collection. Collections can have the same name.
  
    Creates a new collection.
  
      @param data -
    */
  async create(data) {
    const response = await this.auth.rest(
      "/collections",
      {
        method: "POST",
        body: JSON.stringify(data)
      }
    );
    const responseJson = await response.json();
    return new CollectionResultResponseBody(responseJson, this.auth);
  }
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  CollectionResultResponseBody,
  Collections
});
