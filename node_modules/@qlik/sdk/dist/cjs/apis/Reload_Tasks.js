var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var Reload_Tasks_exports = {};
__export(Reload_Tasks_exports, {
  ReloadTasks: () => ReloadTasks,
  Task: () => Task
});
module.exports = __toCommonJS(Reload_Tasks_exports);
var import_auth = __toESM(require("../auth/auth.js"));
var import_listable = __toESM(require("../listable.js"));
class Task {
  constructor({
    appId,
    autoReload,
    autoReloadPartial,
    endDateTime,
    partial,
    recurrence,
    startDateTime,
    timeZone,
    fortressId,
    id,
    lastExecutionTime,
    links,
    log,
    nextExecutionTime,
    spaceId,
    state,
    tenantId,
    userId,
    ...rest
  }, auth) {
    this.auth = auth;
    this.appId = appId;
    this.autoReload = autoReload;
    this.autoReloadPartial = autoReloadPartial;
    this.endDateTime = endDateTime;
    this.partial = partial;
    this.recurrence = recurrence;
    this.startDateTime = startDateTime;
    this.timeZone = timeZone;
    this.fortressId = fortressId;
    this.id = id;
    this.lastExecutionTime = lastExecutionTime;
    this.links = links;
    this.log = log;
    this.nextExecutionTime = nextExecutionTime;
    this.spaceId = spaceId;
    this.state = state;
    this.tenantId = tenantId;
    this.userId = userId;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
  /**
    Delete a task.
  
    */
  async delete() {
    await this.auth.rest(
      "/reload-tasks/{taskId}".replace("{taskId}", this.id ?? ""),
      {
        method: "DELETE"
      }
    );
  }
  /**
    Update an existing task.
  
      @param data - Request body specifying the task parameters.
    */
  async set(data) {
    const response = await this.auth.rest(
      "/reload-tasks/{taskId}".replace("{taskId}", this.id ?? ""),
      {
        method: "PUT",
        body: JSON.stringify(data)
      }
    );
    const responseJson = await response.json();
    Object.keys(responseJson).forEach((key) => {
      if (this[key]) {
        this[key] = responseJson[key];
      }
    });
    return this;
  }
}
class ReloadTasks {
  constructor(config) {
    this.config = config instanceof import_auth.default ? config.config : config;
    this.auth = config instanceof import_auth.default ? config : new import_auth.default(config);
  }
  /**
    Find and return a task.
  
      @param taskId - The unique identifier of the task.
    */
  async get(taskId) {
    const response = await this.auth.rest(
      "/reload-tasks/{taskId}".replace("{taskId}", taskId),
      {
        method: "GET"
      }
    );
    const responseJson = await response.json();
    return new Task(responseJson, this.auth);
  }
  /**
    Find and return the tasks that the user can access.
  
      @param appId - The case sensitive string used to search for a task by app ID.
      @param limit - The maximum number of resources to return for a request. The limit must be an integer between 1 and 100 (inclusive).
      @param next - The cursor to the next page of resources. Provide either the next or prev cursor, but not both.
      @param partial - The boolean value used to search for a task is partial or not
      @param prev - The cursor to the previous page of resources. Provide either the next or prev cursor, but not both.
    */
  async getReloadTasks(queryParams = { limit: 10 }) {
    const response = await this.auth.rest(
      `/reload-tasks?${new URLSearchParams(Object.entries(queryParams).filter(([, v]) => v !== void 0).map(([k, v]) => [k, v.toString()])).toString()}`,
      {
        method: "GET"
      }
    );
    const responseJson = await response.json();
    return new import_listable.default(responseJson, this.auth, Task, queryParams);
  }
  /**
    Create a task for a specified app.
  
      @param data - Request body specifying the task parameters.
    */
  async create(data) {
    const response = await this.auth.rest(
      "/reload-tasks",
      {
        method: "POST",
        body: JSON.stringify(data)
      }
    );
    const responseJson = await response.json();
    return new Task(responseJson, this.auth);
  }
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  ReloadTasks,
  Task
});
