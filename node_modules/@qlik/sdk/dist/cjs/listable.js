var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var listable_exports = {};
__export(listable_exports, {
  default: () => ListableResource
});
module.exports = __toCommonJS(listable_exports);
class ListableResource extends Array {
  constructor(response, auth, ClsConstructor = null, queryParams = {}) {
    super();
    const createObject = (data) => {
      if (!ClsConstructor) {
        return data;
      }
      return new ClsConstructor(data, auth);
    };
    const responseData = response.data ? response.data : response;
    this.push(...responseData.map(createObject));
    let index = 0;
    let nextHref = response?.links?.next?.href;
    const queryEntries = Object.entries({ limit: 100, ...queryParams }).filter(([, v]) => v !== void 0);
    const extraQueryString = queryEntries.length > 0 ? `&${queryEntries.map(([k, v]) => `${k}=${v}`).join("&")}` : "";
    const fetchNext = async () => {
      const currResponse = await auth.rest(
        nextHref + extraQueryString,
        { method: "GET" }
      );
      const responseJson = await currResponse.json();
      nextHref = responseJson?.links?.next?.href;
      if (responseJson.data) {
        this.push(...responseJson.data.map(createObject));
      }
    };
    const next = async (...args) => {
      const done = Promise.resolve({ done: true, value: null });
      if (index >= this.length) {
        if (!nextHref) {
          return done;
        }
        await fetchNext();
      }
      if (index < this.length) {
        const value = this[index];
        index += 1;
        return Promise.resolve({ done: false, value });
      }
      return done;
    };
    this.pagination = { [Symbol.asyncIterator]: () => ({ next }) };
  }
}
